
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008fdc4  0800d4a8  0800d4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0809d26c  0809d26c  000b00a4  2**0
                  CONTENTS
  4 .ARM          00000008  0809d26c  0809d26c  000ad26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809d274  0809d274  000b00a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809d274  0809d274  000ad274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0809d278  0809d278  000ad278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0809d27c  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  200000a4  0809d320  000b00a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001054  0809d320  000b1054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000b00a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d339  00000000  00000000  000b00d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d43  00000000  00000000  000dd40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  000e3150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e58  00000000  00000000  000e5258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd11  00000000  00000000  000e70b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c93b  00000000  00000000  00113dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ab38  00000000  00000000  001406fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0024b234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009294  00000000  00000000  0024b288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d490 	.word	0x0800d490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800d490 	.word	0x0800d490

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <setRULES>:
#include "REGLES.h"
#include "stm32746g_discovery_lcd.h"

extern int boucleur;

void setRULES() {
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	f5ad 3dff 	sub.w	sp, sp, #130560	; 0x1fe00
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0

        uint32_t color_map[4] ={
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <setRULES+0x148>)
 80005b4:	4c4f      	ldr	r4, [pc, #316]	; (80006f4 <setRULES+0x14c>)
 80005b6:	443c      	add	r4, r7
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							4285594861,
							4285857777,
							4287102969,
							4294967295};

        char image_data[130560] ={
 80005be:	4b4e      	ldr	r3, [pc, #312]	; (80006f8 <setRULES+0x150>)
 80005c0:	4a4e      	ldr	r2, [pc, #312]	; (80006fc <setRULES+0x154>)
 80005c2:	443a      	add	r2, r7
 80005c4:	4413      	add	r3, r2
 80005c6:	4a4e      	ldr	r2, [pc, #312]	; (8000700 <setRULES+0x158>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	4611      	mov	r1, r2
 80005cc:	f44f 33ff 	mov.w	r3, #130560	; 0x1fe00
 80005d0:	461a      	mov	r2, r3
 80005d2:	f00b ff0f 	bl	800c3f4 <memcpy>
        		7,7,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        		7,7,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        };
        int i,j,k=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	4a4a      	ldr	r2, [pc, #296]	; (8000704 <setRULES+0x15c>)
 80005da:	443a      	add	r2, r7
 80005dc:	6013      	str	r3, [r2, #0]
         for(j=0;j<480;j++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	4a49      	ldr	r2, [pc, #292]	; (8000708 <setRULES+0x160>)
 80005e2:	443a      	add	r2, r7
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	e071      	b.n	80006cc <setRULES+0x124>
             for (i = 271; i >= 0; i--) {
 80005e8:	f240 130f 	movw	r3, #271	; 0x10f
 80005ec:	4a47      	ldr	r2, [pc, #284]	; (800070c <setRULES+0x164>)
 80005ee:	443a      	add	r2, r7
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e05f      	b.n	80006b4 <setRULES+0x10c>
                 switch (image_data[k]) {
 80005f4:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <setRULES+0x150>)
 80005f6:	4a41      	ldr	r2, [pc, #260]	; (80006fc <setRULES+0x154>)
 80005f8:	443a      	add	r2, r7
 80005fa:	4413      	add	r3, r2
 80005fc:	4a41      	ldr	r2, [pc, #260]	; (8000704 <setRULES+0x15c>)
 80005fe:	443a      	add	r2, r7
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d846      	bhi.n	8000698 <setRULES+0xf0>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <setRULES+0x68>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	0800063f 	.word	0x0800063f
 8000618:	0800065d 	.word	0x0800065d
 800061c:	0800067b 	.word	0x0800067b
                     case 0:
                    	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <setRULES+0x160>)
 8000622:	443b      	add	r3, r7
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	4a38      	ldr	r2, [pc, #224]	; (800070c <setRULES+0x164>)
 800062a:	443a      	add	r2, r7
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	b291      	uxth	r1, r2
 8000630:	4a30      	ldr	r2, [pc, #192]	; (80006f4 <setRULES+0x14c>)
 8000632:	443a      	add	r2, r7
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fa7a 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 800063c:	e02c      	b.n	8000698 <setRULES+0xf0>
                     case 1:
                    	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 800063e:	4b32      	ldr	r3, [pc, #200]	; (8000708 <setRULES+0x160>)
 8000640:	443b      	add	r3, r7
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4a31      	ldr	r2, [pc, #196]	; (800070c <setRULES+0x164>)
 8000648:	443a      	add	r2, r7
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	b291      	uxth	r1, r2
 800064e:	4a30      	ldr	r2, [pc, #192]	; (8000710 <setRULES+0x168>)
 8000650:	443a      	add	r2, r7
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f006 fa6b 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 800065a:	e01d      	b.n	8000698 <setRULES+0xf0>
                     case 2:
                    	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <setRULES+0x160>)
 800065e:	443b      	add	r3, r7
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <setRULES+0x164>)
 8000666:	443a      	add	r2, r7
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	b291      	uxth	r1, r2
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <setRULES+0x16c>)
 800066e:	443a      	add	r2, r7
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fa5c 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8000678:	e00e      	b.n	8000698 <setRULES+0xf0>
                     case 3:
                    	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <setRULES+0x160>)
 800067c:	443b      	add	r3, r7
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <setRULES+0x164>)
 8000684:	443a      	add	r2, r7
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	b291      	uxth	r1, r2
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <setRULES+0x170>)
 800068c:	443a      	add	r2, r7
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fa4d 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8000696:	bf00      	nop
                 }
                 k++;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <setRULES+0x15c>)
 800069a:	443b      	add	r3, r7
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a18      	ldr	r2, [pc, #96]	; (8000704 <setRULES+0x15c>)
 80006a2:	443a      	add	r2, r7
 80006a4:	6013      	str	r3, [r2, #0]
             for (i = 271; i >= 0; i--) {
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <setRULES+0x164>)
 80006a8:	443b      	add	r3, r7
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <setRULES+0x164>)
 80006b0:	443a      	add	r2, r7
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <setRULES+0x164>)
 80006b6:	443b      	add	r3, r7
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da9a      	bge.n	80005f4 <setRULES+0x4c>
         for(j=0;j<480;j++) {
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <setRULES+0x160>)
 80006c0:	443b      	add	r3, r7
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <setRULES+0x160>)
 80006c8:	443a      	add	r2, r7
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <setRULES+0x160>)
 80006ce:	443b      	add	r3, r7
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80006d6:	db87      	blt.n	80005e8 <setRULES+0x40>
             }
         }
         while (boucleur!=1){}
 80006d8:	bf00      	nop
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <setRULES+0x174>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d1fb      	bne.n	80006da <setRULES+0x132>
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	f507 37ff 	add.w	r7, r7, #130560	; 0x1fe00
 80006ea:	3724      	adds	r7, #36	; 0x24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	0800d4a8 	.word	0x0800d4a8
 80006f4:	0001fe04 	.word	0x0001fe04
 80006f8:	fffe01e4 	.word	0xfffe01e4
 80006fc:	0001fe20 	.word	0x0001fe20
 8000700:	0800d4b8 	.word	0x0800d4b8
 8000704:	0001fe14 	.word	0x0001fe14
 8000708:	0001fe18 	.word	0x0001fe18
 800070c:	0001fe1c 	.word	0x0001fe1c
 8000710:	0001fe08 	.word	0x0001fe08
 8000714:	0001fe0c 	.word	0x0001fe0c
 8000718:	0001fe10 	.word	0x0001fe10
 800071c:	200000c8 	.word	0x200000c8

08000720 <setbackground>:

#include "background1.h"
#include "stm32746g_discovery_lcd.h"


void setbackground() {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	f5ad 3dff 	sub.w	sp, sp, #130560	; 0x1fe00
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0

        uint32_t color_map[4] = {
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <setbackground+0x140>)
 800072c:	4c4d      	ldr	r4, [pc, #308]	; (8000864 <setbackground+0x144>)
 800072e:	443c      	add	r4, r7
 8000730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                LCD_COLOR_BLACK,
                LCD_COLOR_BTURQUOISE,
                LCD_COLOR_BGRAY,
                LCD_COLOR_WHITE};

        char image_data[130560] = {
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <setbackground+0x148>)
 8000738:	4a4c      	ldr	r2, [pc, #304]	; (800086c <setbackground+0x14c>)
 800073a:	443a      	add	r2, r7
 800073c:	4413      	add	r3, r2
 800073e:	4a4c      	ldr	r2, [pc, #304]	; (8000870 <setbackground+0x150>)
 8000740:	4618      	mov	r0, r3
 8000742:	4611      	mov	r1, r2
 8000744:	f44f 33ff 	mov.w	r3, #130560	; 0x1fe00
 8000748:	461a      	mov	r2, r3
 800074a:	f00b fe53 	bl	800c3f4 <memcpy>
        	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        	};

        int i,j,k=0;
 800074e:	2300      	movs	r3, #0
 8000750:	4a48      	ldr	r2, [pc, #288]	; (8000874 <setbackground+0x154>)
 8000752:	443a      	add	r2, r7
 8000754:	6013      	str	r3, [r2, #0]
         for(j=0;j<480;j++) {
 8000756:	2300      	movs	r3, #0
 8000758:	4a47      	ldr	r2, [pc, #284]	; (8000878 <setbackground+0x158>)
 800075a:	443a      	add	r2, r7
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e071      	b.n	8000844 <setbackground+0x124>
             for (i = 271; i >= 0; i--) {
 8000760:	f240 130f 	movw	r3, #271	; 0x10f
 8000764:	4a45      	ldr	r2, [pc, #276]	; (800087c <setbackground+0x15c>)
 8000766:	443a      	add	r2, r7
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	e05f      	b.n	800082c <setbackground+0x10c>
                 switch (image_data[k]) {
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <setbackground+0x148>)
 800076e:	4a3f      	ldr	r2, [pc, #252]	; (800086c <setbackground+0x14c>)
 8000770:	443a      	add	r2, r7
 8000772:	4413      	add	r3, r2
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <setbackground+0x154>)
 8000776:	443a      	add	r2, r7
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d846      	bhi.n	8000810 <setbackground+0xf0>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <setbackground+0x68>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000799 	.word	0x08000799
 800078c:	080007b7 	.word	0x080007b7
 8000790:	080007d5 	.word	0x080007d5
 8000794:	080007f3 	.word	0x080007f3
                     case 0:
                    	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <setbackground+0x158>)
 800079a:	443b      	add	r3, r7
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	4a36      	ldr	r2, [pc, #216]	; (800087c <setbackground+0x15c>)
 80007a2:	443a      	add	r2, r7
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	b291      	uxth	r1, r2
 80007a8:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <setbackground+0x144>)
 80007aa:	443a      	add	r2, r7
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f9be 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 80007b4:	e02c      	b.n	8000810 <setbackground+0xf0>
                     case 1:
                    	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <setbackground+0x158>)
 80007b8:	443b      	add	r3, r7
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4a2f      	ldr	r2, [pc, #188]	; (800087c <setbackground+0x15c>)
 80007c0:	443a      	add	r2, r7
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	b291      	uxth	r1, r2
 80007c6:	4a2e      	ldr	r2, [pc, #184]	; (8000880 <setbackground+0x160>)
 80007c8:	443a      	add	r2, r7
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f006 f9af 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 80007d2:	e01d      	b.n	8000810 <setbackground+0xf0>
                     case 2:
                    	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <setbackground+0x158>)
 80007d6:	443b      	add	r3, r7
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <setbackground+0x15c>)
 80007de:	443a      	add	r2, r7
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	b291      	uxth	r1, r2
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <setbackground+0x164>)
 80007e6:	443a      	add	r2, r7
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f9a0 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 80007f0:	e00e      	b.n	8000810 <setbackground+0xf0>
                     case 3:
                    	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <setbackground+0x158>)
 80007f4:	443b      	add	r3, r7
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <setbackground+0x15c>)
 80007fc:	443a      	add	r2, r7
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	b291      	uxth	r1, r2
 8000802:	4a21      	ldr	r2, [pc, #132]	; (8000888 <setbackground+0x168>)
 8000804:	443a      	add	r2, r7
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f006 f991 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 800080e:	bf00      	nop
                 }
                 k++;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <setbackground+0x154>)
 8000812:	443b      	add	r3, r7
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <setbackground+0x154>)
 800081a:	443a      	add	r2, r7
 800081c:	6013      	str	r3, [r2, #0]
             for (i = 271; i >= 0; i--) {
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <setbackground+0x15c>)
 8000820:	443b      	add	r3, r7
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3b01      	subs	r3, #1
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <setbackground+0x15c>)
 8000828:	443a      	add	r2, r7
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <setbackground+0x15c>)
 800082e:	443b      	add	r3, r7
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da9a      	bge.n	800076c <setbackground+0x4c>
         for(j=0;j<480;j++) {
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <setbackground+0x158>)
 8000838:	443b      	add	r3, r7
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <setbackground+0x158>)
 8000840:	443a      	add	r2, r7
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <setbackground+0x158>)
 8000846:	443b      	add	r3, r7
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800084e:	db87      	blt.n	8000760 <setbackground+0x40>
             }
         }
    }
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	f507 37ff 	add.w	r7, r7, #130560	; 0x1fe00
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	0802d2b8 	.word	0x0802d2b8
 8000864:	0001fe04 	.word	0x0001fe04
 8000868:	fffe01e4 	.word	0xfffe01e4
 800086c:	0001fe20 	.word	0x0001fe20
 8000870:	0802d2c8 	.word	0x0802d2c8
 8000874:	0001fe14 	.word	0x0001fe14
 8000878:	0001fe18 	.word	0x0001fe18
 800087c:	0001fe1c 	.word	0x0001fe1c
 8000880:	0001fe08 	.word	0x0001fe08
 8000884:	0001fe0c 	.word	0x0001fe0c
 8000888:	0001fe10 	.word	0x0001fe10

0800088c <dispPiece1>:
 */

#include "base_piece.h"
#include "stm32746g_discovery_lcd.h"

void dispPiece1(int X, int Y) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b0c8      	sub	sp, #288	; 0x120
 8000890:	af00      	add	r7, sp, #0
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	6018      	str	r0, [r3, #0]
 8000896:	463b      	mov	r3, r7
 8000898:	6019      	str	r1, [r3, #0]

        uint32_t color_map1[3] = {
 800089a:	4a57      	ldr	r2, [pc, #348]	; (80009f8 <dispPiece1+0x16c>)
 800089c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                LCD_COLOR_BLACK,
                LCD_COLOR_BLUE1,
                LCD_COLOR_WHITE1};

        char piece_data[] = {
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4a54      	ldr	r2, [pc, #336]	; (80009fc <dispPiece1+0x170>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	4611      	mov	r1, r2
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	461a      	mov	r2, r3
 80008b6:	f00b fd9d 	bl	800c3f4 <memcpy>
        	1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        	};

        int i,j,k=0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                 for(j=0;j<16;j++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80008c6:	e08b      	b.n	80009e0 <dispPiece1+0x154>
                     for (i = 15; i >= 0; i--) {
 80008c8:	230f      	movs	r3, #15
 80008ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80008ce:	e07d      	b.n	80009cc <dispPiece1+0x140>
                         switch (piece_data[k]) {
 80008d0:	f107 0208 	add.w	r2, r7, #8
 80008d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d86b      	bhi.n	80009b8 <dispPiece1+0x12c>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <dispPiece1+0x5c>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	08000929 	.word	0x08000929
 80008f0:	08000959 	.word	0x08000959
 80008f4:	08000989 	.word	0x08000989
                             case 0:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map1[0]);
 80008f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	463b      	mov	r3, r7
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4413      	add	r3, r2
 8000906:	b298      	uxth	r0, r3
 8000908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800090c:	b29a      	uxth	r2, r3
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	3310      	adds	r3, #16
 800091a:	b29b      	uxth	r3, r3
 800091c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000920:	4619      	mov	r1, r3
 8000922:	f006 f905 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000926:	e047      	b.n	80009b8 <dispPiece1+0x12c>
                             case 1:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map1[1]);
 8000928:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800092c:	b29a      	uxth	r2, r3
 800092e:	463b      	mov	r3, r7
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b298      	uxth	r0, r3
 8000938:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800093c:	b29a      	uxth	r2, r3
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3310      	adds	r3, #16
 800094a:	b29b      	uxth	r3, r3
 800094c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000950:	4619      	mov	r1, r3
 8000952:	f006 f8ed 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000956:	e02f      	b.n	80009b8 <dispPiece1+0x12c>
                             case 2:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map1[2]);
 8000958:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800095c:	b29a      	uxth	r2, r3
 800095e:	463b      	mov	r3, r7
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	4413      	add	r3, r2
 8000966:	b298      	uxth	r0, r3
 8000968:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800096c:	b29a      	uxth	r2, r3
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	b29b      	uxth	r3, r3
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	3310      	adds	r3, #16
 800097a:	b29b      	uxth	r3, r3
 800097c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000980:	4619      	mov	r1, r3
 8000982:	f006 f8d5 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000986:	e017      	b.n	80009b8 <dispPiece1+0x12c>
                             case 3:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map1[3]);
 8000988:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800098c:	b29a      	uxth	r2, r3
 800098e:	463b      	mov	r3, r7
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b298      	uxth	r0, r3
 8000998:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800099c:	b29a      	uxth	r2, r3
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4413      	add	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	3310      	adds	r3, #16
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80009b0:	4619      	mov	r1, r3
 80009b2:	f006 f8bd 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 80009b6:	bf00      	nop
                         }
                         k++;
 80009b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009bc:	3301      	adds	r3, #1
 80009be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                     for (i = 15; i >= 0; i--) {
 80009c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80009cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f6bf af7d 	bge.w	80008d0 <dispPiece1+0x44>
                 for(j=0;j<16;j++) {
 80009d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80009e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	f77f af6f 	ble.w	80008c8 <dispPiece1+0x3c>
                     }
                 }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0804d0c8 	.word	0x0804d0c8
 80009fc:	0804d0d4 	.word	0x0804d0d4

08000a00 <dispPiece2>:



void dispPiece2(int X, int Y) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0c8      	sub	sp, #288	; 0x120
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	6018      	str	r0, [r3, #0]
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	6019      	str	r1, [r3, #0]

        uint32_t color_map[3] = {
 8000a0e:	4a57      	ldr	r2, [pc, #348]	; (8000b6c <dispPiece2+0x16c>)
 8000a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                LCD_COLOR_BLACK,
                LCD_COLOR_BLUE1,
                LCD_COLOR_WHITE1};

        char piece_data[] = {
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <dispPiece2+0x170>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	4611      	mov	r1, r2
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f00b fce3 	bl	800c3f4 <memcpy>
        		1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        	};

        int i,j,k=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                 for(j=0;j<16;j++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000a3a:	e08b      	b.n	8000b54 <dispPiece2+0x154>
                     for (i = 15; i >= 0; i--) {
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000a42:	e07d      	b.n	8000b40 <dispPiece2+0x140>
                         switch (piece_data[k]) {
 8000a44:	f107 0208 	add.w	r2, r7, #8
 8000a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d86b      	bhi.n	8000b2c <dispPiece2+0x12c>
 8000a54:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <dispPiece2+0x5c>)
 8000a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5a:	bf00      	nop
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000a9d 	.word	0x08000a9d
 8000a64:	08000acd 	.word	0x08000acd
 8000a68:	08000afd 	.word	0x08000afd
                             case 0:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[0]);
 8000a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	463b      	mov	r3, r7
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	b298      	uxth	r0, r3
 8000a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000a94:	4619      	mov	r1, r3
 8000a96:	f006 f84b 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000a9a:	e047      	b.n	8000b2c <dispPiece2+0x12c>
                             case 1:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[1]);
 8000a9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b298      	uxth	r0, r3
 8000aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3310      	adds	r3, #16
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f006 f833 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000aca:	e02f      	b.n	8000b2c <dispPiece2+0x12c>
                             case 2:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[2]);
 8000acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4413      	add	r3, r2
 8000ada:	b298      	uxth	r0, r3
 8000adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3310      	adds	r3, #16
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000af4:	4619      	mov	r1, r3
 8000af6:	f006 f81b 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000afa:	e017      	b.n	8000b2c <dispPiece2+0x12c>
                             case 3:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[3]);
 8000afc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	463b      	mov	r3, r7
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	b298      	uxth	r0, r3
 8000b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3310      	adds	r3, #16
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000b24:	4619      	mov	r1, r3
 8000b26:	f006 f803 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000b2a:	bf00      	nop
                         }
                         k++;
 8000b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                     for (i = 15; i >= 0; i--) {
 8000b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f6bf af7d 	bge.w	8000a44 <dispPiece2+0x44>
                 for(j=0;j<16;j++) {
 8000b4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b4e:	3301      	adds	r3, #1
 8000b50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000b54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	f77f af6f 	ble.w	8000a3c <dispPiece2+0x3c>
                     }
                 }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0804d0c8 	.word	0x0804d0c8
 8000b70:	0804d1d4 	.word	0x0804d1d4

08000b74 <dispPiece3>:

void dispPiece3(int X, int Y) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0c8      	sub	sp, #288	; 0x120
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	6018      	str	r0, [r3, #0]
 8000b7e:	463b      	mov	r3, r7
 8000b80:	6019      	str	r1, [r3, #0]

        uint32_t color_map[3] = {
 8000b82:	4a57      	ldr	r2, [pc, #348]	; (8000ce0 <dispPiece3+0x16c>)
 8000b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                LCD_COLOR_BLACK,
                LCD_COLOR_BLUE2,
                LCD_COLOR_WHITE1};

        char piece_data[] = {
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4a54      	ldr	r2, [pc, #336]	; (8000ce4 <dispPiece3+0x170>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	4611      	mov	r1, r2
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f00b fc29 	bl	800c3f4 <memcpy>
        		1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        	};

        int i,j,k=0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                 for(j=0;j<16;j++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000bae:	e08b      	b.n	8000cc8 <dispPiece3+0x154>
                     for (i = 15; i >= 0; i--) {
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000bb6:	e07d      	b.n	8000cb4 <dispPiece3+0x140>
                         switch (piece_data[k]) {
 8000bb8:	f107 0208 	add.w	r2, r7, #8
 8000bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d86b      	bhi.n	8000ca0 <dispPiece3+0x12c>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <dispPiece3+0x5c>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000c11 	.word	0x08000c11
 8000bd8:	08000c41 	.word	0x08000c41
 8000bdc:	08000c71 	.word	0x08000c71
                             case 0:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[0]);
 8000be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	463b      	mov	r3, r7
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	3310      	adds	r3, #16
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f005 ff91 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000c0e:	e047      	b.n	8000ca0 <dispPiece3+0x12c>
                             case 1:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[1]);
 8000c10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	463b      	mov	r3, r7
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3310      	adds	r3, #16
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f005 ff79 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000c3e:	e02f      	b.n	8000ca0 <dispPiece3+0x12c>
                             case 2:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[2]);
 8000c40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	463b      	mov	r3, r7
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	3310      	adds	r3, #16
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f005 ff61 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000c6e:	e017      	b.n	8000ca0 <dispPiece3+0x12c>
                             case 3:
                            	 BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[3]);
 8000c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	463b      	mov	r3, r7
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b298      	uxth	r0, r3
 8000c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3310      	adds	r3, #16
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f005 ff49 	bl	8006b30 <BSP_LCD_DrawPixel>
                                 break;
 8000c9e:	bf00      	nop
                         }
                         k++;
 8000ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                     for (i = 15; i >= 0; i--) {
 8000caa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f6bf af7d 	bge.w	8000bb8 <dispPiece3+0x44>
                 for(j=0;j<16;j++) {
 8000cbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000cc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	f77f af6f 	ble.w	8000bb0 <dispPiece3+0x3c>
                     }
                 }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0804d2d4 	.word	0x0804d2d4
 8000ce4:	0804d2e0 	.word	0x0804d2e0

08000ce8 <dispVoid>:

void dispVoid(int X, int Y) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]

        uint32_t color_map[1] = {
 8000cf2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000cf6:	60fb      	str	r3, [r7, #12]
                LCD_COLOR_BLACK};

        int i,j;
                 for(j=0;j<16;j++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	e01d      	b.n	8000d3a <dispVoid+0x52>
                     for (i = 15; i >= 0; i--) {
 8000cfe:	230f      	movs	r3, #15
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e014      	b.n	8000d2e <dispVoid+0x46>
                         BSP_LCD_DrawPixel(j+Y, i+X+16, color_map[0]);
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b298      	uxth	r0, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3310      	adds	r3, #16
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f005 ff04 	bl	8006b30 <BSP_LCD_DrawPixel>
                     for (i = 15; i >= 0; i--) {
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dae7      	bge.n	8000d04 <dispVoid+0x1c>
                 for(j=0;j<16;j++) {
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	ddde      	ble.n	8000cfe <dispVoid+0x16>
                     }
                 }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <set_doge>:
#include "doge.h"
#include "stm32746g_discovery_lcd.h"



void set_doge(){
 8000d4c:	b5b0      	push	{r4, r5, r7, lr}
 8000d4e:	f5ad 3dff 	sub.w	sp, sp, #130560	; 0x1fe00
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0
	int i,j,k=41888,l;
 8000d56:	f24a 33a0 	movw	r3, #41888	; 0xa3a0
 8000d5a:	4a8d      	ldr	r2, [pc, #564]	; (8000f90 <set_doge+0x244>)
 8000d5c:	443a      	add	r2, r7
 8000d5e:	6013      	str	r3, [r2, #0]
	uint32_t color_map[10] = {
 8000d60:	4b8c      	ldr	r3, [pc, #560]	; (8000f94 <set_doge+0x248>)
 8000d62:	f507 34ff 	add.w	r4, r7, #130560	; 0x1fe00
 8000d66:	461d      	mov	r5, r3
 8000d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d74:	e884 0003 	stmia.w	r4, {r0, r1}
			4293773946,
			4294107309,
			4294967295
			};

	char image_data[130560] = {
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <set_doge+0x24c>)
 8000d7a:	4a88      	ldr	r2, [pc, #544]	; (8000f9c <set_doge+0x250>)
 8000d7c:	443a      	add	r2, r7
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a87      	ldr	r2, [pc, #540]	; (8000fa0 <set_doge+0x254>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	4611      	mov	r1, r2
 8000d86:	f44f 33ff 	mov.w	r3, #130560	; 0x1fe00
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f00b fb32 	bl	800c3f4 <memcpy>
				9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
				9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
				9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
				9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
			};
	for(j=154;j<304;j++) {
 8000d90:	239a      	movs	r3, #154	; 0x9a
 8000d92:	4a84      	ldr	r2, [pc, #528]	; (8000fa4 <set_doge+0x258>)
 8000d94:	443a      	add	r2, r7
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e0eb      	b.n	8000f72 <set_doge+0x226>
		 for (i = 271; i >= 0; i--){
 8000d9a:	f240 130f 	movw	r3, #271	; 0x10f
 8000d9e:	4a82      	ldr	r2, [pc, #520]	; (8000fa8 <set_doge+0x25c>)
 8000da0:	443a      	add	r2, r7
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e0c6      	b.n	8000f34 <set_doge+0x1e8>
			 switch (image_data[k]) {
 8000da6:	4b7c      	ldr	r3, [pc, #496]	; (8000f98 <set_doge+0x24c>)
 8000da8:	4a7c      	ldr	r2, [pc, #496]	; (8000f9c <set_doge+0x250>)
 8000daa:	443a      	add	r2, r7
 8000dac:	4413      	add	r3, r2
 8000dae:	4a78      	ldr	r2, [pc, #480]	; (8000f90 <set_doge+0x244>)
 8000db0:	443a      	add	r2, r7
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	f200 80ad 	bhi.w	8000f18 <set_doge+0x1cc>
 8000dbe:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <set_doge+0x78>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000ded 	.word	0x08000ded
 8000dc8:	08000e0b 	.word	0x08000e0b
 8000dcc:	08000e29 	.word	0x08000e29
 8000dd0:	08000e47 	.word	0x08000e47
 8000dd4:	08000e65 	.word	0x08000e65
 8000dd8:	08000e83 	.word	0x08000e83
 8000ddc:	08000ea1 	.word	0x08000ea1
 8000de0:	08000ebf 	.word	0x08000ebf
 8000de4:	08000edd 	.word	0x08000edd
 8000de8:	08000efb 	.word	0x08000efb
				 case 0:
					 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8000dec:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <set_doge+0x258>)
 8000dee:	443b      	add	r3, r7
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4a6c      	ldr	r2, [pc, #432]	; (8000fa8 <set_doge+0x25c>)
 8000df6:	443a      	add	r2, r7
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	b291      	uxth	r1, r2
 8000dfc:	f507 32ff 	add.w	r2, r7, #130560	; 0x1fe00
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fe94 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e08:	e086      	b.n	8000f18 <set_doge+0x1cc>
				 case 1:
					 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8000e0a:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <set_doge+0x258>)
 8000e0c:	443b      	add	r3, r7
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4a65      	ldr	r2, [pc, #404]	; (8000fa8 <set_doge+0x25c>)
 8000e14:	443a      	add	r2, r7
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	b291      	uxth	r1, r2
 8000e1a:	4a64      	ldr	r2, [pc, #400]	; (8000fac <set_doge+0x260>)
 8000e1c:	443a      	add	r2, r7
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fe85 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e26:	e077      	b.n	8000f18 <set_doge+0x1cc>
				 case 2:
					 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8000e28:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <set_doge+0x258>)
 8000e2a:	443b      	add	r3, r7
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <set_doge+0x25c>)
 8000e32:	443a      	add	r2, r7
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	b291      	uxth	r1, r2
 8000e38:	4a5d      	ldr	r2, [pc, #372]	; (8000fb0 <set_doge+0x264>)
 8000e3a:	443a      	add	r2, r7
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fe76 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e44:	e068      	b.n	8000f18 <set_doge+0x1cc>
				 case 3:
					 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8000e46:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <set_doge+0x258>)
 8000e48:	443b      	add	r3, r7
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <set_doge+0x25c>)
 8000e50:	443a      	add	r2, r7
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	b291      	uxth	r1, r2
 8000e56:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <set_doge+0x268>)
 8000e58:	443a      	add	r2, r7
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 fe67 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e62:	e059      	b.n	8000f18 <set_doge+0x1cc>
				 case 4:
					 BSP_LCD_DrawPixel(j, i, color_map[4]);
 8000e64:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <set_doge+0x258>)
 8000e66:	443b      	add	r3, r7
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <set_doge+0x25c>)
 8000e6e:	443a      	add	r2, r7
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	b291      	uxth	r1, r2
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <set_doge+0x26c>)
 8000e76:	443a      	add	r2, r7
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fe58 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e80:	e04a      	b.n	8000f18 <set_doge+0x1cc>
				 case 5:
					 BSP_LCD_DrawPixel(j, i, color_map[5]);
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <set_doge+0x258>)
 8000e84:	443b      	add	r3, r7
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4a47      	ldr	r2, [pc, #284]	; (8000fa8 <set_doge+0x25c>)
 8000e8c:	443a      	add	r2, r7
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	b291      	uxth	r1, r2
 8000e92:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <set_doge+0x270>)
 8000e94:	443a      	add	r2, r7
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f005 fe49 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000e9e:	e03b      	b.n	8000f18 <set_doge+0x1cc>
				 case 6:
					 BSP_LCD_DrawPixel(j, i, color_map[6]);
 8000ea0:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <set_doge+0x258>)
 8000ea2:	443b      	add	r3, r7
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4a3f      	ldr	r2, [pc, #252]	; (8000fa8 <set_doge+0x25c>)
 8000eaa:	443a      	add	r2, r7
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	b291      	uxth	r1, r2
 8000eb0:	4a43      	ldr	r2, [pc, #268]	; (8000fc0 <set_doge+0x274>)
 8000eb2:	443a      	add	r2, r7
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 fe3a 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000ebc:	e02c      	b.n	8000f18 <set_doge+0x1cc>
				 case 7:
					 BSP_LCD_DrawPixel(j, i, color_map[7]);
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <set_doge+0x258>)
 8000ec0:	443b      	add	r3, r7
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <set_doge+0x25c>)
 8000ec8:	443a      	add	r2, r7
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	b291      	uxth	r1, r2
 8000ece:	4a3d      	ldr	r2, [pc, #244]	; (8000fc4 <set_doge+0x278>)
 8000ed0:	443a      	add	r2, r7
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 fe2b 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000eda:	e01d      	b.n	8000f18 <set_doge+0x1cc>
				 case 8:
					 BSP_LCD_DrawPixel(j, i, color_map[8]);
 8000edc:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <set_doge+0x258>)
 8000ede:	443b      	add	r3, r7
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <set_doge+0x25c>)
 8000ee6:	443a      	add	r2, r7
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	b291      	uxth	r1, r2
 8000eec:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <set_doge+0x27c>)
 8000eee:	443a      	add	r2, r7
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 fe1c 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000ef8:	e00e      	b.n	8000f18 <set_doge+0x1cc>
				 case 9:
					 BSP_LCD_DrawPixel(j, i, color_map[9]);
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <set_doge+0x258>)
 8000efc:	443b      	add	r3, r7
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <set_doge+0x25c>)
 8000f04:	443a      	add	r2, r7
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	b291      	uxth	r1, r2
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <set_doge+0x280>)
 8000f0c:	443a      	add	r2, r7
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fe0d 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8000f16:	bf00      	nop
	         }
			 k++;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <set_doge+0x244>)
 8000f1a:	443b      	add	r3, r7
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <set_doge+0x244>)
 8000f22:	443a      	add	r2, r7
 8000f24:	6013      	str	r3, [r2, #0]
		 for (i = 271; i >= 0; i--){
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <set_doge+0x25c>)
 8000f28:	443b      	add	r3, r7
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <set_doge+0x25c>)
 8000f30:	443a      	add	r2, r7
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <set_doge+0x25c>)
 8000f36:	443b      	add	r3, r7
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f6bf af33 	bge.w	8000da6 <set_doge+0x5a>
		 }
		 l=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <set_doge+0x284>)
 8000f44:	443a      	add	r2, r7
 8000f46:	6013      	str	r3, [r2, #0]
		 while(l!=100000){
 8000f48:	e006      	b.n	8000f58 <set_doge+0x20c>
		 				 l++;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <set_doge+0x284>)
 8000f4c:	443b      	add	r3, r7
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <set_doge+0x284>)
 8000f54:	443a      	add	r2, r7
 8000f56:	6013      	str	r3, [r2, #0]
		 while(l!=100000){
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <set_doge+0x284>)
 8000f5a:	443b      	add	r3, r7
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <set_doge+0x288>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d1f2      	bne.n	8000f4a <set_doge+0x1fe>
	for(j=154;j<304;j++) {
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <set_doge+0x258>)
 8000f66:	443b      	add	r3, r7
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <set_doge+0x258>)
 8000f6e:	443a      	add	r2, r7
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <set_doge+0x258>)
 8000f74:	443b      	add	r3, r7
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000f7c:	f6ff af0d 	blt.w	8000d9a <set_doge+0x4e>
		 			 }
	}
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	f507 37ff 	add.w	r7, r7, #130560	; 0x1fe00
 8000f88:	3738      	adds	r7, #56	; 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0001fe2c 	.word	0x0001fe2c
 8000f94:	0804d3e0 	.word	0x0804d3e0
 8000f98:	fffe01c8 	.word	0xfffe01c8
 8000f9c:	0001fe38 	.word	0x0001fe38
 8000fa0:	0804d408 	.word	0x0804d408
 8000fa4:	0001fe30 	.word	0x0001fe30
 8000fa8:	0001fe34 	.word	0x0001fe34
 8000fac:	0001fe04 	.word	0x0001fe04
 8000fb0:	0001fe08 	.word	0x0001fe08
 8000fb4:	0001fe0c 	.word	0x0001fe0c
 8000fb8:	0001fe10 	.word	0x0001fe10
 8000fbc:	0001fe14 	.word	0x0001fe14
 8000fc0:	0001fe18 	.word	0x0001fe18
 8000fc4:	0001fe1c 	.word	0x0001fe1c
 8000fc8:	0001fe20 	.word	0x0001fe20
 8000fcc:	0001fe24 	.word	0x0001fe24
 8000fd0:	0001fe28 	.word	0x0001fe28
 8000fd4:	000186a0 	.word	0x000186a0

08000fd8 <init_grid>:

int grid[14][26];
int pieces[7][4][4][2];
int coord[2];

void init_grid(int grid[14][26]){
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    int i,j;
    for (i=0;i<26;i++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e01b      	b.n	800101e <init_grid+0x46>
        grid[0][i]=2;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	2102      	movs	r1, #2
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        grid[1][i]=2;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3368      	adds	r3, #104	; 0x68
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        grid[12][i]=2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	2102      	movs	r1, #2
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        grid[13][i]=2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	2102      	movs	r1, #2
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=0;i<26;i++){
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b19      	cmp	r3, #25
 8001022:	dde0      	ble.n	8000fe6 <init_grid+0xe>
    };
    for (i=2;i<12;i++){
 8001024:	2302      	movs	r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e012      	b.n	8001050 <init_grid+0x78>
        grid[i][24]=2;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2268      	movs	r2, #104	; 0x68
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	2202      	movs	r2, #2
 8001038:	661a      	str	r2, [r3, #96]	; 0x60
        grid[i][25]=2;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2268      	movs	r2, #104	; 0x68
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	2202      	movs	r2, #2
 8001048:	665a      	str	r2, [r3, #100]	; 0x64
    for (i=2;i<12;i++){
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b0b      	cmp	r3, #11
 8001054:	dde9      	ble.n	800102a <init_grid+0x52>
    };
    for (i=0;i<24;i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e015      	b.n	8001088 <init_grid+0xb0>
        for(j=2;j<12;j++){
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	e00c      	b.n	800107c <init_grid+0xa4>
            grid[j][i]=0;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2268      	movs	r2, #104	; 0x68
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	2100      	movs	r1, #0
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(j=2;j<12;j++){
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b0b      	cmp	r3, #11
 8001080:	ddef      	ble.n	8001062 <init_grid+0x8a>
    for (i=0;i<24;i++){
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b17      	cmp	r3, #23
 800108c:	dde6      	ble.n	800105c <init_grid+0x84>
        };
    };
};
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <init_pieces>:

void init_pieces(int pieces[7][4][4][2],int tab[224]){
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    int i,j,k,l,m;
    m=0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
    for(i=0;i<7;i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e032      	b.n	8001116 <init_pieces+0x7a>
        for(j=0;j<4;j++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	e029      	b.n	800110a <init_pieces+0x6e>
            for(k=0;k<4;k++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e020      	b.n	80010fe <init_pieces+0x62>
                for(l=0;l<2;l++){
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	e017      	b.n	80010f2 <init_pieces+0x56>
                    pieces[i][j][k][l]=tab[m];
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	441a      	add	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	440b      	add	r3, r1
 80010d2:	6811      	ldr	r1, [r2, #0]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	0090      	lsls	r0, r2, #2
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	4402      	add	r2, r0
 80010dc:	0050      	lsls	r0, r2, #1
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4402      	add	r2, r0
 80010e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m=m+1;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
                for(l=0;l<2;l++){
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	3301      	adds	r3, #1
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	dde4      	ble.n	80010c2 <init_pieces+0x26>
            for(k=0;k<4;k++){
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b03      	cmp	r3, #3
 8001102:	dddb      	ble.n	80010bc <init_pieces+0x20>
        for(j=0;j<4;j++){
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	3301      	adds	r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b03      	cmp	r3, #3
 800110e:	ddd2      	ble.n	80010b6 <init_pieces+0x1a>
    for(i=0;i<7;i++){
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	3301      	adds	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	2b06      	cmp	r3, #6
 800111a:	ddc9      	ble.n	80010b0 <init_pieces+0x14>
                }
            }
        }
    }
};
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <create_piece>:

PIECE* create_piece(){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
    PIECE* new_piece;
    new_piece=calloc(1,sizeof (PIECE));
 8001132:	2114      	movs	r1, #20
 8001134:	2001      	movs	r0, #1
 8001136:	f00b f923 	bl	800c380 <calloc>
 800113a:	4603      	mov	r3, r0
 800113c:	607b      	str	r3, [r7, #4]
    new_piece->typepiece=rand()%7;
 800113e:	f00b fa57 	bl	800c5f0 <rand>
 8001142:	4602      	mov	r2, r0
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <create_piece+0xb8>)
 8001146:	fb83 1302 	smull	r1, r3, r3, r2
 800114a:	4413      	add	r3, r2
 800114c:	1099      	asrs	r1, r3, #2
 800114e:	17d3      	asrs	r3, r2, #31
 8001150:	1ac9      	subs	r1, r1, r3
 8001152:	460b      	mov	r3, r1
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	1a5b      	subs	r3, r3, r1
 8001158:	1ad1      	subs	r1, r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6059      	str	r1, [r3, #4]
    new_piece->position=rand()%4;
 800115e:	f00b fa47 	bl	800c5f0 <rand>
 8001162:	4603      	mov	r3, r0
 8001164:	425a      	negs	r2, r3
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	bf58      	it	pl
 8001170:	4253      	negpl	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6093      	str	r3, [r2, #8]
    switch (new_piece->typepiece){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b06      	cmp	r3, #6
 800117c:	d82c      	bhi.n	80011d8 <create_piece+0xac>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <create_piece+0x58>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011a1 	.word	0x080011a1
 8001188:	080011a9 	.word	0x080011a9
 800118c:	080011b1 	.word	0x080011b1
 8001190:	080011b9 	.word	0x080011b9
 8001194:	080011c1 	.word	0x080011c1
 8001198:	080011c9 	.word	0x080011c9
 800119c:	080011d1 	.word	0x080011d1
        	case 0:
        		new_piece->design=design1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	60da      	str	r2, [r3, #12]
        	break;
 80011a6:	e017      	b.n	80011d8 <create_piece+0xac>
        	case 1:
        		new_piece->design=design1;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	60da      	str	r2, [r3, #12]
        		break;
 80011ae:	e013      	b.n	80011d8 <create_piece+0xac>
        	case 2:
        		new_piece->design=design2;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2204      	movs	r2, #4
 80011b4:	60da      	str	r2, [r3, #12]
        		break;
 80011b6:	e00f      	b.n	80011d8 <create_piece+0xac>
        	case 3:
        		new_piece->design=design3;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2205      	movs	r2, #5
 80011bc:	60da      	str	r2, [r3, #12]
        		break;
 80011be:	e00b      	b.n	80011d8 <create_piece+0xac>
        	case 4:
        		new_piece->design=design3;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	60da      	str	r2, [r3, #12]
        		break;
 80011c6:	e007      	b.n	80011d8 <create_piece+0xac>
        	case 5:
        		new_piece->design=design2;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2204      	movs	r2, #4
 80011cc:	60da      	str	r2, [r3, #12]
        		break;
 80011ce:	e003      	b.n	80011d8 <create_piece+0xac>
        	case 6:
        		new_piece->design=design1;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	60da      	str	r2, [r3, #12]
        		break;
 80011d6:	bf00      	nop
        }
    return new_piece;
 80011d8:	687b      	ldr	r3, [r7, #4]
};
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	92492493 	.word	0x92492493

080011e8 <BuildList>:

LIST* BuildList(PIECE* one, PIECE* two, PIECE* three){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
    LIST* list;
    list=(LIST*)malloc(sizeof(LIST));
 80011f4:	200c      	movs	r0, #12
 80011f6:	f00b f8f5 	bl	800c3e4 <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	617b      	str	r3, [r7, #20]
    list->first=one;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	601a      	str	r2, [r3, #0]
    list->second=two;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	605a      	str	r2, [r3, #4]
    list->last=three;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
    return list;
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <SwapList>:

LIST* SwapList(LIST* list){
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    PIECE* NewPiece;
    NewPiece=create_piece(NULL);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ff82 	bl	800112c <create_piece>
 8001228:	60f8      	str	r0, [r7, #12]
    list->first=list->second;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
    list->second=list->last;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]
    list->last=NewPiece;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	bf00      	nop
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <dispGrid>:

void dispGrid(int grid[14][26])
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    int i,j;
    for(i=4;i<25;i++){
 8001254:	2304      	movs	r3, #4
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e08e      	b.n	8001378 <dispGrid+0x12c>
        for(j=2;j<13;j++){
 800125a:	2302      	movs	r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	e084      	b.n	800136a <dispGrid+0x11e>
            	switch(grid[j][i]){
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2268      	movs	r2, #104	; 0x68
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	2b08      	cmp	r3, #8
 8001274:	d876      	bhi.n	8001364 <dispGrid+0x118>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <dispGrid+0x30>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012a1 	.word	0x080012a1
 8001280:	08001365 	.word	0x08001365
 8001284:	08001365 	.word	0x08001365
 8001288:	080012bd 	.word	0x080012bd
 800128c:	080012d9 	.word	0x080012d9
 8001290:	080012f5 	.word	0x080012f5
 8001294:	08001311 	.word	0x08001311
 8001298:	0800132d 	.word	0x0800132d
 800129c:	08001349 	.word	0x08001349
            		case 0 :
            			dispVoid((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3b03      	subs	r3, #3
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3b04      	subs	r3, #4
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	335e      	adds	r3, #94	; 0x5e
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff fd17 	bl	8000ce8 <dispVoid>
            			break;
 80012ba:	e053      	b.n	8001364 <dispGrid+0x118>
            		case 3 :
            			dispPiece1((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b03      	subs	r3, #3
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3b04      	subs	r3, #4
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	335e      	adds	r3, #94	; 0x5e
 80012ce:	4619      	mov	r1, r3
 80012d0:	4610      	mov	r0, r2
 80012d2:	f7ff fadb 	bl	800088c <dispPiece1>
            			break;
 80012d6:	e045      	b.n	8001364 <dispGrid+0x118>
            		case 4:
            			dispPiece2((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b03      	subs	r3, #3
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3b04      	subs	r3, #4
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	335e      	adds	r3, #94	; 0x5e
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f7ff fb87 	bl	8000a00 <dispPiece2>
            		     break;
 80012f2:	e037      	b.n	8001364 <dispGrid+0x118>
            		case 5 :
            			dispPiece3((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3b03      	subs	r3, #3
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3b04      	subs	r3, #4
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	335e      	adds	r3, #94	; 0x5e
 8001306:	4619      	mov	r1, r3
 8001308:	4610      	mov	r0, r2
 800130a:	f7ff fc33 	bl	8000b74 <dispPiece3>
            		     break;
 800130e:	e029      	b.n	8001364 <dispGrid+0x118>
            		case 6 :
            			dispPiece1((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b03      	subs	r3, #3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3b04      	subs	r3, #4
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	335e      	adds	r3, #94	; 0x5e
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff fab1 	bl	800088c <dispPiece1>
            		       break;
 800132a:	e01b      	b.n	8001364 <dispGrid+0x118>
            		case 7:
            			dispPiece2((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3b03      	subs	r3, #3
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b04      	subs	r3, #4
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	335e      	adds	r3, #94	; 0x5e
 800133e:	4619      	mov	r1, r3
 8001340:	4610      	mov	r0, r2
 8001342:	f7ff fb5d 	bl	8000a00 <dispPiece2>
            		     break;
 8001346:	e00d      	b.n	8001364 <dispGrid+0x118>
            		case 8 :
            			dispPiece3((j-3)*16+zone_de_jeuX,(i-4)*16+zone_de_jeuY);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3b03      	subs	r3, #3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3b04      	subs	r3, #4
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	335e      	adds	r3, #94	; 0x5e
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7ff fc09 	bl	8000b74 <dispPiece3>
            		     break;
 8001362:	bf00      	nop
        for(j=2;j<13;j++){
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	f77f af77 	ble.w	8001260 <dispGrid+0x14>
    for(i=4;i<25;i++){
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b18      	cmp	r3, #24
 800137c:	f77f af6d 	ble.w	800125a <dispGrid+0xe>
            	};
        }
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop

0800138c <dispNextPiece>:

void dispNextPiece(PIECE* NextPiece, int pieces[7][4][4][2]){
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	int grid[4][4];
	int i,j;
	for (i=0;i<4;i++){
 8001396:	2300      	movs	r3, #0
 8001398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800139a:	e016      	b.n	80013ca <dispNextPiece+0x3e>
	        for(j=0;j<4;j++){
 800139c:	2300      	movs	r3, #0
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
 80013a0:	e00d      	b.n	80013be <dispNextPiece+0x32>
	            grid[j][i]=0;
 80013a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a4:	009a      	lsls	r2, r3, #2
 80013a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013b0:	4413      	add	r3, r2
 80013b2:	2200      	movs	r2, #0
 80013b4:	f843 2c48 	str.w	r2, [r3, #-72]
	        for(j=0;j<4;j++){
 80013b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ba:	3301      	adds	r3, #1
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80013be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	ddee      	ble.n	80013a2 <dispNextPiece+0x16>
	for (i=0;i<4;i++){
 80013c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c6:	3301      	adds	r3, #1
 80013c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	dde5      	ble.n	800139c <dispNextPiece+0x10>
	        };
	    };
	switch (NextPiece->design){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d063      	beq.n	80014a0 <dispNextPiece+0x114>
 80013d8:	2b05      	cmp	r3, #5
 80013da:	f300 808f 	bgt.w	80014fc <dispNextPiece+0x170>
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d002      	beq.n	80013e8 <dispNextPiece+0x5c>
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d02e      	beq.n	8001444 <dispNextPiece+0xb8>
 80013e6:	e089      	b.n	80014fc <dispNextPiece+0x170>
	    	case design1:
	    		for(i=0;i<4;i++){
 80013e8:	2300      	movs	r3, #0
 80013ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013ec:	e026      	b.n	800143c <dispNextPiece+0xb0>
	    			grid[2+pieces[NextPiece->typepiece][NextPiece->position][i][0]]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6892      	ldr	r2, [r2, #8]
 80013fc:	0091      	lsls	r1, r2, #2
 80013fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001400:	440a      	add	r2, r1
 8001402:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001406:	1c9a      	adds	r2, r3, #2
						[2+pieces[NextPiece->typepiece][NextPiece->position][i][1]]=3;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	4419      	add	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	0098      	lsls	r0, r3, #2
 8001418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141a:	4403      	add	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	3302      	adds	r3, #2
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800142e:	4413      	add	r3, r2
 8001430:	2203      	movs	r2, #3
 8001432:	f843 2c48 	str.w	r2, [r3, #-72]
	    		for(i=0;i<4;i++){
 8001436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001438:	3301      	adds	r3, #1
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800143c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800143e:	2b03      	cmp	r3, #3
 8001440:	ddd5      	ble.n	80013ee <dispNextPiece+0x62>
	    		};
	    	break;
 8001442:	e05b      	b.n	80014fc <dispNextPiece+0x170>
	    	case design2:
	    		for(i=0;i<4;i++){
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001448:	e026      	b.n	8001498 <dispNextPiece+0x10c>
	    			grid[2+pieces[NextPiece->typepiece][NextPiece->position][i][0]]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	01db      	lsls	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6892      	ldr	r2, [r2, #8]
 8001458:	0091      	lsls	r1, r2, #2
 800145a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800145c:	440a      	add	r2, r1
 800145e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001462:	1c9a      	adds	r2, r3, #2
						[2+pieces[NextPiece->typepiece][NextPiece->position][i][1]]=4;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	01db      	lsls	r3, r3, #7
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4419      	add	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	0098      	lsls	r0, r3, #2
 8001474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001476:	4403      	add	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3302      	adds	r3, #2
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800148a:	4413      	add	r3, r2
 800148c:	2204      	movs	r2, #4
 800148e:	f843 2c48 	str.w	r2, [r3, #-72]
	    		for(i=0;i<4;i++){
 8001492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001494:	3301      	adds	r3, #1
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149a:	2b03      	cmp	r3, #3
 800149c:	ddd5      	ble.n	800144a <dispNextPiece+0xbe>
	    		        };
	    		break;
 800149e:	e02d      	b.n	80014fc <dispNextPiece+0x170>
	    	case design3:
	    		for(i=0;i<4;i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014a4:	e026      	b.n	80014f4 <dispNextPiece+0x168>
	    			grid[2+pieces[NextPiece->typepiece][NextPiece->position][i][0]]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6892      	ldr	r2, [r2, #8]
 80014b4:	0091      	lsls	r1, r2, #2
 80014b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014b8:	440a      	add	r2, r1
 80014ba:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80014be:	1c9a      	adds	r2, r3, #2
						[2+pieces[NextPiece->typepiece][NextPiece->position][i][1]]=5;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	01db      	lsls	r3, r3, #7
 80014c6:	6839      	ldr	r1, [r7, #0]
 80014c8:	4419      	add	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	0098      	lsls	r0, r3, #2
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	4403      	add	r3, r0
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	3302      	adds	r3, #2
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80014e6:	4413      	add	r3, r2
 80014e8:	2205      	movs	r2, #5
 80014ea:	f843 2c48 	str.w	r2, [r3, #-72]
	    		for(i=0;i<4;i++){
 80014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f0:	3301      	adds	r3, #1
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	ddd5      	ble.n	80014a6 <dispNextPiece+0x11a>
	    		    		};
	    		break;}
 80014fa:	bf00      	nop

	for(i=0;i<4;i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001500:	e067      	b.n	80015d2 <dispNextPiece+0x246>
	        for(j=0;j<4;j++){
 8001502:	2300      	movs	r3, #0
 8001504:	64bb      	str	r3, [r7, #72]	; 0x48
 8001506:	e05e      	b.n	80015c6 <dispNextPiece+0x23a>
	            	switch(grid[j][i]){
 8001508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800150a:	009a      	lsls	r2, r3, #2
 800150c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001516:	4413      	add	r3, r2
 8001518:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d84f      	bhi.n	80015c0 <dispNextPiece+0x234>
 8001520:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <dispNextPiece+0x19c>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	08001541 	.word	0x08001541
 800152c:	080015c1 	.word	0x080015c1
 8001530:	080015c1 	.word	0x080015c1
 8001534:	08001561 	.word	0x08001561
 8001538:	08001581 	.word	0x08001581
 800153c:	080015a1 	.word	0x080015a1
	            		case 0 :
	            			dispSmallVoid(j*12+5,i*12+230);
 8001540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	1d58      	adds	r0, r3, #5
 800154c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	33e6      	adds	r3, #230	; 0xe6
 8001558:	4619      	mov	r1, r3
 800155a:	f004 f867 	bl	800562c <dispSmallVoid>
	            			break;
 800155e:	e02f      	b.n	80015c0 <dispNextPiece+0x234>
	            		case 3 :
	            			dispSmallPiece1(j*12+5,i*12+230);
 8001560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	1d58      	adds	r0, r3, #5
 800156c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	33e6      	adds	r3, #230	; 0xe6
 8001578:	4619      	mov	r1, r3
 800157a:	f003 fe53 	bl	8005224 <dispSmallPiece1>
	            			break;
 800157e:	e01f      	b.n	80015c0 <dispNextPiece+0x234>
	            		case 4:
	            			dispSmallPiece2(j*12+5,i*12+230);
 8001580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	1d58      	adds	r0, r3, #5
 800158c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	33e6      	adds	r3, #230	; 0xe6
 8001598:	4619      	mov	r1, r3
 800159a:	f003 feef 	bl	800537c <dispSmallPiece2>
	            		     break;
 800159e:	e00f      	b.n	80015c0 <dispNextPiece+0x234>
	            		case 5:
							dispSmallPiece3(j*12+5,i*12+230);
 80015a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	1d58      	adds	r0, r3, #5
 80015ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	33e6      	adds	r3, #230	; 0xe6
 80015b8:	4619      	mov	r1, r3
 80015ba:	f003 ff8b 	bl	80054d4 <dispSmallPiece3>
							break;
 80015be:	bf00      	nop
	        for(j=0;j<4;j++){
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	3301      	adds	r3, #1
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80015c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	dd9d      	ble.n	8001508 <dispNextPiece+0x17c>
	for(i=0;i<4;i++){
 80015cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ce:	3301      	adds	r3, #1
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	dd94      	ble.n	8001502 <dispNextPiece+0x176>
	            	};
	        }
	    }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop

080015e4 <test_hit>:
    		    		};
    		break;}

};

int test_hit(PIECE* toBeTested,int pieces[7][4][4][2],int grid[14][26],int coord[2]){
 80015e4:	b490      	push	{r4, r7}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
    int i;
    for(i=0;i<4;i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e0c4      	b.n	8001782 <test_hit+0x19e>
        if(grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	01db      	lsls	r3, r3, #7
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	440b      	add	r3, r1
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	6889      	ldr	r1, [r1, #8]
 800160a:	0088      	lsls	r0, r1, #2
 800160c:	6979      	ldr	r1, [r7, #20]
 800160e:	4401      	add	r1, r0
 8001610:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8001614:	4413      	add	r3, r2
 8001616:	461a      	mov	r2, r3
 8001618:	2368      	movs	r3, #104	; 0x68
 800161a:	fb03 f302 	mul.w	r3, r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
        [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=0 &&
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3304      	adds	r3, #4
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	01db      	lsls	r3, r3, #7
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	4418      	add	r0, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	009c      	lsls	r4, r3, #2
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4423      	add	r3, r4
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4403      	add	r3, r0
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	440b      	add	r3, r1
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        if(grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8097 	beq.w	800177c <test_hit+0x198>
                grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	01db      	lsls	r3, r3, #7
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	440b      	add	r3, r1
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	6889      	ldr	r1, [r1, #8]
 8001660:	0088      	lsls	r0, r1, #2
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	4401      	add	r1, r0
 8001666:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	2368      	movs	r3, #104	; 0x68
 8001670:	fb03 f302 	mul.w	r3, r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	441a      	add	r2, r3
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=3 &&
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3304      	adds	r3, #4
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	01db      	lsls	r3, r3, #7
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	4418      	add	r0, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	009c      	lsls	r4, r3, #2
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4423      	add	r3, r4
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4403      	add	r3, r0
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	440b      	add	r3, r1
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=0 &&
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d06c      	beq.n	800177c <test_hit+0x198>
				grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	440b      	add	r3, r1
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	6889      	ldr	r1, [r1, #8]
 80016b4:	0088      	lsls	r0, r1, #2
 80016b6:	6979      	ldr	r1, [r7, #20]
 80016b8:	4401      	add	r1, r0
 80016ba:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80016be:	4413      	add	r3, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	2368      	movs	r3, #104	; 0x68
 80016c4:	fb03 f302 	mul.w	r3, r3, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	441a      	add	r2, r3
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=4 &&
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3304      	adds	r3, #4
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	01db      	lsls	r3, r3, #7
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	4418      	add	r0, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	009c      	lsls	r4, r3, #2
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4423      	add	r3, r4
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4403      	add	r3, r0
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	440b      	add	r3, r1
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=3 &&
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d042      	beq.n	800177c <test_hit+0x198>
				grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	01db      	lsls	r3, r3, #7
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	440b      	add	r3, r1
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	6889      	ldr	r1, [r1, #8]
 8001708:	0088      	lsls	r0, r1, #2
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	4401      	add	r1, r0
 800170e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	2368      	movs	r3, #104	; 0x68
 8001718:	fb03 f302 	mul.w	r3, r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	441a      	add	r2, r3
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=5 &&
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3304      	adds	r3, #4
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	4418      	add	r0, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	009c      	lsls	r4, r3, #2
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4423      	add	r3, r4
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4403      	add	r3, r0
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	440b      	add	r3, r1
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=4 &&
 8001746:	2b05      	cmp	r3, #5
 8001748:	d018      	beq.n	800177c <test_hit+0x198>
				grid[coord[0]+pieces[toBeTested->typepiece][toBeTested->position][i][0]]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	440b      	add	r3, r1
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	6889      	ldr	r1, [r1, #8]
 800175c:	0088      	lsls	r0, r1, #2
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	4401      	add	r1, r0
 8001762:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8001766:	4413      	add	r3, r2
 8001768:	461a      	mov	r2, r3
 800176a:	2368      	movs	r3, #104	; 0x68
 800176c:	fb03 f302 	mul.w	r3, r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
					 [coord[1]+pieces[toBeTested->typepiece][toBeTested->position][i][1]]!=5 &&
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <test_hit+0x198>
				){
            return 1;
 8001778:	2301      	movs	r3, #1
 800177a:	e007      	b.n	800178c <test_hit+0x1a8>
    for(i=0;i<4;i++){
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b03      	cmp	r3, #3
 8001786:	f77f af37 	ble.w	80015f8 <test_hit+0x14>
        };
    }
    return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr
	...

08001798 <fall>:

void fall(PIECE* isPlayed,PIECE* NextPiece,int pieces[7][4][4][2],int grid[14][26],int coord[2],int level){
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
    int i,j,m;
    dispNextPiece(NextPiece,pieces);
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f7ff fdef 	bl	800138c <dispNextPiece>
    while(test_hit(isPlayed,pieces,grid,coord)==0){
 80017ae:	e083      	b.n	80018b8 <fall+0x120>
        for(i=0;i<25;i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e036      	b.n	8001824 <fall+0x8c>
            for(j=2;j<13;j++){
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	e02d      	b.n	8001818 <fall+0x80>
            	if(grid[j][i]==3 || grid[j][i]==4 || grid[j][i]==5){
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2268      	movs	r2, #104	; 0x68
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d015      	beq.n	80017fe <fall+0x66>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2268      	movs	r2, #104	; 0x68
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00a      	beq.n	80017fe <fall+0x66>
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2268      	movs	r2, #104	; 0x68
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d109      	bne.n	8001812 <fall+0x7a>
            		grid[j][i]=0;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2268      	movs	r2, #104	; 0x68
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	2100      	movs	r1, #0
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(j=2;j<13;j++){
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	3301      	adds	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	ddce      	ble.n	80017bc <fall+0x24>
        for(i=0;i<25;i++){
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b18      	cmp	r3, #24
 8001828:	ddc5      	ble.n	80017b6 <fall+0x1e>
            	}
            }
        }
        for(i=0;i<4;i++){
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e02c      	b.n	800188a <fall+0xf2>
            grid[coord[0]+pieces[isPlayed->typepiece][isPlayed->position][i][0]]
 8001830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	440b      	add	r3, r1
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	6889      	ldr	r1, [r1, #8]
 8001842:	0088      	lsls	r0, r1, #2
 8001844:	69f9      	ldr	r1, [r7, #28]
 8001846:	4401      	add	r1, r0
 8001848:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	2368      	movs	r3, #104	; 0x68
 8001852:	fb03 f302 	mul.w	r3, r3, r2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	441a      	add	r2, r3
                [coord[1]+pieces[isPlayed->typepiece][isPlayed->position][i][1]]=isPlayed->design;
 800185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185c:	3304      	adds	r3, #4
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4418      	add	r0, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	009c      	lsls	r4, r3, #2
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4423      	add	r3, r4
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4403      	add	r3, r0
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	440b      	add	r3, r1
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	68c9      	ldr	r1, [r1, #12]
 8001880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(i=0;i<4;i++){
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	2b03      	cmp	r3, #3
 800188e:	ddcf      	ble.n	8001830 <fall+0x98>
        }
        dispGrid(grid);
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7ff fcdb 	bl	800124c <dispGrid>
        coord[1]=coord[1]+1;
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	3304      	adds	r3, #4
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	3304      	adds	r3, #4
 80018a0:	3201      	adds	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
        m=0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
        while (m!=7000000){
 80018a8:	e002      	b.n	80018b0 <fall+0x118>
        	m++;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
        while (m!=7000000){
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	4a29      	ldr	r2, [pc, #164]	; (8001958 <fall+0x1c0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d1f8      	bne.n	80018aa <fall+0x112>
    while(test_hit(isPlayed,pieces,grid,coord)==0){
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fe90 	bl	80015e4 <test_hit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f43f af72 	beq.w	80017b0 <fall+0x18>
        }
    }
    for(i=0;i<4;i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	e02e      	b.n	8001930 <fall+0x198>
        grid[coord[0] + pieces[isPlayed->typepiece][isPlayed->position][i][0]]
        [coord[1] - 1 + pieces[isPlayed->typepiece][isPlayed->position][i][1]] = isPlayed->design+3;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	68d9      	ldr	r1, [r3, #12]
        grid[coord[0] + pieces[isPlayed->typepiece][isPlayed->position][i][0]]
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	01db      	lsls	r3, r3, #7
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4403      	add	r3, r0
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	6880      	ldr	r0, [r0, #8]
 80018e8:	0084      	lsls	r4, r0, #2
 80018ea:	69f8      	ldr	r0, [r7, #28]
 80018ec:	4420      	add	r0, r4
 80018ee:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	2368      	movs	r3, #104	; 0x68
 80018f8:	fb03 f302 	mul.w	r3, r3, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	441a      	add	r2, r3
        [coord[1] - 1 + pieces[isPlayed->typepiece][isPlayed->position][i][1]] = isPlayed->design+3;
 8001900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001902:	3304      	adds	r3, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	01db      	lsls	r3, r3, #7
 800190e:	687c      	ldr	r4, [r7, #4]
 8001910:	441c      	add	r4, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	009d      	lsls	r5, r3, #2
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	442b      	add	r3, r5
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4423      	add	r3, r4
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4403      	add	r3, r0
 8001924:	3103      	adds	r1, #3
 8001926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(i=0;i<4;i++) {
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b03      	cmp	r3, #3
 8001934:	ddcd      	ble.n	80018d2 <fall+0x13a>
    }
    m=0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
    while (m!=7000000){
 800193a:	e002      	b.n	8001942 <fall+0x1aa>
    	m++;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
    while (m!=7000000){
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <fall+0x1c0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d1f8      	bne.n	800193c <fall+0x1a4>
    }
    dispGrid(grid);
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f7ff fc7e 	bl	800124c <dispGrid>
}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	006acfc0 	.word	0x006acfc0

0800195c <testGameOver>:

int testGameOver(int grid[14][26]){
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    int i;
    for(i=3;i<12;i++){
 8001964:	2303      	movs	r3, #3
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e00d      	b.n	8001986 <testGameOver+0x2a>
        if(grid[i][3]!=0) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2268      	movs	r2, #104	; 0x68
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <testGameOver+0x24>
            return 1;
 800197c:	2301      	movs	r3, #1
 800197e:	e006      	b.n	800198e <testGameOver+0x32>
    for(i=3;i<12;i++){
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	ddee      	ble.n	800196a <testGameOver+0xe>
        };
    };
    return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <move_piece>:

void move_piece(int move,PIECE* isPlayed,int pieces[7][4][4][2],int grid[14][26],int coord[2]){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
    int temp[2];
    temp[0]=coord[0]; temp[1]=coord[1];
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d825      	bhi.n	8001a08 <move_piece+0x6c>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <move_piece+0x28>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019dd 	.word	0x080019dd
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019ed 	.word	0x080019ed
    switch(move){
        case 0: //move to right
            temp[0]++;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
            break;
 80019da:	e015      	b.n	8001a08 <move_piece+0x6c>
        case 1: //move to left
            temp[0]--;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3b01      	subs	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
            break;
 80019e2:	e011      	b.n	8001a08 <move_piece+0x6c>
        case 2: //move to bottom
            temp[1]++;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
            break;
 80019ea:	e00d      	b.n	8001a08 <move_piece+0x6c>
        case 3: //rotate
            if(isPlayed->position!=3){
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d005      	beq.n	8001a00 <move_piece+0x64>
                isPlayed->position++;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	609a      	str	r2, [r3, #8]
            }
            else{
                isPlayed->position=0;
            }
            break;
 80019fe:	e002      	b.n	8001a06 <move_piece+0x6a>
                isPlayed->position=0;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
            break;
 8001a06:	bf00      	nop
    }
    if(test_hit(isPlayed,pieces,grid,temp)==0){
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f7ff fde7 	bl	80015e4 <test_hit>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <move_piece+0x8e>
        coord[0]=temp[0]; coord[1]=temp[1];
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	3304      	adds	r3, #4
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop

08001a34 <test_lines>:

int test_lines(int grid[14][26],int level){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    int i,j,count=0,temp_score=0,score=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
    for(i=0;i<24;i++){
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e025      	b.n	8001a9c <test_lines+0x68>
        for(j=0;j<14;j++){
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	e01a      	b.n	8001a8c <test_lines+0x58>
            if((grid[j][i])!=0){
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2268      	movs	r2, #104	; 0x68
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <test_lines+0x3e>
                count++;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
            }
            if (count==14){
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b0e      	cmp	r3, #14
 8001a76:	d106      	bne.n	8001a86 <test_lines+0x52>
                delete_line(grid,i);
 8001a78:	69f9      	ldr	r1, [r7, #28]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f842 	bl	8001b04 <delete_line>
                temp_score=temp_score+1;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3301      	adds	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
        for(j=0;j<14;j++){
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b0d      	cmp	r3, #13
 8001a90:	dde1      	ble.n	8001a56 <test_lines+0x22>
            }
        }
        count=0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    for(i=0;i<24;i++){
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b17      	cmp	r3, #23
 8001aa0:	ddd6      	ble.n	8001a50 <test_lines+0x1c>
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d825      	bhi.n	8001af6 <test_lines+0xc2>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <test_lines+0x7c>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001acf 	.word	0x08001acf
 8001ab8:	08001adb 	.word	0x08001adb
 8001abc:	08001ae9 	.word	0x08001ae9
    }
    switch (temp_score) {
        case 1:
            score=40*level;
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	60fb      	str	r3, [r7, #12]
            break;
 8001acc:	e015      	b.n	8001afa <test_lines+0xc6>
        case 2:
            score=100*level;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2264      	movs	r2, #100	; 0x64
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
            break;
 8001ad8:	e00f      	b.n	8001afa <test_lines+0xc6>
        case 3:
            score=300*level;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
            break;
 8001ae6:	e008      	b.n	8001afa <test_lines+0xc6>
        case 4:
            score=1200*level;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
            break;
 8001af4:	e001      	b.n	8001afa <test_lines+0xc6>
        default:
            score=0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
    }
    return score;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <delete_line>:

void delete_line(int grid[14][26],int i){
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    int j;
    for(i;i>0;i--){
 8001b0e:	e01e      	b.n	8001b4e <delete_line+0x4a>
        for(j=0;j<14;j++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e015      	b.n	8001b42 <delete_line+0x3e>
        grid[j][i]=grid[j][i-1];
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2268      	movs	r2, #104	; 0x68
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	441a      	add	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	1e59      	subs	r1, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2068      	movs	r0, #104	; 0x68
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4403      	add	r3, r0
 8001b32:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(j=0;j<14;j++)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b0d      	cmp	r3, #13
 8001b46:	dde6      	ble.n	8001b16 <delete_line+0x12>
    for(i;i>0;i--){
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dcdd      	bgt.n	8001b10 <delete_line+0xc>
    }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <core>:

void core(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 8001b6a:	af02      	add	r7, sp, #8
	    int score=0, score_temp, xp=0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	    int level=1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	    int tab[224]={-1,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <core+0x1b8>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	4611      	mov	r1, r2
 8001b86:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f00a fc32 	bl	800c3f4 <memcpy>
	                  -1,0,0,0,1,0,0,-1,0,-1,0,0,0,1,1,0,1,0,0,0,-1,0,0,1,0,1,0,0,0,-1,-1,0};

	    PIECE* one;
	    PIECE* two;
	    PIECE* three;
	    init_grid(grid); //initialisation de la grille
 8001b90:	4863      	ldr	r0, [pc, #396]	; (8001d20 <core+0x1bc>)
 8001b92:	f7ff fa21 	bl	8000fd8 <init_grid>
	    init_pieces(pieces,tab); //initialisation du tableau référence des pièces
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4862      	ldr	r0, [pc, #392]	; (8001d24 <core+0x1c0>)
 8001b9c:	f7ff fa7e 	bl	800109c <init_pieces>
	    one=create_piece(NULL);  //création des 3 premières pièces
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fac3 	bl	800112c <create_piece>
 8001ba6:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
	    two= create_piece(NULL);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fabe 	bl	800112c <create_piece>
 8001bb0:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
	    three= create_piece(NULL);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fab9 	bl	800112c <create_piece>
 8001bba:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
	    pieces_globales=BuildList(one,two,three); //création de la liste globale contenant les 3 pièces à venir
 8001bbe:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8001bc2:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8001bc6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8001bca:	f7ff fb0d 	bl	80011e8 <BuildList>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <core+0x1c4>)
 8001bd2:	6013      	str	r3, [r2, #0]
	    coord[0]=rand()%(9-4)+4;  //randomization des coordonnées d'apparition de la pièce à venir
 8001bd4:	f00a fd0c 	bl	800c5f0 <rand>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <core+0x1c8>)
 8001bdc:	fb83 2301 	smull	r2, r3, r3, r1
 8001be0:	105a      	asrs	r2, r3, #1
 8001be2:	17cb      	asrs	r3, r1, #31
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	1aca      	subs	r2, r1, r3
 8001bee:	1d13      	adds	r3, r2, #4
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <core+0x1cc>)
 8001bf2:	6013      	str	r3, [r2, #0]
	    coord[1]=2;
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	; (8001d30 <core+0x1cc>)
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	605a      	str	r2, [r3, #4]
	    DispScoreIG(score,0); //affichage du score et du top score
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001c00:	f003 f9b0 	bl	8004f64 <DispScoreIG>
	    DispScoreIG(score,1);
 8001c04:	2101      	movs	r1, #1
 8001c06:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001c0a:	f003 f9ab 	bl	8004f64 <DispScoreIG>
	    while(testGameOver(grid)==0){ //boucle infinie tant que le jeu est possible
 8001c0e:	e06c      	b.n	8001cea <core+0x186>
	    	dispGrid(grid); // premier affichage de la grille (à vide)
 8001c10:	4843      	ldr	r0, [pc, #268]	; (8001d20 <core+0x1bc>)
 8001c12:	f7ff fb1b 	bl	800124c <dispGrid>


	    	fall(pieces_globales->first,pieces_globales->second,pieces,grid,coord,level); //fonction majeure faisant tomber la pièce et affichant
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <core+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <core+0x1c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <core+0x1cc>)
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <core+0x1bc>)
 8001c2e:	4a3d      	ldr	r2, [pc, #244]	; (8001d24 <core+0x1c0>)
 8001c30:	f7ff fdb2 	bl	8001798 <fall>
	    	//																				cette dernière et celle à venir
	        score_temp=score+test_lines(grid,level); //incrémentation du score si nécéssaire
 8001c34:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8001c38:	4839      	ldr	r0, [pc, #228]	; (8001d20 <core+0x1bc>)
 8001c3a:	f7ff fefb 	bl	8001a34 <test_lines>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001c44:	4413      	add	r3, r2
 8001c46:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	        if(score_temp>score){
 8001c4a:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001c4e:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dd23      	ble.n	8001c9e <core+0x13a>
	            xp=xp+(score_temp-score);
 8001c56:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001c5a:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001c64:	4413      	add	r3, r2
 8001c66:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	            if(xp>=level*2500){
 8001c6a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001c6e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	db0f      	blt.n	8001c9e <core+0x13a>
	                xp=xp-level*250;
 8001c7e:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001c82:	f06f 02f9 	mvn.w	r2, #249	; 0xf9
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8001c8e:	4413      	add	r3, r2
 8001c90:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	                level++;
 8001c94:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
	            }
	        }
	        score=score_temp;
 8001c9e:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001ca2:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
	        DispScoreIG(score,0); //mise à jour de l'affichage des scores
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001cac:	f003 f95a 	bl	8004f64 <DispScoreIG>
	        DispScoreIG(score,1);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 8001cb6:	f003 f955 	bl	8004f64 <DispScoreIG>
	        SwapList(pieces_globales); //création d'une nouvelle pièce est rotation des pièces à venir
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <core+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff faab 	bl	800121a <SwapList>

	       coord[0]=rand()%(9-4)+4;  //randomization des coordonnées d'apparition de la pièce à venir
 8001cc4:	f00a fc94 	bl	800c5f0 <rand>
 8001cc8:	4601      	mov	r1, r0
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <core+0x1c8>)
 8001ccc:	fb83 2301 	smull	r2, r3, r3, r1
 8001cd0:	105a      	asrs	r2, r3, #1
 8001cd2:	17cb      	asrs	r3, r1, #31
 8001cd4:	1ad2      	subs	r2, r2, r3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	1aca      	subs	r2, r1, r3
 8001cde:	1d13      	adds	r3, r2, #4
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <core+0x1cc>)
 8001ce2:	6013      	str	r3, [r2, #0]
	        coord[1]=2;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <core+0x1cc>)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	605a      	str	r2, [r3, #4]
	    while(testGameOver(grid)==0){ //boucle infinie tant que le jeu est possible
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <core+0x1bc>)
 8001cec:	f7ff fe36 	bl	800195c <testGameOver>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d08c      	beq.n	8001c10 <core+0xac>
	    }
	    dispGameOver(); //affichage du game over
 8001cf6:	f000 f821 	bl	8001d3c <dispGameOver>
	    prgm_counter++;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <core+0x1d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <core+0x1d0>)
 8001d02:	6013      	str	r3, [r2, #0]
	    while(boucleur!=1){
 8001d04:	bf00      	nop
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <core+0x1d4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d1fb      	bne.n	8001d06 <core+0x1a2>

	    }


}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	f507 7768 	add.w	r7, r7, #928	; 0x3a0
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0806d208 	.word	0x0806d208
 8001d20:	20000368 	.word	0x20000368
 8001d24:	20000918 	.word	0x20000918
 8001d28:	20000e8c 	.word	0x20000e8c
 8001d2c:	66666667 	.word	0x66666667
 8001d30:	20000360 	.word	0x20000360
 8001d34:	200000c4 	.word	0x200000c4
 8001d38:	200000c8 	.word	0x200000c8

08001d3c <dispGameOver>:
 */

#include "game_over.h"
#include "stm32746g_discovery_lcd.h"

void dispGameOver(){
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	f5ad 4dbb 	sub.w	sp, sp, #23936	; 0x5d80
 8001d42:	b099      	sub	sp, #100	; 0x64
 8001d44:	af00      	add	r7, sp, #0

	uint32_t color_map[4] = {
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <dispGameOver+0x174>)
 8001d48:	f645 54c4 	movw	r4, #24004	; 0x5dc4
 8001d4c:	443c      	add	r4, r7
 8001d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                LCD_COLOR_BLACK,
                LCD_COLOR_BTURQUOISE,
                LCD_COLOR_BGRAY,
                LCD_COLOR_WHITE};

	char window_data[] = {
 8001d54:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <dispGameOver+0x178>)
 8001d56:	f645 52e0 	movw	r2, #24032	; 0x5de0
 8001d5a:	443a      	add	r2, r7
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <dispGameOver+0x17c>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	4611      	mov	r1, r2
 8001d64:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f00a fb43 	bl	800c3f4 <memcpy>
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1
	};

int i,j,k=0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f645 52d4 	movw	r2, #24020	; 0x5dd4
 8001d74:	443a      	add	r2, r7
 8001d76:	6013      	str	r3, [r2, #0]
         for(j=180;j<300;j++) {
 8001d78:	23b4      	movs	r3, #180	; 0xb4
 8001d7a:	f645 52d8 	movw	r2, #24024	; 0x5dd8
 8001d7e:	443a      	add	r2, r7
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e086      	b.n	8001e92 <dispGameOver+0x156>
             for (i = 235; i >= 36; i--) {
 8001d84:	23eb      	movs	r3, #235	; 0xeb
 8001d86:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001d8a:	443a      	add	r2, r7
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e071      	b.n	8001e74 <dispGameOver+0x138>
                 switch (window_data[k]) {
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <dispGameOver+0x178>)
 8001d92:	f645 52e0 	movw	r2, #24032	; 0x5de0
 8001d96:	443a      	add	r2, r7
 8001d98:	4413      	add	r3, r2
 8001d9a:	f645 52d4 	movw	r2, #24020	; 0x5dd4
 8001d9e:	443a      	add	r2, r7
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d852      	bhi.n	8001e50 <dispGameOver+0x114>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <dispGameOver+0x74>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001de5 	.word	0x08001de5
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e2d 	.word	0x08001e2d
                     case 0:
                    	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8001dc0:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001dc4:	443b      	add	r3, r7
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001dce:	443a      	add	r2, r7
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	b291      	uxth	r1, r2
 8001dd4:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8001dd8:	443a      	add	r2, r7
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fea7 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8001de2:	e035      	b.n	8001e50 <dispGameOver+0x114>
                     case 1:
                    	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8001de4:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001de8:	443b      	add	r3, r7
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001df2:	443a      	add	r2, r7
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	b291      	uxth	r1, r2
 8001df8:	f645 52c8 	movw	r2, #24008	; 0x5dc8
 8001dfc:	443a      	add	r2, r7
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 fe95 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8001e06:	e023      	b.n	8001e50 <dispGameOver+0x114>
                     case 2:
                    	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8001e08:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001e0c:	443b      	add	r3, r7
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001e16:	443a      	add	r2, r7
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	b291      	uxth	r1, r2
 8001e1c:	f645 52cc 	movw	r2, #24012	; 0x5dcc
 8001e20:	443a      	add	r2, r7
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fe83 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8001e2a:	e011      	b.n	8001e50 <dispGameOver+0x114>
                     case 3:
                    	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8001e2c:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001e30:	443b      	add	r3, r7
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001e3a:	443a      	add	r2, r7
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	b291      	uxth	r1, r2
 8001e40:	f645 52d0 	movw	r2, #24016	; 0x5dd0
 8001e44:	443a      	add	r2, r7
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 fe71 	bl	8006b30 <BSP_LCD_DrawPixel>
                         break;
 8001e4e:	bf00      	nop
                 }
                 k++;
 8001e50:	f645 53d4 	movw	r3, #24020	; 0x5dd4
 8001e54:	443b      	add	r3, r7
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f645 52d4 	movw	r2, #24020	; 0x5dd4
 8001e5e:	443a      	add	r2, r7
 8001e60:	6013      	str	r3, [r2, #0]
             for (i = 235; i >= 36; i--) {
 8001e62:	f645 53dc 	movw	r3, #24028	; 0x5ddc
 8001e66:	443b      	add	r3, r7
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f645 52dc 	movw	r2, #24028	; 0x5ddc
 8001e70:	443a      	add	r2, r7
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	f645 53dc 	movw	r3, #24028	; 0x5ddc
 8001e78:	443b      	add	r3, r7
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b23      	cmp	r3, #35	; 0x23
 8001e7e:	dc87      	bgt.n	8001d90 <dispGameOver+0x54>
         for(j=180;j<300;j++) {
 8001e80:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001e84:	443b      	add	r3, r7
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f645 52d8 	movw	r2, #24024	; 0x5dd8
 8001e8e:	443a      	add	r2, r7
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	f645 53d8 	movw	r3, #24024	; 0x5dd8
 8001e96:	443b      	add	r3, r7
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e9e:	f6ff af71 	blt.w	8001d84 <dispGameOver+0x48>
             }
         }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	f507 47bb 	add.w	r7, r7, #23936	; 0x5d80
 8001eaa:	3764      	adds	r7, #100	; 0x64
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	0806d588 	.word	0x0806d588
 8001eb4:	ffffa224 	.word	0xffffa224
 8001eb8:	0806d598 	.word	0x0806d598

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f005 f9d3 	bl	800726c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f8b5 	bl	8002034 <SystemClock_Config>
  // to set DBG_TIM6_STOP bit in DBG peripheral
  // in DBGMCU_ABP1_FZ register
  // It stops the TIM6 to count as you enter in debug mode
  // So it avoids to generate too many interrupts from TIM6
  // So it enables the step by step debug
  int *pt = (int*) 0xE0042008;
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <main+0x154>)
 8001ecc:	60bb      	str	r3, [r7, #8]
  *pt |= (1<<4);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	601a      	str	r2, [r3, #0]
  // END 3: extra Initialization
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eda:	f000 fafd 	bl	80024d8 <MX_GPIO_Init>
  MX_CRC_Init();
 8001ede:	f000 f951 	bl	8002184 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001ee2:	f000 f971 	bl	80021c8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001ee6:	f000 faa7 	bl	8002438 <MX_FMC_Init>
  MX_I2C3_Init();
 8001eea:	f000 f99f 	bl	800222c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001eee:	f000 f9dd 	bl	80022ac <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8001ef2:	f000 fa71 	bl	80023d8 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8001ef6:	f000 fa5b 	bl	80023b0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  // BEGIN 4: USER CODE BSP INIT
  int l=0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  BSP_SDRAM_Init();
 8001efe:	f004 ffbf 	bl	8006e80 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <main+0x158>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a43      	ldr	r2, [pc, #268]	; (8002014 <main+0x158>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <main+0x158>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  BSP_TS_Init(480,272);
 8001f1a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001f1e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001f22:	f005 f963 	bl	80071ec <BSP_TS_Init>
  BSP_LCD_Init();
 8001f26:	f004 fcb9 	bl	800689c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8001f2a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f004 fd4c 	bl	80069cc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001f34:	f004 fe44 	bl	8006bc0 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f004 fda7 	bl	8006a8c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f42:	f004 fdcd 	bl	8006ae0 <BSP_LCD_Clear>
  set_doge();
 8001f46:	f7fe ff01 	bl	8000d4c <set_doge>
  randomNum=HAL_RNG_GetRandomNumber_IT(&hrng);
 8001f4a:	4833      	ldr	r0, [pc, #204]	; (8002018 <main+0x15c>)
 8001f4c:	f008 fed4 	bl	800acf8 <HAL_RNG_GetRandomNumber_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a32      	ldr	r2, [pc, #200]	; (800201c <main+0x160>)
 8001f54:	6013      	str	r3, [r2, #0]
  srand(randomNum);
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <main+0x160>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a fb1a 	bl	800c594 <srand>
  while(l!=5000000){
 8001f60:	e002      	b.n	8001f68 <main+0xac>
  		 				 l++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
  while(l!=5000000){
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <main+0x164>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d1f8      	bne.n	8001f62 <main+0xa6>
  		 			 }
  l=0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // BEGIN 5: USER CODE WHILE1
	  B1=0;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <main+0x168>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
	  prgm_counter++;
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <main+0x16c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <main+0x16c>)
 8001f82:	6013      	str	r3, [r2, #0]
	  set_menu();
 8001f84:	f000 fe80 	bl	8002c88 <set_menu>
	  aff_select(0);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 ffaf 	bl	8002eec <aff_select>
	  for(l=0;l<5;l++){
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e006      	b.n	8001fa2 <main+0xe6>
	  DispScoreList(0, l);
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	2000      	movs	r0, #0
 8001f98:	f002 f9f4 	bl	8004384 <DispScoreList>
	  for(l=0;l<5;l++){
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	ddf5      	ble.n	8001f94 <main+0xd8>
	  }
	  while(global_advance!=1){
 8001fa8:	bf00      	nop
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <main+0x170>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d1fb      	bne.n	8001faa <main+0xee>

	  	  }
	  prgm_counter++;
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <main+0x16c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <main+0x16c>)
 8001fba:	6013      	str	r3, [r2, #0]
	  switch (B1)
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <main+0x168>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d01a      	beq.n	8001ffa <main+0x13e>
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	dc19      	bgt.n	8001ffc <main+0x140>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <main+0x116>
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <main+0x120>
 8001fd0:	e014      	b.n	8001ffc <main+0x140>
	  {
	  	  case 0:
	  		setbackground();
 8001fd2:	f7fe fba5 	bl	8000720 <setbackground>
	  		core();
 8001fd6:	f7ff fdc5 	bl	8001b64 <core>
	  		break;
 8001fda:	e00f      	b.n	8001ffc <main+0x140>
	  	  case 1:
	  		  boucleur=0;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <main+0x174>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
	  		  prgm_counter++;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <main+0x16c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <main+0x16c>)
 8001fea:	6013      	str	r3, [r2, #0]
	  		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff0:	f004 fd76 	bl	8006ae0 <BSP_LCD_Clear>
	  		  setRULES();
 8001ff4:	f7fe fad8 	bl	80005a8 <setRULES>
	  		  break;
 8001ff8:	e000      	b.n	8001ffc <main+0x140>
	  	  case 2:
	  		  break;
 8001ffa:	bf00      	nop

	  }
	  prgm_counter=0;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <main+0x16c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
	  boucleur=0;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <main+0x174>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
	  global_advance=0;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <main+0x170>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
	  B1=0;
 800200e:	e7b1      	b.n	8001f74 <main+0xb8>
 8002010:	e0042008 	.word	0xe0042008
 8002014:	40023800 	.word	0x40023800
 8002018:	20000e90 	.word	0x20000e90
 800201c:	20000f14 	.word	0x20000f14
 8002020:	004c4b40 	.word	0x004c4b40
 8002024:	200000c0 	.word	0x200000c0
 8002028:	200000c4 	.word	0x200000c4
 800202c:	200000cc 	.word	0x200000cc
 8002030:	200000c8 	.word	0x200000c8

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b4      	sub	sp, #208	; 0xd0
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800203e:	2230      	movs	r2, #48	; 0x30
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f00a f9e4 	bl	800c410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	2284      	movs	r2, #132	; 0x84
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f00a f9d5 	bl	800c410 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002066:	f007 fd21 	bl	8009aac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <SystemClock_Config+0x144>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a42      	ldr	r2, [pc, #264]	; (8002178 <SystemClock_Config+0x144>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b40      	ldr	r3, [pc, #256]	; (8002178 <SystemClock_Config+0x144>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <SystemClock_Config+0x148>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3d      	ldr	r2, [pc, #244]	; (800217c <SystemClock_Config+0x148>)
 8002088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <SystemClock_Config+0x148>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209a:	2301      	movs	r3, #1
 800209c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020b6:	2319      	movs	r3, #25
 80020b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80020bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80020ca:	2309      	movs	r3, #9
 80020cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f007 fd49 	bl	8009b6c <HAL_RCC_OscConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80020e0:	f000 fdcc 	bl	8002c7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020e4:	f007 fcf2 	bl	8009acc <HAL_PWREx_EnableOverDrive>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80020ee:	f000 fdc5 	bl	8002c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f2:	230f      	movs	r3, #15
 80020f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002104:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002114:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002118:	2106      	movs	r1, #6
 800211a:	4618      	mov	r0, r3
 800211c:	f007 ffca 	bl	800a0b4 <HAL_RCC_ClockConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002126:	f000 fda9 	bl	8002c7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <SystemClock_Config+0x14c>)
 800212c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800212e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002132:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002134:	2305      	movs	r3, #5
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800213c:	2303      	movs	r3, #3
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800214a:	2300      	movs	r3, #0
 800214c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800214e:	2300      	movs	r3, #0
 8002150:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215a:	f107 0308 	add.w	r3, r7, #8
 800215e:	4618      	mov	r0, r3
 8002160:	f008 f9b0 	bl	800a4c4 <HAL_RCCEx_PeriphCLKConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800216a:	f000 fd87 	bl	8002c7c <Error_Handler>
  }
}
 800216e:	bf00      	nop
 8002170:	37d0      	adds	r7, #208	; 0xd0
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
 8002180:	00210048 	.word	0x00210048

08002184 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <MX_CRC_Init+0x3c>)
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <MX_CRC_Init+0x40>)
 800218c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_CRC_Init+0x3c>)
 8002190:	2200      	movs	r2, #0
 8002192:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_CRC_Init+0x3c>)
 8002196:	2200      	movs	r2, #0
 8002198:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_CRC_Init+0x3c>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_CRC_Init+0x3c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_CRC_Init+0x3c>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_CRC_Init+0x3c>)
 80021ae:	f005 f991 	bl	80074d4 <HAL_CRC_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80021b8:	f000 fd60 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000d14 	.word	0x20000d14
 80021c4:	40023000 	.word	0x40023000

080021c8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <MX_DMA2D_Init+0x60>)
 80021d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <MX_DMA2D_Init+0x5c>)
 80021fe:	f005 fc11 	bl	8007a24 <HAL_DMA2D_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002208:	f000 fd38 	bl	8002c7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800220c:	2101      	movs	r1, #1
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_DMA2D_Init+0x5c>)
 8002210:	f005 fe76 	bl	8007f00 <HAL_DMA2D_ConfigLayer>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800221a:	f000 fd2f 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000ea0 	.word	0x20000ea0
 8002228:	4002b000 	.word	0x4002b000

0800222c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <MX_I2C3_Init+0x78>)
 8002234:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <MX_I2C3_Init+0x7c>)
 800223a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_I2C3_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002244:	2201      	movs	r2, #1
 8002246:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_I2C3_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_I2C3_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <MX_I2C3_Init+0x74>)
 8002268:	f006 fa6e 	bl	8008748 <HAL_I2C_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002272:	f000 fd03 	bl	8002c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002276:	2100      	movs	r1, #0
 8002278:	4809      	ldr	r0, [pc, #36]	; (80022a0 <MX_I2C3_Init+0x74>)
 800227a:	f007 f807 	bl	800928c <HAL_I2CEx_ConfigAnalogFilter>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002284:	f000 fcfa 	bl	8002c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_I2C3_Init+0x74>)
 800228c:	f007 f849 	bl	8009322 <HAL_I2CEx_ConfigDigitalFilter>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002296:	f000 fcf1 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000c9c 	.word	0x20000c9c
 80022a4:	40005c00 	.word	0x40005c00
 80022a8:	00c0eaff 	.word	0x00c0eaff

080022ac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2234      	movs	r2, #52	; 0x34
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00a f8a9 	bl	800c410 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80022be:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <MX_LTDC_Init+0x100>)
 80022c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022de:	2228      	movs	r2, #40	; 0x28
 80022e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022e4:	2209      	movs	r2, #9
 80022e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022ea:	2235      	movs	r2, #53	; 0x35
 80022ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022f0:	220b      	movs	r2, #11
 80022f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022f6:	f240 2215 	movw	r2, #533	; 0x215
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <MX_LTDC_Init+0xfc>)
 80022fe:	f240 121b 	movw	r2, #283	; 0x11b
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <MX_LTDC_Init+0xfc>)
 8002306:	f240 2235 	movw	r2, #565	; 0x235
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <MX_LTDC_Init+0xfc>)
 800230e:	f240 121d 	movw	r2, #285	; 0x11d
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <MX_LTDC_Init+0xfc>)
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <MX_LTDC_Init+0xfc>)
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002324:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <MX_LTDC_Init+0xfc>)
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800232c:	481e      	ldr	r0, [pc, #120]	; (80023a8 <MX_LTDC_Init+0xfc>)
 800232e:	f007 f845 	bl	80093bc <HAL_LTDC_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002338:	f000 fca0 	bl	8002c7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002340:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002344:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800234a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800234e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002350:	2302      	movs	r3, #2
 8002352:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002354:	23ff      	movs	r3, #255	; 0xff
 8002356:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800235c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002360:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002362:	2307      	movs	r3, #7
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002366:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800236c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002372:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_LTDC_Init+0xfc>)
 8002392:	f007 f9a5 	bl	80096e0 <HAL_LTDC_ConfigLayer>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800239c:	f000 fc6e 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3738      	adds	r7, #56	; 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000d60 	.word	0x20000d60
 80023ac:	40016800 	.word	0x40016800

080023b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_RNG_Init+0x20>)
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <MX_RNG_Init+0x24>)
 80023b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_RNG_Init+0x20>)
 80023bc:	f008 fc72 	bl	800aca4 <HAL_RNG_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023c6:	f000 fc59 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000e90 	.word	0x20000e90
 80023d4:	50060800 	.word	0x50060800

080023d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <MX_USART1_UART_Init+0x5c>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_USART1_UART_Init+0x58>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <MX_USART1_UART_Init+0x58>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_USART1_UART_Init+0x58>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MX_USART1_UART_Init+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_USART1_UART_Init+0x58>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_USART1_UART_Init+0x58>)
 800241c:	f009 f86c 	bl	800b4f8 <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002426:	f000 fc29 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000e08 	.word	0x20000e08
 8002434:	40011000 	.word	0x40011000

08002438 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_FMC_Init+0x98>)
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <MX_FMC_Init+0x9c>)
 8002454:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_FMC_Init+0x98>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_FMC_Init+0x98>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_FMC_Init+0x98>)
 8002464:	2204      	movs	r2, #4
 8002466:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_FMC_Init+0x98>)
 800246a:	2210      	movs	r2, #16
 800246c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_FMC_Init+0x98>)
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_FMC_Init+0x98>)
 8002476:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800247a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_FMC_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_FMC_Init+0x98>)
 8002484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002488:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_FMC_Init+0x98>)
 800248c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_FMC_Init+0x98>)
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800249c:	2307      	movs	r3, #7
 800249e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80024a0:	2304      	movs	r3, #4
 80024a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80024a4:	2307      	movs	r3, #7
 80024a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80024a8:	2303      	movs	r3, #3
 80024aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_FMC_Init+0x98>)
 80024ba:	f008 fcad 	bl	800ae18 <HAL_SDRAM_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80024c4:	f000 fbda 	bl	8002c7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000ee0 	.word	0x20000ee0
 80024d4:	a0000140 	.word	0xa0000140

080024d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ee:	4baf      	ldr	r3, [pc, #700]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4aae      	ldr	r2, [pc, #696]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4bac      	ldr	r3, [pc, #688]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002506:	4ba9      	ldr	r3, [pc, #676]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4aa8      	ldr	r2, [pc, #672]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4ba6      	ldr	r3, [pc, #664]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4ba3      	ldr	r3, [pc, #652]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4aa2      	ldr	r2, [pc, #648]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a9c      	ldr	r2, [pc, #624]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b9a      	ldr	r3, [pc, #616]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b97      	ldr	r3, [pc, #604]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a96      	ldr	r2, [pc, #600]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b94      	ldr	r3, [pc, #592]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b91      	ldr	r3, [pc, #580]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a90      	ldr	r2, [pc, #576]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b8e      	ldr	r3, [pc, #568]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a8a      	ldr	r2, [pc, #552]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002596:	4b85      	ldr	r3, [pc, #532]	; (80027ac <MX_GPIO_Init+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a84      	ldr	r2, [pc, #528]	; (80027ac <MX_GPIO_Init+0x2d4>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b82      	ldr	r3, [pc, #520]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a78      	ldr	r2, [pc, #480]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025cc:	f043 0320 	orr.w	r3, r3, #32
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	4b73      	ldr	r3, [pc, #460]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a72      	ldr	r2, [pc, #456]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b70      	ldr	r3, [pc, #448]	; (80027ac <MX_GPIO_Init+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2120      	movs	r1, #32
 80025fa:	486d      	ldr	r0, [pc, #436]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 80025fc:	f006 f866 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002600:	2201      	movs	r2, #1
 8002602:	2108      	movs	r1, #8
 8002604:	486b      	ldr	r0, [pc, #428]	; (80027b4 <MX_GPIO_Init+0x2dc>)
 8002606:	f006 f861 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002610:	4869      	ldr	r0, [pc, #420]	; (80027b8 <MX_GPIO_Init+0x2e0>)
 8002612:	f006 f85b 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261c:	4867      	ldr	r0, [pc, #412]	; (80027bc <MX_GPIO_Init+0x2e4>)
 800261e:	f006 f855 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	2108      	movs	r1, #8
 8002626:	4866      	ldr	r0, [pc, #408]	; (80027c0 <MX_GPIO_Init+0x2e8>)
 8002628:	f006 f850 	bl	80086cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800262c:	2308      	movs	r3, #8
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	4619      	mov	r1, r3
 800263e:	4861      	ldr	r0, [pc, #388]	; (80027c4 <MX_GPIO_Init+0x2ec>)
 8002640:	f005 fd8c 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002644:	2304      	movs	r3, #4
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002654:	2309      	movs	r3, #9
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265c:	4619      	mov	r1, r3
 800265e:	4859      	ldr	r0, [pc, #356]	; (80027c4 <MX_GPIO_Init+0x2ec>)
 8002660:	f005 fd7c 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002664:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002676:	230b      	movs	r3, #11
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	484f      	ldr	r0, [pc, #316]	; (80027c0 <MX_GPIO_Init+0x2e8>)
 8002682:	f005 fd6b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268c:	2312      	movs	r3, #18
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002690:	2301      	movs	r3, #1
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002698:	2304      	movs	r3, #4
 800269a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a0:	4619      	mov	r1, r3
 80026a2:	4849      	ldr	r0, [pc, #292]	; (80027c8 <MX_GPIO_Init+0x2f0>)
 80026a4:	f005 fd5a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80026a8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026ba:	230a      	movs	r3, #10
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4840      	ldr	r0, [pc, #256]	; (80027c8 <MX_GPIO_Init+0x2f0>)
 80026c6:	f005 fd49 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80026ca:	f248 0310 	movw	r3, #32784	; 0x8010
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026de:	4619      	mov	r1, r3
 80026e0:	4839      	ldr	r0, [pc, #228]	; (80027c8 <MX_GPIO_Init+0x2f0>)
 80026e2:	f005 fd3b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80026f6:	2308      	movs	r3, #8
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026fe:	4619      	mov	r1, r3
 8002700:	482b      	ldr	r0, [pc, #172]	; (80027b0 <MX_GPIO_Init+0x2d8>)
 8002702:	f005 fd2b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002706:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002718:	230c      	movs	r3, #12
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	4619      	mov	r1, r3
 8002722:	482a      	ldr	r0, [pc, #168]	; (80027cc <MX_GPIO_Init+0x2f4>)
 8002724:	f005 fd1a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800273a:	2301      	movs	r3, #1
 800273c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002742:	4619      	mov	r1, r3
 8002744:	4822      	ldr	r0, [pc, #136]	; (80027d0 <MX_GPIO_Init+0x2f8>)
 8002746:	f005 fd09 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800274a:	2360      	movs	r3, #96	; 0x60
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800275a:	230d      	movs	r3, #13
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800275e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002762:	4619      	mov	r1, r3
 8002764:	4817      	ldr	r0, [pc, #92]	; (80027c4 <MX_GPIO_Init+0x2ec>)
 8002766:	f005 fcf9 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800277a:	230a      	movs	r3, #10
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002782:	4619      	mov	r1, r3
 8002784:	4810      	ldr	r0, [pc, #64]	; (80027c8 <MX_GPIO_Init+0x2f0>)
 8002786:	f005 fce9 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279c:	4619      	mov	r1, r3
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_GPIO_Init+0x2fc>)
 80027a0:	f005 fcdc 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80027a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027a8:	e016      	b.n	80027d8 <MX_GPIO_Init+0x300>
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40022800 	.word	0x40022800
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021c00 	.word	0x40021c00
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40022400 	.word	0x40022400
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027e6:	230a      	movs	r3, #10
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ee:	4619      	mov	r1, r3
 80027f0:	48bc      	ldr	r0, [pc, #752]	; (8002ae4 <MX_GPIO_Init+0x60c>)
 80027f2:	f005 fcb3 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80027f6:	23f0      	movs	r3, #240	; 0xf0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002806:	230a      	movs	r3, #10
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800280a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800280e:	4619      	mov	r1, r3
 8002810:	48b5      	ldr	r0, [pc, #724]	; (8002ae8 <MX_GPIO_Init+0x610>)
 8002812:	f005 fca3 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002828:	230a      	movs	r3, #10
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	48ae      	ldr	r0, [pc, #696]	; (8002aec <MX_GPIO_Init+0x614>)
 8002834:	f005 fc92 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002838:	2320      	movs	r3, #32
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	48a8      	ldr	r0, [pc, #672]	; (8002af0 <MX_GPIO_Init+0x618>)
 8002850:	f005 fc84 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002854:	2308      	movs	r3, #8
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002864:	230d      	movs	r3, #13
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286c:	4619      	mov	r1, r3
 800286e:	48a0      	ldr	r0, [pc, #640]	; (8002af0 <MX_GPIO_Init+0x618>)
 8002870:	f005 fc74 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0;
 8002874:	230d      	movs	r3, #13
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002886:	4619      	mov	r1, r3
 8002888:	4897      	ldr	r0, [pc, #604]	; (8002ae8 <MX_GPIO_Init+0x610>)
 800288a:	f005 fc67 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800288e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a0:	4619      	mov	r1, r3
 80028a2:	4894      	ldr	r0, [pc, #592]	; (8002af4 <MX_GPIO_Init+0x61c>)
 80028a4:	f005 fc5a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80028a8:	2308      	movs	r3, #8
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	4619      	mov	r1, r3
 80028be:	488e      	ldr	r0, [pc, #568]	; (8002af8 <MX_GPIO_Init+0x620>)
 80028c0:	f005 fc4c 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80028c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80028d6:	230d      	movs	r3, #13
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	4619      	mov	r1, r3
 80028e0:	4882      	ldr	r0, [pc, #520]	; (8002aec <MX_GPIO_Init+0x614>)
 80028e2:	f005 fc3b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028e6:	2310      	movs	r3, #16
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f6:	4619      	mov	r1, r3
 80028f8:	487d      	ldr	r0, [pc, #500]	; (8002af0 <MX_GPIO_Init+0x618>)
 80028fa:	f005 fc2f 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80028fe:	2304      	movs	r3, #4
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800290e:	230c      	movs	r3, #12
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4875      	ldr	r0, [pc, #468]	; (8002af0 <MX_GPIO_Init+0x618>)
 800291a:	f005 fc1f 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800291e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800292c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002930:	4619      	mov	r1, r3
 8002932:	4872      	ldr	r0, [pc, #456]	; (8002afc <MX_GPIO_Init+0x624>)
 8002934:	f005 fc12 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	2301      	movs	r3, #1
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	4865      	ldr	r0, [pc, #404]	; (8002ae8 <MX_GPIO_Init+0x610>)
 8002952:	f005 fc03 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	4863      	ldr	r0, [pc, #396]	; (8002afc <MX_GPIO_Init+0x624>)
 8002970:	f005 fbf4 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002974:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002986:	230d      	movs	r3, #13
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800298a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298e:	4619      	mov	r1, r3
 8002990:	485a      	ldr	r0, [pc, #360]	; (8002afc <MX_GPIO_Init+0x624>)
 8002992:	f005 fbe3 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b0:	4619      	mov	r1, r3
 80029b2:	484c      	ldr	r0, [pc, #304]	; (8002ae4 <MX_GPIO_Init+0x60c>)
 80029b4:	f005 fbd2 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80029b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4619      	mov	r1, r3
 80029ce:	4846      	ldr	r0, [pc, #280]	; (8002ae8 <MX_GPIO_Init+0x610>)
 80029d0:	f005 fbc4 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80029d4:	23c0      	movs	r3, #192	; 0xc0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029e4:	2308      	movs	r3, #8
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ec:	4619      	mov	r1, r3
 80029ee:	4841      	ldr	r0, [pc, #260]	; (8002af4 <MX_GPIO_Init+0x61c>)
 80029f0:	f005 fbb4 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80029f4:	2310      	movs	r3, #16
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a04:	230a      	movs	r3, #10
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	483b      	ldr	r0, [pc, #236]	; (8002afc <MX_GPIO_Init+0x624>)
 8002a10:	f005 fba4 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002a14:	23c0      	movs	r3, #192	; 0xc0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	4830      	ldr	r0, [pc, #192]	; (8002aec <MX_GPIO_Init+0x614>)
 8002a2a:	f005 fb97 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a2e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a34:	2303      	movs	r3, #3
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a40:	4619      	mov	r1, r3
 8002a42:	482f      	ldr	r0, [pc, #188]	; (8002b00 <MX_GPIO_Init+0x628>)
 8002a44:	f005 fb8a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002a48:	2305      	movs	r3, #5
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a58:	230a      	movs	r3, #10
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a60:	4619      	mov	r1, r3
 8002a62:	4824      	ldr	r0, [pc, #144]	; (8002af4 <MX_GPIO_Init+0x61c>)
 8002a64:	f005 fb7a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a68:	2332      	movs	r3, #50	; 0x32
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a78:	230b      	movs	r3, #11
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a80:	4619      	mov	r1, r3
 8002a82:	481c      	ldr	r0, [pc, #112]	; (8002af4 <MX_GPIO_Init+0x61c>)
 8002a84:	f005 fb6a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a98:	2309      	movs	r3, #9
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4818      	ldr	r0, [pc, #96]	; (8002b04 <MX_GPIO_Init+0x62c>)
 8002aa4:	f005 fb5a 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002aa8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002aba:	2309      	movs	r3, #9
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <MX_GPIO_Init+0x618>)
 8002ac6:	f005 fb49 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002aca:	2308      	movs	r3, #8
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	e012      	b.n	8002b08 <MX_GPIO_Init+0x630>
 8002ae2:	bf00      	nop
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021800 	.word	0x40021800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40022800 	.word	0x40022800
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40020400 	.word	0x40020400
 8002b08:	484f      	ldr	r0, [pc, #316]	; (8002c48 <MX_GPIO_Init+0x770>)
 8002b0a:	f005 fb27 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b12:	2300      	movs	r3, #0
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4849      	ldr	r0, [pc, #292]	; (8002c48 <MX_GPIO_Init+0x770>)
 8002b22:	f005 fb1b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b26:	2386      	movs	r3, #134	; 0x86
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b36:	230b      	movs	r3, #11
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4842      	ldr	r0, [pc, #264]	; (8002c4c <MX_GPIO_Init+0x774>)
 8002b42:	f005 fb0b 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002b46:	2301      	movs	r3, #1
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b56:	4619      	mov	r1, r3
 8002b58:	483c      	ldr	r0, [pc, #240]	; (8002c4c <MX_GPIO_Init+0x774>)
 8002b5a:	f005 faff 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002b5e:	2350      	movs	r3, #80	; 0x50
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b6e:	230d      	movs	r3, #13
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b76:	4619      	mov	r1, r3
 8002b78:	4834      	ldr	r0, [pc, #208]	; (8002c4c <MX_GPIO_Init+0x774>)
 8002b7a:	f005 faef 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b7e:	2328      	movs	r3, #40	; 0x28
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b8e:	230a      	movs	r3, #10
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b96:	4619      	mov	r1, r3
 8002b98:	482c      	ldr	r0, [pc, #176]	; (8002c4c <MX_GPIO_Init+0x774>)
 8002b9a:	f005 fadf 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bae:	2309      	movs	r3, #9
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4825      	ldr	r0, [pc, #148]	; (8002c50 <MX_GPIO_Init+0x778>)
 8002bba:	f005 facf 	bl	800815c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_MISO_D12_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin;
 8002bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_MISO_D12_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	481e      	ldr	r0, [pc, #120]	; (8002c54 <MX_GPIO_Init+0x77c>)
 8002bdc:	f005 fabe 	bl	800815c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2105      	movs	r1, #5
 8002be4:	2006      	movs	r0, #6
 8002be6:	f004 fc4b 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bea:	2006      	movs	r0, #6
 8002bec:	f004 fc64 	bl	80074b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	2008      	movs	r0, #8
 8002bf6:	f004 fc43 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002bfa:	2008      	movs	r0, #8
 8002bfc:	f004 fc5c 	bl	80074b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2105      	movs	r1, #5
 8002c04:	2009      	movs	r0, #9
 8002c06:	f004 fc3b 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c0a:	2009      	movs	r0, #9
 8002c0c:	f004 fc54 	bl	80074b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2105      	movs	r1, #5
 8002c14:	200a      	movs	r0, #10
 8002c16:	f004 fc33 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	f004 fc4c 	bl	80074b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2105      	movs	r1, #5
 8002c24:	2017      	movs	r0, #23
 8002c26:	f004 fc2b 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c2a:	2017      	movs	r0, #23
 8002c2c:	f004 fc44 	bl	80074b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2105      	movs	r1, #5
 8002c34:	2028      	movs	r0, #40	; 0x28
 8002c36:	f004 fc23 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c3a:	2028      	movs	r0, #40	; 0x28
 8002c3c:	f004 fc3c 	bl	80074b8 <HAL_NVIC_EnableIRQ>

}
 8002c40:	bf00      	nop
 8002c42:	3740      	adds	r7, #64	; 0x40
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021800 	.word	0x40021800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40021c00 	.word	0x40021c00
 8002c54:	40020400 	.word	0x40020400

08002c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c6a:	f004 fb0d 	bl	8007288 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40001000 	.word	0x40001000

08002c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <Error_Handler+0x8>
	...

08002c88 <set_menu>:


#include "menu_principal.h"
#include "stm32746g_discovery_lcd.h"

void set_menu(){
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	f5ad 3dff 	sub.w	sp, sp, #130560	; 0x1fe00
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
	int i,j,k=0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	4a84      	ldr	r2, [pc, #528]	; (8002ea8 <set_menu+0x220>)
 8002c96:	443a      	add	r2, r7
 8002c98:	6013      	str	r3, [r2, #0]
	uint32_t color_map[10] = {
 8002c9a:	4b84      	ldr	r3, [pc, #528]	; (8002eac <set_menu+0x224>)
 8002c9c:	4c84      	ldr	r4, [pc, #528]	; (8002eb0 <set_menu+0x228>)
 8002c9e:	443c      	add	r4, r7
 8002ca0:	461d      	mov	r5, r3
 8002ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002caa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cae:	e884 0003 	stmia.w	r4, {r0, r1}
			4285657315,
			4288147181,
			4285857776,
			4294967295
			};
	char image_data[130560] = {
 8002cb2:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <set_menu+0x22c>)
 8002cb4:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <set_menu+0x230>)
 8002cb6:	443a      	add	r2, r7
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <set_menu+0x234>)
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	f44f 33ff 	mov.w	r3, #130560	; 0x1fe00
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f009 fb95 	bl	800c3f4 <memcpy>
				8,8,3,3,3,3,3,3,3,3,3,3,3,3,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				8,8,3,3,3,3,3,3,3,3,3,3,3,3,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	};
	for(j=0;j<480;j++) {
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <set_menu+0x238>)
 8002cce:	443a      	add	r2, r7
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e0da      	b.n	8002e8a <set_menu+0x202>
		 for (i = 271; i >= 0; i--){
 8002cd4:	f240 130f 	movw	r3, #271	; 0x10f
 8002cd8:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <set_menu+0x23c>)
 8002cda:	443a      	add	r2, r7
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e0c7      	b.n	8002e70 <set_menu+0x1e8>
			 switch (image_data[k]) {
 8002ce0:	4b74      	ldr	r3, [pc, #464]	; (8002eb4 <set_menu+0x22c>)
 8002ce2:	4a75      	ldr	r2, [pc, #468]	; (8002eb8 <set_menu+0x230>)
 8002ce4:	443a      	add	r2, r7
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a6f      	ldr	r2, [pc, #444]	; (8002ea8 <set_menu+0x220>)
 8002cea:	443a      	add	r2, r7
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b09      	cmp	r3, #9
 8002cf4:	f200 80ae 	bhi.w	8002e54 <set_menu+0x1cc>
 8002cf8:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <set_menu+0x78>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d29 	.word	0x08002d29
 8002d04:	08002d47 	.word	0x08002d47
 8002d08:	08002d65 	.word	0x08002d65
 8002d0c:	08002d83 	.word	0x08002d83
 8002d10:	08002da1 	.word	0x08002da1
 8002d14:	08002dbf 	.word	0x08002dbf
 8002d18:	08002ddd 	.word	0x08002ddd
 8002d1c:	08002dfb 	.word	0x08002dfb
 8002d20:	08002e19 	.word	0x08002e19
 8002d24:	08002e37 	.word	0x08002e37
				 case 0:
					 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8002d28:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <set_menu+0x238>)
 8002d2a:	443b      	add	r3, r7
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4a64      	ldr	r2, [pc, #400]	; (8002ec4 <set_menu+0x23c>)
 8002d32:	443a      	add	r2, r7
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	b291      	uxth	r1, r2
 8002d38:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <set_menu+0x228>)
 8002d3a:	443a      	add	r2, r7
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fef6 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002d44:	e086      	b.n	8002e54 <set_menu+0x1cc>
				 case 1:
					 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8002d46:	4b5e      	ldr	r3, [pc, #376]	; (8002ec0 <set_menu+0x238>)
 8002d48:	443b      	add	r3, r7
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4a5d      	ldr	r2, [pc, #372]	; (8002ec4 <set_menu+0x23c>)
 8002d50:	443a      	add	r2, r7
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	b291      	uxth	r1, r2
 8002d56:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <set_menu+0x240>)
 8002d58:	443a      	add	r2, r7
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fee7 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002d62:	e077      	b.n	8002e54 <set_menu+0x1cc>
				 case 2:
					 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8002d64:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <set_menu+0x238>)
 8002d66:	443b      	add	r3, r7
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4a55      	ldr	r2, [pc, #340]	; (8002ec4 <set_menu+0x23c>)
 8002d6e:	443a      	add	r2, r7
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	b291      	uxth	r1, r2
 8002d74:	4a55      	ldr	r2, [pc, #340]	; (8002ecc <set_menu+0x244>)
 8002d76:	443a      	add	r2, r7
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fed8 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002d80:	e068      	b.n	8002e54 <set_menu+0x1cc>
				 case 3:
					 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8002d82:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <set_menu+0x238>)
 8002d84:	443b      	add	r3, r7
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4a4e      	ldr	r2, [pc, #312]	; (8002ec4 <set_menu+0x23c>)
 8002d8c:	443a      	add	r2, r7
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	b291      	uxth	r1, r2
 8002d92:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <set_menu+0x248>)
 8002d94:	443a      	add	r2, r7
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fec9 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002d9e:	e059      	b.n	8002e54 <set_menu+0x1cc>
				 case 4:
					 BSP_LCD_DrawPixel(j, i, color_map[4]);
 8002da0:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <set_menu+0x238>)
 8002da2:	443b      	add	r3, r7
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4a46      	ldr	r2, [pc, #280]	; (8002ec4 <set_menu+0x23c>)
 8002daa:	443a      	add	r2, r7
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	b291      	uxth	r1, r2
 8002db0:	4a48      	ldr	r2, [pc, #288]	; (8002ed4 <set_menu+0x24c>)
 8002db2:	443a      	add	r2, r7
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 feba 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002dbc:	e04a      	b.n	8002e54 <set_menu+0x1cc>
				 case 5:
					 BSP_LCD_DrawPixel(j, i, color_map[5]);
 8002dbe:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <set_menu+0x238>)
 8002dc0:	443b      	add	r3, r7
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <set_menu+0x23c>)
 8002dc8:	443a      	add	r2, r7
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	b291      	uxth	r1, r2
 8002dce:	4a42      	ldr	r2, [pc, #264]	; (8002ed8 <set_menu+0x250>)
 8002dd0:	443a      	add	r2, r7
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 feab 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002dda:	e03b      	b.n	8002e54 <set_menu+0x1cc>
				 case 6:
					 BSP_LCD_DrawPixel(j, i, color_map[6]);
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <set_menu+0x238>)
 8002dde:	443b      	add	r3, r7
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <set_menu+0x23c>)
 8002de6:	443a      	add	r2, r7
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	b291      	uxth	r1, r2
 8002dec:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <set_menu+0x254>)
 8002dee:	443a      	add	r2, r7
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fe9c 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002df8:	e02c      	b.n	8002e54 <set_menu+0x1cc>
				 case 7:
					 BSP_LCD_DrawPixel(j, i, color_map[7]);
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <set_menu+0x238>)
 8002dfc:	443b      	add	r3, r7
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <set_menu+0x23c>)
 8002e04:	443a      	add	r2, r7
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	b291      	uxth	r1, r2
 8002e0a:	4a35      	ldr	r2, [pc, #212]	; (8002ee0 <set_menu+0x258>)
 8002e0c:	443a      	add	r2, r7
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fe8d 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002e16:	e01d      	b.n	8002e54 <set_menu+0x1cc>
				 case 8:
					 BSP_LCD_DrawPixel(j, i, color_map[8]);
 8002e18:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <set_menu+0x238>)
 8002e1a:	443b      	add	r3, r7
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <set_menu+0x23c>)
 8002e22:	443a      	add	r2, r7
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	b291      	uxth	r1, r2
 8002e28:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <set_menu+0x25c>)
 8002e2a:	443a      	add	r2, r7
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fe7e 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002e34:	e00e      	b.n	8002e54 <set_menu+0x1cc>
				 case 9:
					 BSP_LCD_DrawPixel(j, i, color_map[9]);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <set_menu+0x238>)
 8002e38:	443b      	add	r3, r7
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <set_menu+0x23c>)
 8002e40:	443a      	add	r2, r7
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	b291      	uxth	r1, r2
 8002e46:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <set_menu+0x260>)
 8002e48:	443a      	add	r2, r7
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fe6f 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8002e52:	bf00      	nop
	         }
			 k++;
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <set_menu+0x220>)
 8002e56:	443b      	add	r3, r7
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <set_menu+0x220>)
 8002e5e:	443a      	add	r2, r7
 8002e60:	6013      	str	r3, [r2, #0]
		 for (i = 271; i >= 0; i--){
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <set_menu+0x23c>)
 8002e64:	443b      	add	r3, r7
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	4a16      	ldr	r2, [pc, #88]	; (8002ec4 <set_menu+0x23c>)
 8002e6c:	443a      	add	r2, r7
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <set_menu+0x23c>)
 8002e72:	443b      	add	r3, r7
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f6bf af32 	bge.w	8002ce0 <set_menu+0x58>
	for(j=0;j<480;j++) {
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <set_menu+0x238>)
 8002e7e:	443b      	add	r3, r7
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <set_menu+0x238>)
 8002e86:	443a      	add	r2, r7
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <set_menu+0x238>)
 8002e8c:	443b      	add	r3, r7
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002e94:	f6ff af1e 	blt.w	8002cd4 <set_menu+0x4c>
		 }
	}
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	f507 37ff 	add.w	r7, r7, #130560	; 0x1fe00
 8002ea0:	3738      	adds	r7, #56	; 0x38
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0001fe2c 	.word	0x0001fe2c
 8002eac:	08073358 	.word	0x08073358
 8002eb0:	0001fe04 	.word	0x0001fe04
 8002eb4:	fffe01cc 	.word	0xfffe01cc
 8002eb8:	0001fe38 	.word	0x0001fe38
 8002ebc:	08073380 	.word	0x08073380
 8002ec0:	0001fe30 	.word	0x0001fe30
 8002ec4:	0001fe34 	.word	0x0001fe34
 8002ec8:	0001fe08 	.word	0x0001fe08
 8002ecc:	0001fe0c 	.word	0x0001fe0c
 8002ed0:	0001fe10 	.word	0x0001fe10
 8002ed4:	0001fe14 	.word	0x0001fe14
 8002ed8:	0001fe18 	.word	0x0001fe18
 8002edc:	0001fe1c 	.word	0x0001fe1c
 8002ee0:	0001fe20 	.word	0x0001fe20
 8002ee4:	0001fe24 	.word	0x0001fe24
 8002ee8:	0001fe28 	.word	0x0001fe28

08002eec <aff_select>:

void aff_select(int select){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	switch(select){
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d017      	beq.n	8002f2a <aff_select+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	dc1b      	bgt.n	8002f38 <aff_select+0x4c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <aff_select+0x22>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d007      	beq.n	8002f1c <aff_select+0x30>
		unselect_jouer();
		unselect_regles();
		select_credits();
		break;
	}
}
 8002f0c:	e014      	b.n	8002f38 <aff_select+0x4c>
		select_jouer();
 8002f0e:	f000 f817 	bl	8002f40 <select_jouer>
		unselect_regles();
 8002f12:	f000 fbb3 	bl	800367c <unselect_regles>
		unselect_credits();
 8002f16:	f000 fccd 	bl	80038b4 <unselect_credits>
		break;
 8002f1a:	e00d      	b.n	8002f38 <aff_select+0x4c>
		unselect_jouer();
 8002f1c:	f000 fa92 	bl	8003444 <unselect_jouer>
		select_regles();
 8002f20:	f000 f8e4 	bl	80030ec <select_regles>
		unselect_credits();
 8002f24:	f000 fcc6 	bl	80038b4 <unselect_credits>
		break;
 8002f28:	e006      	b.n	8002f38 <aff_select+0x4c>
		unselect_jouer();
 8002f2a:	f000 fa8b 	bl	8003444 <unselect_jouer>
		unselect_regles();
 8002f2e:	f000 fba5 	bl	800367c <unselect_regles>
		select_credits();
 8002f32:	f000 f9b1 	bl	8003298 <select_credits>
		break;
 8002f36:	bf00      	nop
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <select_jouer>:

void select_jouer(){
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	f5ad 5da9 	sub.w	sp, sp, #5408	; 0x1520
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
	int i,j,k=0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f241 522c 	movw	r2, #5420	; 0x152c
 8002f50:	443a      	add	r2, r7
 8002f52:	6013      	str	r3, [r2, #0]
		uint32_t color_map[5] = {
 8002f54:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <select_jouer+0x1a0>)
 8002f56:	f241 5418 	movw	r4, #5400	; 0x1518
 8002f5a:	443c      	add	r4, r7
 8002f5c:	461d      	mov	r5, r3
 8002f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f62:	682b      	ldr	r3, [r5, #0]
 8002f64:	6023      	str	r3, [r4, #0]
				4279502345,
				4280424216,
				4292149265,
				4294967295
				};
		char image_data[]={
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <select_jouer+0x1a4>)
 8002f68:	f241 5238 	movw	r2, #5432	; 0x1538
 8002f6c:	443a      	add	r2, r7
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <select_jouer+0x1a8>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	4611      	mov	r1, r2
 8002f76:	f241 5318 	movw	r3, #5400	; 0x1518
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f009 fa3a 	bl	800c3f4 <memcpy>
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0
			};
for(j=138;j<174;j++) {
 8002f80:	238a      	movs	r3, #138	; 0x8a
 8002f82:	f241 5230 	movw	r2, #5424	; 0x1530
 8002f86:	443a      	add	r2, r7
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e09a      	b.n	80030c2 <select_jouer+0x182>
	 for (i = 210; i >= 61; i--){
 8002f8c:	23d2      	movs	r3, #210	; 0xd2
 8002f8e:	f241 5234 	movw	r2, #5428	; 0x1534
 8002f92:	443a      	add	r2, r7
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e084      	b.n	80030a2 <select_jouer+0x162>
		 switch (image_data[k]) {
 8002f98:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <select_jouer+0x1a4>)
 8002f9a:	f241 5238 	movw	r2, #5432	; 0x1538
 8002f9e:	443a      	add	r2, r7
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f241 522c 	movw	r2, #5420	; 0x152c
 8002fa6:	443a      	add	r2, r7
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d865      	bhi.n	800307e <select_jouer+0x13e>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <select_jouer+0x78>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fcd 	.word	0x08002fcd
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08003037 	.word	0x08003037
 8002fc8:	0800305b 	.word	0x0800305b
			 case 0:
				 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8002fcc:	f241 5330 	movw	r3, #5424	; 0x1530
 8002fd0:	443b      	add	r3, r7
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f241 5234 	movw	r2, #5428	; 0x1534
 8002fda:	443a      	add	r2, r7
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	b291      	uxth	r1, r2
 8002fe0:	f241 5218 	movw	r2, #5400	; 0x1518
 8002fe4:	443a      	add	r2, r7
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fda1 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8002fee:	e046      	b.n	800307e <select_jouer+0x13e>
			 case 1:
				 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8002ff0:	f241 5330 	movw	r3, #5424	; 0x1530
 8002ff4:	443b      	add	r3, r7
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f241 5234 	movw	r2, #5428	; 0x1534
 8002ffe:	443a      	add	r2, r7
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	b291      	uxth	r1, r2
 8003004:	f241 521c 	movw	r2, #5404	; 0x151c
 8003008:	443a      	add	r2, r7
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fd8f 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8003012:	e034      	b.n	800307e <select_jouer+0x13e>
			 case 2:
				 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8003014:	f241 5330 	movw	r3, #5424	; 0x1530
 8003018:	443b      	add	r3, r7
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f241 5234 	movw	r2, #5428	; 0x1534
 8003022:	443a      	add	r2, r7
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	b291      	uxth	r1, r2
 8003028:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fd7e 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8003034:	e023      	b.n	800307e <select_jouer+0x13e>
			 case 3:
				 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8003036:	f241 5330 	movw	r3, #5424	; 0x1530
 800303a:	443b      	add	r3, r7
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f241 5234 	movw	r2, #5428	; 0x1534
 8003044:	443a      	add	r2, r7
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	b291      	uxth	r1, r2
 800304a:	f241 5224 	movw	r2, #5412	; 0x1524
 800304e:	443a      	add	r2, r7
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fd6c 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8003058:	e011      	b.n	800307e <select_jouer+0x13e>
			 case 4:
				 BSP_LCD_DrawPixel(j, i, color_map[4]);
 800305a:	f241 5330 	movw	r3, #5424	; 0x1530
 800305e:	443b      	add	r3, r7
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f241 5234 	movw	r2, #5428	; 0x1534
 8003068:	443a      	add	r2, r7
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	b291      	uxth	r1, r2
 800306e:	f241 5228 	movw	r2, #5416	; 0x1528
 8003072:	443a      	add	r2, r7
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fd5a 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 800307c:	bf00      	nop
		 	 }
		 	 k++;
 800307e:	f241 532c 	movw	r3, #5420	; 0x152c
 8003082:	443b      	add	r3, r7
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	f241 522c 	movw	r2, #5420	; 0x152c
 800308c:	443a      	add	r2, r7
 800308e:	6013      	str	r3, [r2, #0]
	 for (i = 210; i >= 61; i--){
 8003090:	f241 5334 	movw	r3, #5428	; 0x1534
 8003094:	443b      	add	r3, r7
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	f241 5234 	movw	r2, #5428	; 0x1534
 800309e:	443a      	add	r2, r7
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	f241 5334 	movw	r3, #5428	; 0x1534
 80030a6:	443b      	add	r3, r7
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b3c      	cmp	r3, #60	; 0x3c
 80030ac:	f73f af74 	bgt.w	8002f98 <select_jouer+0x58>
for(j=138;j<174;j++) {
 80030b0:	f241 5330 	movw	r3, #5424	; 0x1530
 80030b4:	443b      	add	r3, r7
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	f241 5230 	movw	r2, #5424	; 0x1530
 80030be:	443a      	add	r2, r7
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	f241 5330 	movw	r3, #5424	; 0x1530
 80030c6:	443b      	add	r3, r7
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2bad      	cmp	r3, #173	; 0xad
 80030cc:	f77f af5e 	ble.w	8002f8c <select_jouer+0x4c>
	 	 }
	}
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	f507 57a9 	add.w	r7, r7, #5408	; 0x1520
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bdb0      	pop	{r4, r5, r7, pc}
 80030de:	bf00      	nop
 80030e0:	08093180 	.word	0x08093180
 80030e4:	ffffeac8 	.word	0xffffeac8
 80030e8:	08093194 	.word	0x08093194

080030ec <select_regles>:

void select_regles(){
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	f5ad 5da9 	sub.w	sp, sp, #5408	; 0x1520
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
		int i,j,k=0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f241 522c 	movw	r2, #5420	; 0x152c
 80030fc:	443a      	add	r2, r7
 80030fe:	6013      	str	r3, [r2, #0]
		uint32_t color_map[5] = {
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <select_regles+0x1a0>)
 8003102:	f241 5418 	movw	r4, #5400	; 0x1518
 8003106:	443c      	add	r4, r7
 8003108:	461d      	mov	r5, r3
 800310a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310e:	682b      	ldr	r3, [r5, #0]
 8003110:	6023      	str	r3, [r4, #0]
				4279502345,
				4280424216,
				4292149265,
				4294967295
				};
		char image_data[]={
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <select_regles+0x1a4>)
 8003114:	f241 5238 	movw	r2, #5432	; 0x1538
 8003118:	443a      	add	r2, r7
 800311a:	4413      	add	r3, r2
 800311c:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <select_regles+0x1a8>)
 800311e:	4618      	mov	r0, r3
 8003120:	4611      	mov	r1, r2
 8003122:	f241 5318 	movw	r3, #5400	; 0x1518
 8003126:	461a      	mov	r2, r3
 8003128:	f009 f964 	bl	800c3f4 <memcpy>
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0
			};
for(j=176;j<212;j++) {
 800312c:	23b0      	movs	r3, #176	; 0xb0
 800312e:	f241 5230 	movw	r2, #5424	; 0x1530
 8003132:	443a      	add	r2, r7
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e09a      	b.n	800326e <select_regles+0x182>
	 for (i = 210; i >= 61; i--){
 8003138:	23d2      	movs	r3, #210	; 0xd2
 800313a:	f241 5234 	movw	r2, #5428	; 0x1534
 800313e:	443a      	add	r2, r7
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e084      	b.n	800324e <select_regles+0x162>
		 switch (image_data[k]) {
 8003144:	4b52      	ldr	r3, [pc, #328]	; (8003290 <select_regles+0x1a4>)
 8003146:	f241 5238 	movw	r2, #5432	; 0x1538
 800314a:	443a      	add	r2, r7
 800314c:	4413      	add	r3, r2
 800314e:	f241 522c 	movw	r2, #5420	; 0x152c
 8003152:	443a      	add	r2, r7
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d865      	bhi.n	800322a <select_regles+0x13e>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <select_regles+0x78>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003179 	.word	0x08003179
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031c1 	.word	0x080031c1
 8003170:	080031e3 	.word	0x080031e3
 8003174:	08003207 	.word	0x08003207
			 case 0:
				 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8003178:	f241 5330 	movw	r3, #5424	; 0x1530
 800317c:	443b      	add	r3, r7
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f241 5234 	movw	r2, #5428	; 0x1534
 8003186:	443a      	add	r2, r7
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	b291      	uxth	r1, r2
 800318c:	f241 5218 	movw	r2, #5400	; 0x1518
 8003190:	443a      	add	r2, r7
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fccb 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 800319a:	e046      	b.n	800322a <select_regles+0x13e>
			 case 1:
				 BSP_LCD_DrawPixel(j, i, color_map[1]);
 800319c:	f241 5330 	movw	r3, #5424	; 0x1530
 80031a0:	443b      	add	r3, r7
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f241 5234 	movw	r2, #5428	; 0x1534
 80031aa:	443a      	add	r2, r7
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	b291      	uxth	r1, r2
 80031b0:	f241 521c 	movw	r2, #5404	; 0x151c
 80031b4:	443a      	add	r2, r7
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fcb9 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 80031be:	e034      	b.n	800322a <select_regles+0x13e>
			 case 2:
				 BSP_LCD_DrawPixel(j, i, color_map[2]);
 80031c0:	f241 5330 	movw	r3, #5424	; 0x1530
 80031c4:	443b      	add	r3, r7
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f241 5234 	movw	r2, #5428	; 0x1534
 80031ce:	443a      	add	r2, r7
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	b291      	uxth	r1, r2
 80031d4:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fca8 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 80031e0:	e023      	b.n	800322a <select_regles+0x13e>
			 case 3:
				 BSP_LCD_DrawPixel(j, i, color_map[3]);
 80031e2:	f241 5330 	movw	r3, #5424	; 0x1530
 80031e6:	443b      	add	r3, r7
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f241 5234 	movw	r2, #5428	; 0x1534
 80031f0:	443a      	add	r2, r7
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	b291      	uxth	r1, r2
 80031f6:	f241 5224 	movw	r2, #5412	; 0x1524
 80031fa:	443a      	add	r2, r7
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fc96 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8003204:	e011      	b.n	800322a <select_regles+0x13e>
			 case 4:
				 BSP_LCD_DrawPixel(j, i, color_map[4]);
 8003206:	f241 5330 	movw	r3, #5424	; 0x1530
 800320a:	443b      	add	r3, r7
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f241 5234 	movw	r2, #5428	; 0x1534
 8003214:	443a      	add	r2, r7
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	b291      	uxth	r1, r2
 800321a:	f241 5228 	movw	r2, #5416	; 0x1528
 800321e:	443a      	add	r2, r7
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fc84 	bl	8006b30 <BSP_LCD_DrawPixel>
				 break;
 8003228:	bf00      	nop
		 	 }
		 	 k++;
 800322a:	f241 532c 	movw	r3, #5420	; 0x152c
 800322e:	443b      	add	r3, r7
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	f241 522c 	movw	r2, #5420	; 0x152c
 8003238:	443a      	add	r2, r7
 800323a:	6013      	str	r3, [r2, #0]
	 for (i = 210; i >= 61; i--){
 800323c:	f241 5334 	movw	r3, #5428	; 0x1534
 8003240:	443b      	add	r3, r7
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3b01      	subs	r3, #1
 8003246:	f241 5234 	movw	r2, #5428	; 0x1534
 800324a:	443a      	add	r2, r7
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	f241 5334 	movw	r3, #5428	; 0x1534
 8003252:	443b      	add	r3, r7
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b3c      	cmp	r3, #60	; 0x3c
 8003258:	f73f af74 	bgt.w	8003144 <select_regles+0x58>
for(j=176;j<212;j++) {
 800325c:	f241 5330 	movw	r3, #5424	; 0x1530
 8003260:	443b      	add	r3, r7
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	f241 5230 	movw	r2, #5424	; 0x1530
 800326a:	443a      	add	r2, r7
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	f241 5330 	movw	r3, #5424	; 0x1530
 8003272:	443b      	add	r3, r7
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2bd3      	cmp	r3, #211	; 0xd3
 8003278:	f77f af5e 	ble.w	8003138 <select_regles+0x4c>
	 	 }
	}
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	f507 57a9 	add.w	r7, r7, #5408	; 0x1520
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bdb0      	pop	{r4, r5, r7, pc}
 800328a:	bf00      	nop
 800328c:	08093180 	.word	0x08093180
 8003290:	ffffeac8 	.word	0xffffeac8
 8003294:	080946ac 	.word	0x080946ac

08003298 <select_credits>:

void select_credits(){
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	f5ad 5da9 	sub.w	sp, sp, #5408	; 0x1520
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
	int i,j,k=0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f241 522c 	movw	r2, #5420	; 0x152c
 80032a8:	443a      	add	r2, r7
 80032aa:	6013      	str	r3, [r2, #0]
			uint32_t color_map[5] = {
 80032ac:	4b62      	ldr	r3, [pc, #392]	; (8003438 <select_credits+0x1a0>)
 80032ae:	f241 5418 	movw	r4, #5400	; 0x1518
 80032b2:	443c      	add	r4, r7
 80032b4:	461d      	mov	r5, r3
 80032b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	6023      	str	r3, [r4, #0]
					4279502345,
					4280424216,
					4292149265,
					4294967295
					};
			char image_data[]={
 80032be:	4b5f      	ldr	r3, [pc, #380]	; (800343c <select_credits+0x1a4>)
 80032c0:	f241 5238 	movw	r2, #5432	; 0x1538
 80032c4:	443a      	add	r2, r7
 80032c6:	4413      	add	r3, r2
 80032c8:	4a5d      	ldr	r2, [pc, #372]	; (8003440 <select_credits+0x1a8>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	4611      	mov	r1, r2
 80032ce:	f241 5318 	movw	r3, #5400	; 0x1518
 80032d2:	461a      	mov	r2, r3
 80032d4:	f009 f88e 	bl	800c3f4 <memcpy>
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
						0,0,0,0,0,0
				};
	for(j=214;j<250;j++) {
 80032d8:	23d6      	movs	r3, #214	; 0xd6
 80032da:	f241 5230 	movw	r2, #5424	; 0x1530
 80032de:	443a      	add	r2, r7
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e09a      	b.n	800341a <select_credits+0x182>
		 for (i = 210; i >= 61; i--){
 80032e4:	23d2      	movs	r3, #210	; 0xd2
 80032e6:	f241 5234 	movw	r2, #5428	; 0x1534
 80032ea:	443a      	add	r2, r7
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e084      	b.n	80033fa <select_credits+0x162>
			 switch (image_data[k]) {
 80032f0:	4b52      	ldr	r3, [pc, #328]	; (800343c <select_credits+0x1a4>)
 80032f2:	f241 5238 	movw	r2, #5432	; 0x1538
 80032f6:	443a      	add	r2, r7
 80032f8:	4413      	add	r3, r2
 80032fa:	f241 522c 	movw	r2, #5420	; 0x152c
 80032fe:	443a      	add	r2, r7
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d865      	bhi.n	80033d6 <select_credits+0x13e>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <select_credits+0x78>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003325 	.word	0x08003325
 8003314:	08003349 	.word	0x08003349
 8003318:	0800336d 	.word	0x0800336d
 800331c:	0800338f 	.word	0x0800338f
 8003320:	080033b3 	.word	0x080033b3
				 case 0:
					 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8003324:	f241 5330 	movw	r3, #5424	; 0x1530
 8003328:	443b      	add	r3, r7
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f241 5234 	movw	r2, #5428	; 0x1534
 8003332:	443a      	add	r2, r7
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	b291      	uxth	r1, r2
 8003338:	f241 5218 	movw	r2, #5400	; 0x1518
 800333c:	443a      	add	r2, r7
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fbf5 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003346:	e046      	b.n	80033d6 <select_credits+0x13e>
				 case 1:
					 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8003348:	f241 5330 	movw	r3, #5424	; 0x1530
 800334c:	443b      	add	r3, r7
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f241 5234 	movw	r2, #5428	; 0x1534
 8003356:	443a      	add	r2, r7
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	b291      	uxth	r1, r2
 800335c:	f241 521c 	movw	r2, #5404	; 0x151c
 8003360:	443a      	add	r2, r7
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fbe3 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800336a:	e034      	b.n	80033d6 <select_credits+0x13e>
				 case 2:
					 BSP_LCD_DrawPixel(j, i, color_map[2]);
 800336c:	f241 5330 	movw	r3, #5424	; 0x1530
 8003370:	443b      	add	r3, r7
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f241 5234 	movw	r2, #5428	; 0x1534
 800337a:	443a      	add	r2, r7
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	b291      	uxth	r1, r2
 8003380:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fbd2 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800338c:	e023      	b.n	80033d6 <select_credits+0x13e>
				 case 3:
					 BSP_LCD_DrawPixel(j, i, color_map[3]);
 800338e:	f241 5330 	movw	r3, #5424	; 0x1530
 8003392:	443b      	add	r3, r7
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f241 5234 	movw	r2, #5428	; 0x1534
 800339c:	443a      	add	r2, r7
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	b291      	uxth	r1, r2
 80033a2:	f241 5224 	movw	r2, #5412	; 0x1524
 80033a6:	443a      	add	r2, r7
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fbc0 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80033b0:	e011      	b.n	80033d6 <select_credits+0x13e>
				 case 4:
					 BSP_LCD_DrawPixel(j, i, color_map[4]);
 80033b2:	f241 5330 	movw	r3, #5424	; 0x1530
 80033b6:	443b      	add	r3, r7
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f241 5234 	movw	r2, #5428	; 0x1534
 80033c0:	443a      	add	r2, r7
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	b291      	uxth	r1, r2
 80033c6:	f241 5228 	movw	r2, #5416	; 0x1528
 80033ca:	443a      	add	r2, r7
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fbae 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80033d4:	bf00      	nop
			 	 }
			 	 k++;
 80033d6:	f241 532c 	movw	r3, #5420	; 0x152c
 80033da:	443b      	add	r3, r7
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	f241 522c 	movw	r2, #5420	; 0x152c
 80033e4:	443a      	add	r2, r7
 80033e6:	6013      	str	r3, [r2, #0]
		 for (i = 210; i >= 61; i--){
 80033e8:	f241 5334 	movw	r3, #5428	; 0x1534
 80033ec:	443b      	add	r3, r7
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	f241 5234 	movw	r2, #5428	; 0x1534
 80033f6:	443a      	add	r2, r7
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	f241 5334 	movw	r3, #5428	; 0x1534
 80033fe:	443b      	add	r3, r7
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b3c      	cmp	r3, #60	; 0x3c
 8003404:	f73f af74 	bgt.w	80032f0 <select_credits+0x58>
	for(j=214;j<250;j++) {
 8003408:	f241 5330 	movw	r3, #5424	; 0x1530
 800340c:	443b      	add	r3, r7
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	f241 5230 	movw	r2, #5424	; 0x1530
 8003416:	443a      	add	r2, r7
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	f241 5330 	movw	r3, #5424	; 0x1530
 800341e:	443b      	add	r3, r7
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2bf9      	cmp	r3, #249	; 0xf9
 8003424:	f77f af5e 	ble.w	80032e4 <select_credits+0x4c>
		 	 }
		}
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	f507 57a9 	add.w	r7, r7, #5408	; 0x1520
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bdb0      	pop	{r4, r5, r7, pc}
 8003436:	bf00      	nop
 8003438:	08093180 	.word	0x08093180
 800343c:	ffffeac8 	.word	0xffffeac8
 8003440:	08095bc4 	.word	0x08095bc4

08003444 <unselect_jouer>:

void unselect_jouer(){
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	f5ad 5daa 	sub.w	sp, sp, #5440	; 0x1540
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
	int i,j,k=0;
 800344e:	2300      	movs	r3, #0
 8003450:	f241 523c 	movw	r2, #5436	; 0x153c
 8003454:	443a      	add	r2, r7
 8003456:	6013      	str	r3, [r2, #0]
	uint32_t color_map[9] = {
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <unselect_jouer+0x22c>)
 800345a:	f241 5418 	movw	r4, #5400	; 0x1518
 800345e:	443c      	add	r4, r7
 8003460:	461d      	mov	r5, r3
 8003462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346a:	682b      	ldr	r3, [r5, #0]
 800346c:	6023      	str	r3, [r4, #0]
			4286874756,
			4288343532,
			4294967295
	};

	char image_data[]={
 800346e:	4b81      	ldr	r3, [pc, #516]	; (8003674 <unselect_jouer+0x230>)
 8003470:	f241 5248 	movw	r2, #5448	; 0x1548
 8003474:	443a      	add	r2, r7
 8003476:	4413      	add	r3, r2
 8003478:	4a7f      	ldr	r2, [pc, #508]	; (8003678 <unselect_jouer+0x234>)
 800347a:	4618      	mov	r0, r3
 800347c:	4611      	mov	r1, r2
 800347e:	f241 5318 	movw	r3, #5400	; 0x1518
 8003482:	461a      	mov	r2, r3
 8003484:	f008 ffb6 	bl	800c3f4 <memcpy>
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0
	};
	for(j=138;j<174;j++) {
 8003488:	238a      	movs	r3, #138	; 0x8a
 800348a:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e0e0      	b.n	8003654 <unselect_jouer+0x210>
	 	 for (i = 210; i >= 61; i--){
 8003492:	23d2      	movs	r3, #210	; 0xd2
 8003494:	f241 5244 	movw	r2, #5444	; 0x1544
 8003498:	443a      	add	r2, r7
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e0cc      	b.n	8003638 <unselect_jouer+0x1f4>
		 	 switch (image_data[k]) {
 800349e:	4b75      	ldr	r3, [pc, #468]	; (8003674 <unselect_jouer+0x230>)
 80034a0:	f241 5248 	movw	r2, #5448	; 0x1548
 80034a4:	443a      	add	r2, r7
 80034a6:	4413      	add	r3, r2
 80034a8:	f241 523c 	movw	r2, #5436	; 0x153c
 80034ac:	443a      	add	r2, r7
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	f200 80ad 	bhi.w	8003614 <unselect_jouer+0x1d0>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <unselect_jouer+0x7c>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	08003507 	.word	0x08003507
 80034c8:	08003529 	.word	0x08003529
 80034cc:	08003549 	.word	0x08003549
 80034d0:	0800356b 	.word	0x0800356b
 80034d4:	0800358d 	.word	0x0800358d
 80034d8:	080035af 	.word	0x080035af
 80034dc:	080035d1 	.word	0x080035d1
 80034e0:	080035f3 	.word	0x080035f3
			 	 case 0:
				 	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 80034e4:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f241 5244 	movw	r2, #5444	; 0x1544
 80034f0:	443a      	add	r2, r7
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	b291      	uxth	r1, r2
 80034f6:	f241 5218 	movw	r2, #5400	; 0x1518
 80034fa:	443a      	add	r2, r7
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fb16 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003504:	e086      	b.n	8003614 <unselect_jouer+0x1d0>
			 	 case 1:
				 	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8003506:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f241 5244 	movw	r2, #5444	; 0x1544
 8003512:	443a      	add	r2, r7
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	b291      	uxth	r1, r2
 8003518:	f241 521c 	movw	r2, #5404	; 0x151c
 800351c:	443a      	add	r2, r7
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fb05 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003526:	e075      	b.n	8003614 <unselect_jouer+0x1d0>
			 	 case 2:
				 	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8003528:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f241 5244 	movw	r2, #5444	; 0x1544
 8003534:	443a      	add	r2, r7
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	b291      	uxth	r1, r2
 800353a:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 faf5 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003546:	e065      	b.n	8003614 <unselect_jouer+0x1d0>
			 	 case 3:
				 	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8003548:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f241 5244 	movw	r2, #5444	; 0x1544
 8003554:	443a      	add	r2, r7
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	b291      	uxth	r1, r2
 800355a:	f241 5224 	movw	r2, #5412	; 0x1524
 800355e:	443a      	add	r2, r7
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f003 fae4 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003568:	e054      	b.n	8003614 <unselect_jouer+0x1d0>
			 	 case 4:
				 	 BSP_LCD_DrawPixel(j, i, color_map[4]);
 800356a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f241 5244 	movw	r2, #5444	; 0x1544
 8003576:	443a      	add	r2, r7
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	b291      	uxth	r1, r2
 800357c:	f241 5228 	movw	r2, #5416	; 0x1528
 8003580:	443a      	add	r2, r7
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f003 fad3 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 800358a:	e043      	b.n	8003614 <unselect_jouer+0x1d0>
				 case 5:
					 BSP_LCD_DrawPixel(j, i, color_map[5]);
 800358c:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f241 5244 	movw	r2, #5444	; 0x1544
 8003598:	443a      	add	r2, r7
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	b291      	uxth	r1, r2
 800359e:	f241 522c 	movw	r2, #5420	; 0x152c
 80035a2:	443a      	add	r2, r7
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 fac2 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80035ac:	e032      	b.n	8003614 <unselect_jouer+0x1d0>
				 case 6:
					 BSP_LCD_DrawPixel(j, i, color_map[6]);
 80035ae:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f241 5244 	movw	r2, #5444	; 0x1544
 80035ba:	443a      	add	r2, r7
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	b291      	uxth	r1, r2
 80035c0:	f241 5230 	movw	r2, #5424	; 0x1530
 80035c4:	443a      	add	r2, r7
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fab1 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80035ce:	e021      	b.n	8003614 <unselect_jouer+0x1d0>
				 case 7:
					 BSP_LCD_DrawPixel(j, i, color_map[7]);
 80035d0:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f241 5244 	movw	r2, #5444	; 0x1544
 80035dc:	443a      	add	r2, r7
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	b291      	uxth	r1, r2
 80035e2:	f241 5234 	movw	r2, #5428	; 0x1534
 80035e6:	443a      	add	r2, r7
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f003 faa0 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80035f0:	e010      	b.n	8003614 <unselect_jouer+0x1d0>
				 case 8:
					 BSP_LCD_DrawPixel(j, i, color_map[8]);
 80035f2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f241 5244 	movw	r2, #5444	; 0x1544
 80035fe:	443a      	add	r2, r7
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	b291      	uxth	r1, r2
 8003604:	f241 5238 	movw	r2, #5432	; 0x1538
 8003608:	443a      	add	r2, r7
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fa8f 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003612:	bf00      	nop
		 	 	 }
		 	 k++;
 8003614:	f241 533c 	movw	r3, #5436	; 0x153c
 8003618:	443b      	add	r3, r7
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	f241 523c 	movw	r2, #5436	; 0x153c
 8003622:	443a      	add	r2, r7
 8003624:	6013      	str	r3, [r2, #0]
	 	 for (i = 210; i >= 61; i--){
 8003626:	f241 5344 	movw	r3, #5444	; 0x1544
 800362a:	443b      	add	r3, r7
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	f241 5244 	movw	r2, #5444	; 0x1544
 8003634:	443a      	add	r2, r7
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	f241 5344 	movw	r3, #5444	; 0x1544
 800363c:	443b      	add	r3, r7
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b3c      	cmp	r3, #60	; 0x3c
 8003642:	f73f af2c 	bgt.w	800349e <unselect_jouer+0x5a>
	for(j=138;j<174;j++) {
 8003646:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2bad      	cmp	r3, #173	; 0xad
 800365c:	f77f af19 	ble.w	8003492 <unselect_jouer+0x4e>
	 	 }
	}


}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	f507 57aa 	add.w	r7, r7, #5440	; 0x1540
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bdb0      	pop	{r4, r5, r7, pc}
 800366e:	bf00      	nop
 8003670:	080970dc 	.word	0x080970dc
 8003674:	ffffeab8 	.word	0xffffeab8
 8003678:	08097100 	.word	0x08097100

0800367c <unselect_regles>:

void unselect_regles(){
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	f5ad 5daa 	sub.w	sp, sp, #5440	; 0x1540
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
	int i,j,k=0;
 8003686:	2300      	movs	r3, #0
 8003688:	f241 523c 	movw	r2, #5436	; 0x153c
 800368c:	443a      	add	r2, r7
 800368e:	6013      	str	r3, [r2, #0]
	uint32_t color_map[9] = {
 8003690:	4b85      	ldr	r3, [pc, #532]	; (80038a8 <unselect_regles+0x22c>)
 8003692:	f241 5418 	movw	r4, #5400	; 0x1518
 8003696:	443c      	add	r4, r7
 8003698:	461d      	mov	r5, r3
 800369a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800369c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800369e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	6023      	str	r3, [r4, #0]
			4286874756,
			4288343532,
			4294967295
	};

	char image_data[]={
 80036a6:	4b81      	ldr	r3, [pc, #516]	; (80038ac <unselect_regles+0x230>)
 80036a8:	f241 5248 	movw	r2, #5448	; 0x1548
 80036ac:	443a      	add	r2, r7
 80036ae:	4413      	add	r3, r2
 80036b0:	4a7f      	ldr	r2, [pc, #508]	; (80038b0 <unselect_regles+0x234>)
 80036b2:	4618      	mov	r0, r3
 80036b4:	4611      	mov	r1, r2
 80036b6:	f241 5318 	movw	r3, #5400	; 0x1518
 80036ba:	461a      	mov	r2, r3
 80036bc:	f008 fe9a 	bl	800c3f4 <memcpy>
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0
	};
	for(j=176;j<212;j++) {
 80036c0:	23b0      	movs	r3, #176	; 0xb0
 80036c2:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e0e0      	b.n	800388c <unselect_regles+0x210>
	 	 for (i = 210; i >= 61; i--){
 80036ca:	23d2      	movs	r3, #210	; 0xd2
 80036cc:	f241 5244 	movw	r2, #5444	; 0x1544
 80036d0:	443a      	add	r2, r7
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e0cc      	b.n	8003870 <unselect_regles+0x1f4>
		 	 switch (image_data[k]) {
 80036d6:	4b75      	ldr	r3, [pc, #468]	; (80038ac <unselect_regles+0x230>)
 80036d8:	f241 5248 	movw	r2, #5448	; 0x1548
 80036dc:	443a      	add	r2, r7
 80036de:	4413      	add	r3, r2
 80036e0:	f241 523c 	movw	r2, #5436	; 0x153c
 80036e4:	443a      	add	r2, r7
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80ad 	bhi.w	800384c <unselect_regles+0x1d0>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <unselect_regles+0x7c>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	0800373f 	.word	0x0800373f
 8003700:	08003761 	.word	0x08003761
 8003704:	08003781 	.word	0x08003781
 8003708:	080037a3 	.word	0x080037a3
 800370c:	080037c5 	.word	0x080037c5
 8003710:	080037e7 	.word	0x080037e7
 8003714:	08003809 	.word	0x08003809
 8003718:	0800382b 	.word	0x0800382b
			 	 case 0:
				 	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 800371c:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f241 5244 	movw	r2, #5444	; 0x1544
 8003728:	443a      	add	r2, r7
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	b291      	uxth	r1, r2
 800372e:	f241 5218 	movw	r2, #5400	; 0x1518
 8003732:	443a      	add	r2, r7
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 f9fa 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 800373c:	e086      	b.n	800384c <unselect_regles+0x1d0>
			 	 case 1:
				 	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 800373e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f241 5244 	movw	r2, #5444	; 0x1544
 800374a:	443a      	add	r2, r7
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	b291      	uxth	r1, r2
 8003750:	f241 521c 	movw	r2, #5404	; 0x151c
 8003754:	443a      	add	r2, r7
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f003 f9e9 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 800375e:	e075      	b.n	800384c <unselect_regles+0x1d0>
			 	 case 2:
				 	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8003760:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f241 5244 	movw	r2, #5444	; 0x1544
 800376c:	443a      	add	r2, r7
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	b291      	uxth	r1, r2
 8003772:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 f9d9 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 800377e:	e065      	b.n	800384c <unselect_regles+0x1d0>
			 	 case 3:
				 	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 8003780:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	f241 5244 	movw	r2, #5444	; 0x1544
 800378c:	443a      	add	r2, r7
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	b291      	uxth	r1, r2
 8003792:	f241 5224 	movw	r2, #5412	; 0x1524
 8003796:	443a      	add	r2, r7
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f003 f9c8 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 80037a0:	e054      	b.n	800384c <unselect_regles+0x1d0>
			 	 case 4:
				 	 BSP_LCD_DrawPixel(j, i, color_map[4]);
 80037a2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f241 5244 	movw	r2, #5444	; 0x1544
 80037ae:	443a      	add	r2, r7
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	b291      	uxth	r1, r2
 80037b4:	f241 5228 	movw	r2, #5416	; 0x1528
 80037b8:	443a      	add	r2, r7
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 f9b7 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 80037c2:	e043      	b.n	800384c <unselect_regles+0x1d0>
				 case 5:
					 BSP_LCD_DrawPixel(j, i, color_map[5]);
 80037c4:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f241 5244 	movw	r2, #5444	; 0x1544
 80037d0:	443a      	add	r2, r7
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	b291      	uxth	r1, r2
 80037d6:	f241 522c 	movw	r2, #5420	; 0x152c
 80037da:	443a      	add	r2, r7
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 f9a6 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80037e4:	e032      	b.n	800384c <unselect_regles+0x1d0>
				 case 6:
					 BSP_LCD_DrawPixel(j, i, color_map[6]);
 80037e6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f241 5244 	movw	r2, #5444	; 0x1544
 80037f2:	443a      	add	r2, r7
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	b291      	uxth	r1, r2
 80037f8:	f241 5230 	movw	r2, #5424	; 0x1530
 80037fc:	443a      	add	r2, r7
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 f995 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003806:	e021      	b.n	800384c <unselect_regles+0x1d0>
				 case 7:
					 BSP_LCD_DrawPixel(j, i, color_map[7]);
 8003808:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f241 5244 	movw	r2, #5444	; 0x1544
 8003814:	443a      	add	r2, r7
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	b291      	uxth	r1, r2
 800381a:	f241 5234 	movw	r2, #5428	; 0x1534
 800381e:	443a      	add	r2, r7
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 f984 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003828:	e010      	b.n	800384c <unselect_regles+0x1d0>
				 case 8:
					 BSP_LCD_DrawPixel(j, i, color_map[8]);
 800382a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f241 5244 	movw	r2, #5444	; 0x1544
 8003836:	443a      	add	r2, r7
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	b291      	uxth	r1, r2
 800383c:	f241 5238 	movw	r2, #5432	; 0x1538
 8003840:	443a      	add	r2, r7
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 f973 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800384a:	bf00      	nop
		 	 	 }
		 	 k++;
 800384c:	f241 533c 	movw	r3, #5436	; 0x153c
 8003850:	443b      	add	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	f241 523c 	movw	r2, #5436	; 0x153c
 800385a:	443a      	add	r2, r7
 800385c:	6013      	str	r3, [r2, #0]
	 	 for (i = 210; i >= 61; i--){
 800385e:	f241 5344 	movw	r3, #5444	; 0x1544
 8003862:	443b      	add	r3, r7
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	f241 5244 	movw	r2, #5444	; 0x1544
 800386c:	443a      	add	r2, r7
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	f241 5344 	movw	r3, #5444	; 0x1544
 8003874:	443b      	add	r3, r7
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b3c      	cmp	r3, #60	; 0x3c
 800387a:	f73f af2c 	bgt.w	80036d6 <unselect_regles+0x5a>
	for(j=176;j<212;j++) {
 800387e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2bd3      	cmp	r3, #211	; 0xd3
 8003894:	f77f af19 	ble.w	80036ca <unselect_regles+0x4e>
	 	 }
	}

}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	f507 57aa 	add.w	r7, r7, #5440	; 0x1540
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	080970dc 	.word	0x080970dc
 80038ac:	ffffeab8 	.word	0xffffeab8
 80038b0:	08098618 	.word	0x08098618

080038b4 <unselect_credits>:

void unselect_credits(){
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	f5ad 5daa 	sub.w	sp, sp, #5440	; 0x1540
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
	int i,j,k=0;
 80038be:	2300      	movs	r3, #0
 80038c0:	f241 523c 	movw	r2, #5436	; 0x153c
 80038c4:	443a      	add	r2, r7
 80038c6:	6013      	str	r3, [r2, #0]
	uint32_t color_map[9] = {
 80038c8:	4b85      	ldr	r3, [pc, #532]	; (8003ae0 <unselect_credits+0x22c>)
 80038ca:	f241 5418 	movw	r4, #5400	; 0x1518
 80038ce:	443c      	add	r4, r7
 80038d0:	461d      	mov	r5, r3
 80038d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	6023      	str	r3, [r4, #0]
			4286874756,
			4288343532,
			4294967295
	};

	char image_data[]={
 80038de:	4b81      	ldr	r3, [pc, #516]	; (8003ae4 <unselect_credits+0x230>)
 80038e0:	f241 5248 	movw	r2, #5448	; 0x1548
 80038e4:	443a      	add	r2, r7
 80038e6:	4413      	add	r3, r2
 80038e8:	4a7f      	ldr	r2, [pc, #508]	; (8003ae8 <unselect_credits+0x234>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	4611      	mov	r1, r2
 80038ee:	f241 5318 	movw	r3, #5400	; 0x1518
 80038f2:	461a      	mov	r2, r3
 80038f4:	f008 fd7e 	bl	800c3f4 <memcpy>
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0
	};
	for(j=214;j<250;j++) {
 80038f8:	23d6      	movs	r3, #214	; 0xd6
 80038fa:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e0e0      	b.n	8003ac4 <unselect_credits+0x210>
	 	 for (i = 210; i >= 61; i--){
 8003902:	23d2      	movs	r3, #210	; 0xd2
 8003904:	f241 5244 	movw	r2, #5444	; 0x1544
 8003908:	443a      	add	r2, r7
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e0cc      	b.n	8003aa8 <unselect_credits+0x1f4>
		 	 switch (image_data[k]) {
 800390e:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <unselect_credits+0x230>)
 8003910:	f241 5248 	movw	r2, #5448	; 0x1548
 8003914:	443a      	add	r2, r7
 8003916:	4413      	add	r3, r2
 8003918:	f241 523c 	movw	r2, #5436	; 0x153c
 800391c:	443a      	add	r2, r7
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	f200 80ad 	bhi.w	8003a84 <unselect_credits+0x1d0>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <unselect_credits+0x7c>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003955 	.word	0x08003955
 8003934:	08003977 	.word	0x08003977
 8003938:	08003999 	.word	0x08003999
 800393c:	080039b9 	.word	0x080039b9
 8003940:	080039db 	.word	0x080039db
 8003944:	080039fd 	.word	0x080039fd
 8003948:	08003a1f 	.word	0x08003a1f
 800394c:	08003a41 	.word	0x08003a41
 8003950:	08003a63 	.word	0x08003a63
			 	 case 0:
				 	 BSP_LCD_DrawPixel(j, i, color_map[0]);
 8003954:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f241 5244 	movw	r2, #5444	; 0x1544
 8003960:	443a      	add	r2, r7
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	b291      	uxth	r1, r2
 8003966:	f241 5218 	movw	r2, #5400	; 0x1518
 800396a:	443a      	add	r2, r7
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 f8de 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003974:	e086      	b.n	8003a84 <unselect_credits+0x1d0>
			 	 case 1:
				 	 BSP_LCD_DrawPixel(j, i, color_map[1]);
 8003976:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f241 5244 	movw	r2, #5444	; 0x1544
 8003982:	443a      	add	r2, r7
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	b291      	uxth	r1, r2
 8003988:	f241 521c 	movw	r2, #5404	; 0x151c
 800398c:	443a      	add	r2, r7
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 f8cd 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 8003996:	e075      	b.n	8003a84 <unselect_credits+0x1d0>
			 	 case 2:
				 	 BSP_LCD_DrawPixel(j, i, color_map[2]);
 8003998:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f241 5244 	movw	r2, #5444	; 0x1544
 80039a4:	443a      	add	r2, r7
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	b291      	uxth	r1, r2
 80039aa:	f507 52a9 	add.w	r2, r7, #5408	; 0x1520
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 f8bd 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 80039b6:	e065      	b.n	8003a84 <unselect_credits+0x1d0>
			 	 case 3:
				 	 BSP_LCD_DrawPixel(j, i, color_map[3]);
 80039b8:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f241 5244 	movw	r2, #5444	; 0x1544
 80039c4:	443a      	add	r2, r7
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	b291      	uxth	r1, r2
 80039ca:	f241 5224 	movw	r2, #5412	; 0x1524
 80039ce:	443a      	add	r2, r7
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 f8ac 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 80039d8:	e054      	b.n	8003a84 <unselect_credits+0x1d0>
			 	 case 4:
				 	 BSP_LCD_DrawPixel(j, i, color_map[4]);
 80039da:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f241 5244 	movw	r2, #5444	; 0x1544
 80039e6:	443a      	add	r2, r7
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	b291      	uxth	r1, r2
 80039ec:	f241 5228 	movw	r2, #5416	; 0x1528
 80039f0:	443a      	add	r2, r7
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 f89b 	bl	8006b30 <BSP_LCD_DrawPixel>
				 	 break;
 80039fa:	e043      	b.n	8003a84 <unselect_credits+0x1d0>
				 case 5:
					 BSP_LCD_DrawPixel(j, i, color_map[5]);
 80039fc:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f241 5244 	movw	r2, #5444	; 0x1544
 8003a08:	443a      	add	r2, r7
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	b291      	uxth	r1, r2
 8003a0e:	f241 522c 	movw	r2, #5420	; 0x152c
 8003a12:	443a      	add	r2, r7
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 f88a 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003a1c:	e032      	b.n	8003a84 <unselect_credits+0x1d0>
				 case 6:
					 BSP_LCD_DrawPixel(j, i, color_map[6]);
 8003a1e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f241 5244 	movw	r2, #5444	; 0x1544
 8003a2a:	443a      	add	r2, r7
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	b291      	uxth	r1, r2
 8003a30:	f241 5230 	movw	r2, #5424	; 0x1530
 8003a34:	443a      	add	r2, r7
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 f879 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003a3e:	e021      	b.n	8003a84 <unselect_credits+0x1d0>
				 case 7:
					 BSP_LCD_DrawPixel(j, i, color_map[7]);
 8003a40:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f241 5244 	movw	r2, #5444	; 0x1544
 8003a4c:	443a      	add	r2, r7
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	b291      	uxth	r1, r2
 8003a52:	f241 5234 	movw	r2, #5428	; 0x1534
 8003a56:	443a      	add	r2, r7
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 f868 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003a60:	e010      	b.n	8003a84 <unselect_credits+0x1d0>
				 case 8:
					 BSP_LCD_DrawPixel(j, i, color_map[8]);
 8003a62:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f241 5244 	movw	r2, #5444	; 0x1544
 8003a6e:	443a      	add	r2, r7
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	b291      	uxth	r1, r2
 8003a74:	f241 5238 	movw	r2, #5432	; 0x1538
 8003a78:	443a      	add	r2, r7
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 f857 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003a82:	bf00      	nop
		 	 	 }
		 	 k++;
 8003a84:	f241 533c 	movw	r3, #5436	; 0x153c
 8003a88:	443b      	add	r3, r7
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f241 523c 	movw	r2, #5436	; 0x153c
 8003a92:	443a      	add	r2, r7
 8003a94:	6013      	str	r3, [r2, #0]
	 	 for (i = 210; i >= 61; i--){
 8003a96:	f241 5344 	movw	r3, #5444	; 0x1544
 8003a9a:	443b      	add	r3, r7
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f241 5244 	movw	r2, #5444	; 0x1544
 8003aa4:	443a      	add	r2, r7
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	f241 5344 	movw	r3, #5444	; 0x1544
 8003aac:	443b      	add	r3, r7
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b3c      	cmp	r3, #60	; 0x3c
 8003ab2:	f73f af2c 	bgt.w	800390e <unselect_credits+0x5a>
	for(j=214;j<250;j++) {
 8003ab6:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2bf9      	cmp	r3, #249	; 0xf9
 8003acc:	f77f af19 	ble.w	8003902 <unselect_credits+0x4e>
	 	 }
	}

}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	f507 57aa 	add.w	r7, r7, #5440	; 0x1540
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	080970dc 	.word	0x080970dc
 8003ae4:	ffffeab8 	.word	0xffffeab8
 8003ae8:	08099b30 	.word	0x08099b30

08003aec <disp0_18pt>:
#include <stdio.h>
#include "stm32746g_discovery_lcd.h"



void disp0_18pt(int X, int Y){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b09c      	sub	sp, #112	; 0x70
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003af6:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <disp0_18pt+0xc0>)
 8003af8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b00:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003b04:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <disp0_18pt+0xc4>)
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	2250      	movs	r2, #80	; 0x50
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f008 fc70 	bl	800c3f4 <memcpy>
			1,1,1,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			0,1,1,1,1,1,0,0,
			0,1,1,1,1,1,0,0
	};
	int i,j,k=0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003b18:	2300      	movs	r3, #0
 8003b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b1c:	e03e      	b.n	8003b9c <disp0_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003b1e:	2307      	movs	r3, #7
 8003b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b22:	e035      	b.n	8003b90 <disp0_18pt+0xa4>
				 switch (piece_data[k]) {
 8003b24:	f107 020c 	add.w	r2, r7, #12
 8003b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <disp0_18pt+0x4c>
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d013      	beq.n	8003b5e <disp0_18pt+0x72>
 8003b36:	e025      	b.n	8003b84 <disp0_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	b298      	uxth	r0, r3
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	330a      	adds	r3, #10
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b56:	4619      	mov	r1, r3
 8003b58:	f002 ffea 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003b5c:	e012      	b.n	8003b84 <disp0_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	b298      	uxth	r0, r3
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	330a      	adds	r3, #10
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f002 ffd7 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003b82:	bf00      	nop
			 }
				 k++;
 8003b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b86:	3301      	adds	r3, #1
 8003b88:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dac6      	bge.n	8003b24 <disp0_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b98:	3301      	adds	r3, #1
 8003b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	ddbd      	ble.n	8003b1e <disp0_18pt+0x32>
		 }
	}
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	3770      	adds	r7, #112	; 0x70
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0809b048 	.word	0x0809b048
 8003bb0:	0809b050 	.word	0x0809b050

08003bb4 <disp1_18pt>:

void disp1_18pt(int X, int Y){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b09c      	sub	sp, #112	; 0x70
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003bbe:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <disp1_18pt+0xc0>)
 8003bc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc8:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003bcc:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <disp1_18pt+0xc4>)
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	2250      	movs	r2, #80	; 0x50
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f008 fc0c 	bl	800c3f4 <memcpy>
			0,0,0,1,1,1,0,0,
			0,0,0,1,1,1,0,0,
			0,0,0,1,1,1,0,0
		};

	int i,j,k=0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be4:	e03e      	b.n	8003c64 <disp1_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003be6:	2307      	movs	r3, #7
 8003be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bea:	e035      	b.n	8003c58 <disp1_18pt+0xa4>
			 switch (piece_data[k]) {
 8003bec:	f107 020c 	add.w	r2, r7, #12
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <disp1_18pt+0x4c>
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d013      	beq.n	8003c26 <disp1_18pt+0x72>
 8003bfe:	e025      	b.n	8003c4c <disp1_18pt+0x98>
				  case 0:
					 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	b298      	uxth	r0, r3
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	330a      	adds	r3, #10
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f002 ff86 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8003c24:	e012      	b.n	8003c4c <disp1_18pt+0x98>
				  case 1:
					  BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	b298      	uxth	r0, r3
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	330a      	adds	r3, #10
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c44:	4619      	mov	r1, r3
 8003c46:	f002 ff73 	bl	8006b30 <BSP_LCD_DrawPixel>
					  break;
 8003c4a:	bf00      	nop
			 	 }
			 k++;
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4e:	3301      	adds	r3, #1
 8003c50:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c54:	3b01      	subs	r3, #1
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	dac6      	bge.n	8003bec <disp1_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c60:	3301      	adds	r3, #1
 8003c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	ddbd      	ble.n	8003be6 <disp1_18pt+0x32>
		 }
	 }
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	3770      	adds	r7, #112	; 0x70
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	0809b048 	.word	0x0809b048
 8003c78:	0809b0a0 	.word	0x0809b0a0

08003c7c <disp2_18pt>:

void disp2_18pt(int X, int Y){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b09c      	sub	sp, #112	; 0x70
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003c86:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <disp2_18pt+0xc0>)
 8003c88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c90:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <disp2_18pt+0xc4>)
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	2250      	movs	r2, #80	; 0x50
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f008 fba8 	bl	800c3f4 <memcpy>
			0,0,1,1,1,0,0,0,
			0,1,1,1,0,0,0,0,
			1,1,1,1,1,1,1,0,
			1,1,1,1,1,1,1,0
	};
	int i,j,k=0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cac:	e03e      	b.n	8003d2c <disp2_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003cae:	2307      	movs	r3, #7
 8003cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb2:	e035      	b.n	8003d20 <disp2_18pt+0xa4>
				 switch (piece_data[k]) {
 8003cb4:	f107 020c 	add.w	r2, r7, #12
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <disp2_18pt+0x4c>
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d013      	beq.n	8003cee <disp2_18pt+0x72>
 8003cc6:	e025      	b.n	8003d14 <disp2_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	330a      	adds	r3, #10
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f002 ff22 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003cec:	e012      	b.n	8003d14 <disp2_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b298      	uxth	r0, r3
 8003cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	330a      	adds	r3, #10
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f002 ff0f 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003d12:	bf00      	nop
			 }
				 k++;
 8003d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d16:	3301      	adds	r3, #1
 8003d18:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	dac6      	bge.n	8003cb4 <disp2_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d28:	3301      	adds	r3, #1
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2e:	2b09      	cmp	r3, #9
 8003d30:	ddbd      	ble.n	8003cae <disp2_18pt+0x32>
		 }
	}
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	3770      	adds	r7, #112	; 0x70
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	0809b048 	.word	0x0809b048
 8003d40:	0809b0f0 	.word	0x0809b0f0

08003d44 <disp3_18pt>:

void disp3_18pt(int X, int Y){
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b09c      	sub	sp, #112	; 0x70
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003d4e:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <disp3_18pt+0xc0>)
 8003d50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d58:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <disp3_18pt+0xc4>)
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	4611      	mov	r1, r2
 8003d64:	2250      	movs	r2, #80	; 0x50
 8003d66:	4618      	mov	r0, r3
 8003d68:	f008 fb44 	bl	800c3f4 <memcpy>
			0,0,0,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			1,1,1,1,1,1,0,0,
			0,1,1,1,1,0,0,0
	};
	int i,j,k=0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003d70:	2300      	movs	r3, #0
 8003d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d74:	e03e      	b.n	8003df4 <disp3_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003d76:	2307      	movs	r3, #7
 8003d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7a:	e035      	b.n	8003de8 <disp3_18pt+0xa4>
				 switch (piece_data[k]) {
 8003d7c:	f107 020c 	add.w	r2, r7, #12
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	4413      	add	r3, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <disp3_18pt+0x4c>
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d013      	beq.n	8003db6 <disp3_18pt+0x72>
 8003d8e:	e025      	b.n	8003ddc <disp3_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	b298      	uxth	r0, r3
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	330a      	adds	r3, #10
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dae:	4619      	mov	r1, r3
 8003db0:	f002 febe 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003db4:	e012      	b.n	8003ddc <disp3_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b298      	uxth	r0, r3
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	330a      	adds	r3, #10
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f002 feab 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003dda:	bf00      	nop
			 }
				 k++;
 8003ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dde:	3301      	adds	r3, #1
 8003de0:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	3b01      	subs	r3, #1
 8003de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dac6      	bge.n	8003d7c <disp3_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df0:	3301      	adds	r3, #1
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df6:	2b09      	cmp	r3, #9
 8003df8:	ddbd      	ble.n	8003d76 <disp3_18pt+0x32>
		 }
	}
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	3770      	adds	r7, #112	; 0x70
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	0809b048 	.word	0x0809b048
 8003e08:	0809b140 	.word	0x0809b140

08003e0c <disp4_18pt>:

void disp4_18pt(int X, int Y){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b09c      	sub	sp, #112	; 0x70
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <disp4_18pt+0xc0>)
 8003e18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e20:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003e24:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <disp4_18pt+0xc4>)
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	2250      	movs	r2, #80	; 0x50
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 fae0 	bl	800c3f4 <memcpy>
			1,1,1,1,1,1,1,0,
			1,1,1,1,1,1,1,0,
			0,0,0,0,0,1,1,0,
			0,0,0,0,0,1,1,0
	};
	int i,j,k=0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003e38:	2300      	movs	r3, #0
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3c:	e03e      	b.n	8003ebc <disp4_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003e3e:	2307      	movs	r3, #7
 8003e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e42:	e035      	b.n	8003eb0 <disp4_18pt+0xa4>
				 switch (piece_data[k]) {
 8003e44:	f107 020c 	add.w	r2, r7, #12
 8003e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <disp4_18pt+0x4c>
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d013      	beq.n	8003e7e <disp4_18pt+0x72>
 8003e56:	e025      	b.n	8003ea4 <disp4_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	b298      	uxth	r0, r3
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	330a      	adds	r3, #10
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e76:	4619      	mov	r1, r3
 8003e78:	f002 fe5a 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003e7c:	e012      	b.n	8003ea4 <disp4_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	b298      	uxth	r0, r3
 8003e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	330a      	adds	r3, #10
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f002 fe47 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003ea2:	bf00      	nop
			 }
				 k++;
 8003ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	3b01      	subs	r3, #1
 8003eae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	dac6      	bge.n	8003e44 <disp4_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb8:	3301      	adds	r3, #1
 8003eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	ddbd      	ble.n	8003e3e <disp4_18pt+0x32>
		 }
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3770      	adds	r7, #112	; 0x70
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0809b048 	.word	0x0809b048
 8003ed0:	0809b190 	.word	0x0809b190

08003ed4 <disp5_18pt>:

void disp5_18pt(int X, int Y){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b09c      	sub	sp, #112	; 0x70
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003ede:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <disp5_18pt+0xc0>)
 8003ee0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee8:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <disp5_18pt+0xc4>)
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	2250      	movs	r2, #80	; 0x50
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f008 fa7c 	bl	800c3f4 <memcpy>
			0,0,0,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			1,1,1,1,1,1,0,0,
			0,1,1,1,1,0,0,0
	};
	int i,j,k=0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003f00:	2300      	movs	r3, #0
 8003f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f04:	e03e      	b.n	8003f84 <disp5_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003f06:	2307      	movs	r3, #7
 8003f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f0a:	e035      	b.n	8003f78 <disp5_18pt+0xa4>
				 switch (piece_data[k]) {
 8003f0c:	f107 020c 	add.w	r2, r7, #12
 8003f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <disp5_18pt+0x4c>
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d013      	beq.n	8003f46 <disp5_18pt+0x72>
 8003f1e:	e025      	b.n	8003f6c <disp5_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	b298      	uxth	r0, r3
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	330a      	adds	r3, #10
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f002 fdf6 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003f44:	e012      	b.n	8003f6c <disp5_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8003f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	b298      	uxth	r0, r3
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	330a      	adds	r3, #10
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f64:	4619      	mov	r1, r3
 8003f66:	f002 fde3 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8003f6a:	bf00      	nop
			 }
				 k++;
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6e:	3301      	adds	r3, #1
 8003f70:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8003f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f74:	3b01      	subs	r3, #1
 8003f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	dac6      	bge.n	8003f0c <disp5_18pt+0x38>
	 for(j=0;j<10;j++) {
 8003f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f80:	3301      	adds	r3, #1
 8003f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f86:	2b09      	cmp	r3, #9
 8003f88:	ddbd      	ble.n	8003f06 <disp5_18pt+0x32>
		 }
	}
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	3770      	adds	r7, #112	; 0x70
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	0809b048 	.word	0x0809b048
 8003f98:	0809b1e0 	.word	0x0809b1e0

08003f9c <disp6_18pt>:

void disp6_18pt(int X, int Y){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b09c      	sub	sp, #112	; 0x70
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <disp6_18pt+0xc0>)
 8003fa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fb0:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <disp6_18pt+0xc4>)
 8003fb6:	f107 030c 	add.w	r3, r7, #12
 8003fba:	4611      	mov	r1, r2
 8003fbc:	2250      	movs	r2, #80	; 0x50
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f008 fa18 	bl	800c3f4 <memcpy>
			1,1,1,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			0,1,1,1,1,1,1,0,
			0,0,1,1,1,1,0,0
	};
	int i,j,k=0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8003fc8:	2300      	movs	r3, #0
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fcc:	e03e      	b.n	800404c <disp6_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8003fce:	2307      	movs	r3, #7
 8003fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd2:	e035      	b.n	8004040 <disp6_18pt+0xa4>
				 switch (piece_data[k]) {
 8003fd4:	f107 020c 	add.w	r2, r7, #12
 8003fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <disp6_18pt+0x4c>
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d013      	beq.n	800400e <disp6_18pt+0x72>
 8003fe6:	e025      	b.n	8004034 <disp6_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8003fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b298      	uxth	r0, r3
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	330a      	adds	r3, #10
 8004002:	b29b      	uxth	r3, r3
 8004004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004006:	4619      	mov	r1, r3
 8004008:	f002 fd92 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800400c:	e012      	b.n	8004034 <disp6_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 800400e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004010:	b29a      	uxth	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	4413      	add	r3, r2
 8004018:	b298      	uxth	r0, r3
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	b29b      	uxth	r3, r3
 8004022:	4413      	add	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	330a      	adds	r3, #10
 8004028:	b29b      	uxth	r3, r3
 800402a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800402c:	4619      	mov	r1, r3
 800402e:	f002 fd7f 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004032:	bf00      	nop
			 }
				 k++;
 8004034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004036:	3301      	adds	r3, #1
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	3b01      	subs	r3, #1
 800403e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	2b00      	cmp	r3, #0
 8004044:	dac6      	bge.n	8003fd4 <disp6_18pt+0x38>
	 for(j=0;j<10;j++) {
 8004046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004048:	3301      	adds	r3, #1
 800404a:	66bb      	str	r3, [r7, #104]	; 0x68
 800404c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800404e:	2b09      	cmp	r3, #9
 8004050:	ddbd      	ble.n	8003fce <disp6_18pt+0x32>
		 }
	}
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	3770      	adds	r7, #112	; 0x70
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	0809b048 	.word	0x0809b048
 8004060:	0809b230 	.word	0x0809b230

08004064 <disp7_18pt>:

void disp7_18pt(int X, int Y){
 8004064:	b580      	push	{r7, lr}
 8004066:	b09c      	sub	sp, #112	; 0x70
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 800406e:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <disp7_18pt+0xc0>)
 8004070:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004078:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 800407c:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <disp7_18pt+0xc4>)
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	4611      	mov	r1, r2
 8004084:	2250      	movs	r2, #80	; 0x50
 8004086:	4618      	mov	r0, r3
 8004088:	f008 f9b4 	bl	800c3f4 <memcpy>
			0,0,1,1,1,0,0,0,
			0,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0
	};
	int i,j,k=0;
 800408c:	2300      	movs	r3, #0
 800408e:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8004090:	2300      	movs	r3, #0
 8004092:	66bb      	str	r3, [r7, #104]	; 0x68
 8004094:	e03e      	b.n	8004114 <disp7_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8004096:	2307      	movs	r3, #7
 8004098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800409a:	e035      	b.n	8004108 <disp7_18pt+0xa4>
				 switch (piece_data[k]) {
 800409c:	f107 020c 	add.w	r2, r7, #12
 80040a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <disp7_18pt+0x4c>
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d013      	beq.n	80040d6 <disp7_18pt+0x72>
 80040ae:	e025      	b.n	80040fc <disp7_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 80040b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b298      	uxth	r0, r3
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	330a      	adds	r3, #10
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ce:	4619      	mov	r1, r3
 80040d0:	f002 fd2e 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80040d4:	e012      	b.n	80040fc <disp7_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 80040d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d8:	b29a      	uxth	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4413      	add	r3, r2
 80040e0:	b298      	uxth	r0, r3
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	330a      	adds	r3, #10
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040f4:	4619      	mov	r1, r3
 80040f6:	f002 fd1b 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80040fa:	bf00      	nop
			 }
				 k++;
 80040fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fe:	3301      	adds	r3, #1
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8004102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004104:	3b01      	subs	r3, #1
 8004106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	2b00      	cmp	r3, #0
 800410c:	dac6      	bge.n	800409c <disp7_18pt+0x38>
	 for(j=0;j<10;j++) {
 800410e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004110:	3301      	adds	r3, #1
 8004112:	66bb      	str	r3, [r7, #104]	; 0x68
 8004114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004116:	2b09      	cmp	r3, #9
 8004118:	ddbd      	ble.n	8004096 <disp7_18pt+0x32>
		 }
	}
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	3770      	adds	r7, #112	; 0x70
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0809b048 	.word	0x0809b048
 8004128:	0809b280 	.word	0x0809b280

0800412c <disp8_18pt>:

void disp8_18pt(int X, int Y){
 800412c:	b580      	push	{r7, lr}
 800412e:	b09c      	sub	sp, #112	; 0x70
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004136:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <disp8_18pt+0xc0>)
 8004138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800413c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004140:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <disp8_18pt+0xc4>)
 8004146:	f107 030c 	add.w	r3, r7, #12
 800414a:	4611      	mov	r1, r2
 800414c:	2250      	movs	r2, #80	; 0x50
 800414e:	4618      	mov	r0, r3
 8004150:	f008 f950 	bl	800c3f4 <memcpy>
			1,1,1,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			1,1,1,1,1,1,1,0,
			0,1,1,1,1,1,0,0
	};
	int i,j,k=0;
 8004154:	2300      	movs	r3, #0
 8004156:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8004158:	2300      	movs	r3, #0
 800415a:	66bb      	str	r3, [r7, #104]	; 0x68
 800415c:	e03e      	b.n	80041dc <disp8_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 800415e:	2307      	movs	r3, #7
 8004160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004162:	e035      	b.n	80041d0 <disp8_18pt+0xa4>
				 switch (piece_data[k]) {
 8004164:	f107 020c 	add.w	r2, r7, #12
 8004168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <disp8_18pt+0x4c>
 8004172:	2b01      	cmp	r3, #1
 8004174:	d013      	beq.n	800419e <disp8_18pt+0x72>
 8004176:	e025      	b.n	80041c4 <disp8_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8004178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417a:	b29a      	uxth	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	4413      	add	r3, r2
 8004182:	b298      	uxth	r0, r3
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	b29b      	uxth	r3, r3
 800418c:	4413      	add	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	330a      	adds	r3, #10
 8004192:	b29b      	uxth	r3, r3
 8004194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004196:	4619      	mov	r1, r3
 8004198:	f002 fcca 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800419c:	e012      	b.n	80041c4 <disp8_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 800419e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	b298      	uxth	r0, r3
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	330a      	adds	r3, #10
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041bc:	4619      	mov	r1, r3
 80041be:	f002 fcb7 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80041c2:	bf00      	nop
			 }
				 k++;
 80041c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c6:	3301      	adds	r3, #1
 80041c8:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	3b01      	subs	r3, #1
 80041ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dac6      	bge.n	8004164 <disp8_18pt+0x38>
	 for(j=0;j<10;j++) {
 80041d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d8:	3301      	adds	r3, #1
 80041da:	66bb      	str	r3, [r7, #104]	; 0x68
 80041dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041de:	2b09      	cmp	r3, #9
 80041e0:	ddbd      	ble.n	800415e <disp8_18pt+0x32>
		 }
	}
}
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	3770      	adds	r7, #112	; 0x70
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	0809b048 	.word	0x0809b048
 80041f0:	0809b2d0 	.word	0x0809b2d0

080041f4 <disp9_18pt>:

void disp9_18pt(int X, int Y){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b09c      	sub	sp, #112	; 0x70
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 80041fe:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <disp9_18pt+0xc0>)
 8004200:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004208:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 800420c:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <disp9_18pt+0xc4>)
 800420e:	f107 030c 	add.w	r3, r7, #12
 8004212:	4611      	mov	r1, r2
 8004214:	2250      	movs	r2, #80	; 0x50
 8004216:	4618      	mov	r0, r3
 8004218:	f008 f8ec 	bl	800c3f4 <memcpy>
			0,0,0,0,1,1,1,0,
			1,1,1,0,1,1,1,0,
			1,1,1,1,1,1,0,0,
			0,1,1,1,1,0,0,0
	};
	int i,j,k=0;
 800421c:	2300      	movs	r3, #0
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 8004220:	2300      	movs	r3, #0
 8004222:	66bb      	str	r3, [r7, #104]	; 0x68
 8004224:	e03e      	b.n	80042a4 <disp9_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 8004226:	2307      	movs	r3, #7
 8004228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800422a:	e035      	b.n	8004298 <disp9_18pt+0xa4>
				 switch (piece_data[k]) {
 800422c:	f107 020c 	add.w	r2, r7, #12
 8004230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <disp9_18pt+0x4c>
 800423a:	2b01      	cmp	r3, #1
 800423c:	d013      	beq.n	8004266 <disp9_18pt+0x72>
 800423e:	e025      	b.n	800428c <disp9_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8004240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004242:	b29a      	uxth	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	4413      	add	r3, r2
 800424a:	b298      	uxth	r0, r3
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b29b      	uxth	r3, r3
 8004254:	4413      	add	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	330a      	adds	r3, #10
 800425a:	b29b      	uxth	r3, r3
 800425c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800425e:	4619      	mov	r1, r3
 8004260:	f002 fc66 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004264:	e012      	b.n	800428c <disp9_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 8004266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004268:	b29a      	uxth	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	4413      	add	r3, r2
 8004270:	b298      	uxth	r0, r3
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	b29b      	uxth	r3, r3
 800427a:	4413      	add	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	330a      	adds	r3, #10
 8004280:	b29b      	uxth	r3, r3
 8004282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004284:	4619      	mov	r1, r3
 8004286:	f002 fc53 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800428a:	bf00      	nop
			 }
				 k++;
 800428c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800428e:	3301      	adds	r3, #1
 8004290:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	3b01      	subs	r3, #1
 8004296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	2b00      	cmp	r3, #0
 800429c:	dac6      	bge.n	800422c <disp9_18pt+0x38>
	 for(j=0;j<10;j++) {
 800429e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042a0:	3301      	adds	r3, #1
 80042a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042a6:	2b09      	cmp	r3, #9
 80042a8:	ddbd      	ble.n	8004226 <disp9_18pt+0x32>
		 }
	}
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	3770      	adds	r7, #112	; 0x70
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	0809b048 	.word	0x0809b048
 80042b8:	0809b320 	.word	0x0809b320

080042bc <dispPoint_18pt>:

void dispPoint_18pt(int X, int Y){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b09c      	sub	sp, #112	; 0x70
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 80042c6:	4a2d      	ldr	r2, [pc, #180]	; (800437c <dispPoint_18pt+0xc0>)
 80042c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042d0:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};

	char piece_data[] = {
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <dispPoint_18pt+0xc4>)
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	4611      	mov	r1, r2
 80042dc:	2250      	movs	r2, #80	; 0x50
 80042de:	4618      	mov	r0, r3
 80042e0:	f008 f888 	bl	800c3f4 <memcpy>
			0,0,0,0,0,0,0,0,
			0,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0,
			0,1,1,1,0,0,0,0
	};
	int i,j,k=0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	667b      	str	r3, [r7, #100]	; 0x64
	 for(j=0;j<10;j++) {
 80042e8:	2300      	movs	r3, #0
 80042ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ec:	e03e      	b.n	800436c <dispPoint_18pt+0xb0>
		 for (i = 7; i >= 0; i--) {
 80042ee:	2307      	movs	r3, #7
 80042f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042f2:	e035      	b.n	8004360 <dispPoint_18pt+0xa4>
				 switch (piece_data[k]) {
 80042f4:	f107 020c 	add.w	r2, r7, #12
 80042f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <dispPoint_18pt+0x4c>
 8004302:	2b01      	cmp	r3, #1
 8004304:	d013      	beq.n	800432e <dispPoint_18pt+0x72>
 8004306:	e025      	b.n	8004354 <dispPoint_18pt+0x98>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[0]);
 8004308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800430a:	b29a      	uxth	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	4413      	add	r3, r2
 8004312:	b298      	uxth	r0, r3
 8004314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	b29b      	uxth	r3, r3
 800431c:	4413      	add	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	330a      	adds	r3, #10
 8004322:	b29b      	uxth	r3, r3
 8004324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004326:	4619      	mov	r1, r3
 8004328:	f002 fc02 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800432c:	e012      	b.n	8004354 <dispPoint_18pt+0x98>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+10, color_map1[1]);
 800432e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004330:	b29a      	uxth	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	4413      	add	r3, r2
 8004338:	b298      	uxth	r0, r3
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	b29b      	uxth	r3, r3
 8004342:	4413      	add	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	330a      	adds	r3, #10
 8004348:	b29b      	uxth	r3, r3
 800434a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800434c:	4619      	mov	r1, r3
 800434e:	f002 fbef 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004352:	bf00      	nop
			 }
				 k++;
 8004354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004356:	3301      	adds	r3, #1
 8004358:	667b      	str	r3, [r7, #100]	; 0x64
		 for (i = 7; i >= 0; i--) {
 800435a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435c:	3b01      	subs	r3, #1
 800435e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	2b00      	cmp	r3, #0
 8004364:	dac6      	bge.n	80042f4 <dispPoint_18pt+0x38>
	 for(j=0;j<10;j++) {
 8004366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004368:	3301      	adds	r3, #1
 800436a:	66bb      	str	r3, [r7, #104]	; 0x68
 800436c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436e:	2b09      	cmp	r3, #9
 8004370:	ddbd      	ble.n	80042ee <dispPoint_18pt+0x32>
		 }
	}
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	3770      	adds	r7, #112	; 0x70
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	0809b048 	.word	0x0809b048
 8004380:	0809b370 	.word	0x0809b370

08004384 <DispScoreList>:

void DispScoreList(int number, int row){
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
	int tab[7]={0,0,0,10,0,0,0};
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	230a      	movs	r3, #10
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	2300      	movs	r3, #0
 80043a8:	623b      	str	r3, [r7, #32]
	int i=6;
 80043aa:	2306      	movs	r3, #6
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
	if(number>=1000000){
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a86      	ldr	r2, [pc, #536]	; (80045cc <DispScoreList+0x248>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	dd2e      	ble.n	8004414 <DispScoreList+0x90>
		number=999999;
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <DispScoreList+0x248>)
 80043b8:	607b      	str	r3, [r7, #4]
	}
	while (number!=0)
 80043ba:	e02b      	b.n	8004414 <DispScoreList+0x90>
	    {
	        tab[i]=number%10;
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4b84      	ldr	r3, [pc, #528]	; (80045d0 <DispScoreList+0x24c>)
 80043c0:	fb83 2301 	smull	r2, r3, r3, r1
 80043c4:	109a      	asrs	r2, r3, #2
 80043c6:	17cb      	asrs	r3, r1, #31
 80043c8:	1ad2      	subs	r2, r2, r3
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	1aca      	subs	r2, r1, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043dc:	440b      	add	r3, r1
 80043de:	f843 2c20 	str.w	r2, [r3, #-32]
	        number=number/10;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a7a      	ldr	r2, [pc, #488]	; (80045d0 <DispScoreList+0x24c>)
 80043e6:	fb82 1203 	smull	r1, r2, r2, r3
 80043ea:	1092      	asrs	r2, r2, #2
 80043ec:	17db      	asrs	r3, r3, #31
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	607b      	str	r3, [r7, #4]
	        i--;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	3b01      	subs	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
	        if(i==3){
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d10a      	bne.n	8004414 <DispScoreList+0x90>
	        	tab[i]=10;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004406:	4413      	add	r3, r2
 8004408:	220a      	movs	r2, #10
 800440a:	f843 2c20 	str.w	r2, [r3, #-32]
	        	i--;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	3b01      	subs	r3, #1
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
	while (number!=0)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1d0      	bne.n	80043bc <DispScoreList+0x38>
	        }
	    }
	for (i=0;i<7;i++){
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e0cb      	b.n	80045b8 <DispScoreList+0x234>
		switch(tab[i]){
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004428:	4413      	add	r3, r2
 800442a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800442e:	2b0a      	cmp	r3, #10
 8004430:	f200 80bf 	bhi.w	80045b2 <DispScoreList+0x22e>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <DispScoreList+0xb8>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004469 	.word	0x08004469
 8004440:	08004487 	.word	0x08004487
 8004444:	080044a5 	.word	0x080044a5
 8004448:	080044c3 	.word	0x080044c3
 800444c:	080044e1 	.word	0x080044e1
 8004450:	080044ff 	.word	0x080044ff
 8004454:	0800451d 	.word	0x0800451d
 8004458:	0800453b 	.word	0x0800453b
 800445c:	08004559 	.word	0x08004559
 8004460:	08004577 	.word	0x08004577
 8004464:	08004595 	.word	0x08004595
			case 0:
				disp0_18pt(139-i*8,325+row*26);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	211a      	movs	r1, #26
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	f203 1345 	addw	r3, r3, #325	; 0x145
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7ff fb34 	bl	8003aec <disp0_18pt>
				break;
 8004484:	e095      	b.n	80045b2 <DispScoreList+0x22e>
			case 1:
				disp1_18pt(139-i*8,325+row*26);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	211a      	movs	r1, #26
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	f203 1345 	addw	r3, r3, #325	; 0x145
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7ff fb89 	bl	8003bb4 <disp1_18pt>
				break;
 80044a2:	e086      	b.n	80045b2 <DispScoreList+0x22e>
			case 2:
				disp2_18pt(139-i*8,325+row*26);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	211a      	movs	r1, #26
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	f203 1345 	addw	r3, r3, #325	; 0x145
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f7ff fbde 	bl	8003c7c <disp2_18pt>
				break;
 80044c0:	e077      	b.n	80045b2 <DispScoreList+0x22e>
			case 3:
				disp3_18pt(139-i*8,325+row*26);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	211a      	movs	r1, #26
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	f203 1345 	addw	r3, r3, #325	; 0x145
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7ff fc33 	bl	8003d44 <disp3_18pt>
				break;
 80044de:	e068      	b.n	80045b2 <DispScoreList+0x22e>
			case 4:
				disp4_18pt(139-i*8,325+row*26);
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	211a      	movs	r1, #26
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	f203 1345 	addw	r3, r3, #325	; 0x145
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7ff fc88 	bl	8003e0c <disp4_18pt>
				break;
 80044fc:	e059      	b.n	80045b2 <DispScoreList+0x22e>
			case 5:
				disp5_18pt(139-i*8,325+row*26);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	211a      	movs	r1, #26
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	f203 1345 	addw	r3, r3, #325	; 0x145
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fcdd 	bl	8003ed4 <disp5_18pt>
				break;
 800451a:	e04a      	b.n	80045b2 <DispScoreList+0x22e>
			case 6:
				disp6_18pt(139-i*8,325+row*26);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	211a      	movs	r1, #26
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	f203 1345 	addw	r3, r3, #325	; 0x145
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff fd32 	bl	8003f9c <disp6_18pt>
				break;
 8004538:	e03b      	b.n	80045b2 <DispScoreList+0x22e>
			case 7:
				disp7_18pt(139-i*8,325+row*26);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	211a      	movs	r1, #26
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	f203 1345 	addw	r3, r3, #325	; 0x145
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7ff fd87 	bl	8004064 <disp7_18pt>
				break;
 8004556:	e02c      	b.n	80045b2 <DispScoreList+0x22e>
			case 8:
				disp8_18pt(139-i*8,325+row*26);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	211a      	movs	r1, #26
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	f203 1345 	addw	r3, r3, #325	; 0x145
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7ff fddc 	bl	800412c <disp8_18pt>
				break;
 8004574:	e01d      	b.n	80045b2 <DispScoreList+0x22e>
			case 9:
				disp9_18pt(139-i*8,325+row*26);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	211a      	movs	r1, #26
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	f203 1345 	addw	r3, r3, #325	; 0x145
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7ff fe31 	bl	80041f4 <disp9_18pt>
				break;
 8004592:	e00e      	b.n	80045b2 <DispScoreList+0x22e>
			case 10:
				dispPoint_18pt(139-i*8,325+row*26);
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	f1c3 028b 	rsb	r2, r3, #139	; 0x8b
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	211a      	movs	r1, #26
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	f203 1345 	addw	r3, r3, #325	; 0x145
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7ff fe86 	bl	80042bc <dispPoint_18pt>
				break;
 80045b0:	bf00      	nop
	for (i=0;i<7;i++){
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	3301      	adds	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	f77f af30 	ble.w	8004420 <DispScoreList+0x9c>
		}
	}
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3728      	adds	r7, #40	; 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	000f423f 	.word	0x000f423f
 80045d0:	66666667 	.word	0x66666667

080045d4 <disp0_10pt>:

void DispLevel(int level){

}

void disp0_10pt(int X, int Y){
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 80045de:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <disp0_10pt+0xc4>)
 80045e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045e8:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <disp0_10pt+0xc8>)
 80045ee:	f107 0408 	add.w	r4, r7, #8
 80045f2:	461d      	mov	r5, r3
 80045f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045fc:	c403      	stmia	r4!, {r0, r1}
 80045fe:	7022      	strb	r2, [r4, #0]
			1,1,0,1,0,
			1,1,0,1,0,
			1,1,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004604:	2300      	movs	r3, #0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
 8004608:	e03e      	b.n	8004688 <disp0_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 800460a:	2304      	movs	r3, #4
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
 800460e:	e035      	b.n	800467c <disp0_10pt+0xa8>
				 switch (piece_data[k]) {
 8004610:	f107 0208 	add.w	r2, r7, #8
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	4413      	add	r3, r2
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <disp0_10pt+0x50>
 800461e:	2b01      	cmp	r3, #1
 8004620:	d013      	beq.n	800464a <disp0_10pt+0x76>
 8004622:	e025      	b.n	8004670 <disp0_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	b29a      	uxth	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	4413      	add	r3, r2
 800462e:	b298      	uxth	r0, r3
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4413      	add	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	3305      	adds	r3, #5
 800463e:	b29b      	uxth	r3, r3
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	4619      	mov	r1, r3
 8004644:	f002 fa74 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004648:	e012      	b.n	8004670 <disp0_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	b29a      	uxth	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	4413      	add	r3, r2
 8004654:	b298      	uxth	r0, r3
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4413      	add	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	3305      	adds	r3, #5
 8004664:	b29b      	uxth	r3, r3
 8004666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004668:	4619      	mov	r1, r3
 800466a:	f002 fa61 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800466e:	bf00      	nop
			 }
				 k++;
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	3301      	adds	r3, #1
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	3b01      	subs	r3, #1
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	2b00      	cmp	r3, #0
 8004680:	dac6      	bge.n	8004610 <disp0_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	3301      	adds	r3, #1
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2b04      	cmp	r3, #4
 800468c:	ddbd      	ble.n	800460a <disp0_10pt+0x36>
		 }
	}
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	3738      	adds	r7, #56	; 0x38
 8004694:	46bd      	mov	sp, r7
 8004696:	bdb0      	pop	{r4, r5, r7, pc}
 8004698:	0809b048 	.word	0x0809b048
 800469c:	0809b3c0 	.word	0x0809b3c0

080046a0 <disp1_10pt>:

void disp1_10pt(int X, int Y){
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 80046aa:	4a2e      	ldr	r2, [pc, #184]	; (8004764 <disp1_10pt+0xc4>)
 80046ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046b4:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <disp1_10pt+0xc8>)
 80046ba:	f107 0408 	add.w	r4, r7, #8
 80046be:	461d      	mov	r5, r3
 80046c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046c8:	c403      	stmia	r4!, {r0, r1}
 80046ca:	7022      	strb	r2, [r4, #0]
			0,1,1,0,0,
			0,0,1,0,0,
			0,0,1,0,0,
			0,0,1,0,0
	};
	int i,j,k=0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 80046d0:	2300      	movs	r3, #0
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
 80046d4:	e03e      	b.n	8004754 <disp1_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 80046d6:	2304      	movs	r3, #4
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
 80046da:	e035      	b.n	8004748 <disp1_10pt+0xa8>
				 switch (piece_data[k]) {
 80046dc:	f107 0208 	add.w	r2, r7, #8
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	4413      	add	r3, r2
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <disp1_10pt+0x50>
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d013      	beq.n	8004716 <disp1_10pt+0x76>
 80046ee:	e025      	b.n	800473c <disp1_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	b298      	uxth	r0, r3
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	b29b      	uxth	r3, r3
 8004704:	4413      	add	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	3305      	adds	r3, #5
 800470a:	b29b      	uxth	r3, r3
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	4619      	mov	r1, r3
 8004710:	f002 fa0e 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004714:	e012      	b.n	800473c <disp1_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	b29a      	uxth	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	4413      	add	r3, r2
 8004720:	b298      	uxth	r0, r3
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	b29b      	uxth	r3, r3
 800472a:	4413      	add	r3, r2
 800472c:	b29b      	uxth	r3, r3
 800472e:	3305      	adds	r3, #5
 8004730:	b29b      	uxth	r3, r3
 8004732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004734:	4619      	mov	r1, r3
 8004736:	f002 f9fb 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800473a:	bf00      	nop
			 }
				 k++;
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	3301      	adds	r3, #1
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	3b01      	subs	r3, #1
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	2b00      	cmp	r3, #0
 800474c:	dac6      	bge.n	80046dc <disp1_10pt+0x3c>
	 for(j=0;j<5;j++) {
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	3301      	adds	r3, #1
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2b04      	cmp	r3, #4
 8004758:	ddbd      	ble.n	80046d6 <disp1_10pt+0x36>
		 }
	}
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	3738      	adds	r7, #56	; 0x38
 8004760:	46bd      	mov	sp, r7
 8004762:	bdb0      	pop	{r4, r5, r7, pc}
 8004764:	0809b048 	.word	0x0809b048
 8004768:	0809b3dc 	.word	0x0809b3dc

0800476c <disp2_10pt>:

void disp2_10pt(int X, int Y){
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b08e      	sub	sp, #56	; 0x38
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004776:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <disp2_10pt+0xc4>)
 8004778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004780:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <disp2_10pt+0xc8>)
 8004786:	f107 0408 	add.w	r4, r7, #8
 800478a:	461d      	mov	r5, r3
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004794:	c403      	stmia	r4!, {r0, r1}
 8004796:	7022      	strb	r2, [r4, #0]
			1,1,0,1,0,
			0,0,1,1,0,
			0,1,1,0,0,
			1,1,1,1,0
	};
	int i,j,k=0;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 800479c:	2300      	movs	r3, #0
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
 80047a0:	e03e      	b.n	8004820 <disp2_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 80047a2:	2304      	movs	r3, #4
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
 80047a6:	e035      	b.n	8004814 <disp2_10pt+0xa8>
				 switch (piece_data[k]) {
 80047a8:	f107 0208 	add.w	r2, r7, #8
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <disp2_10pt+0x50>
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d013      	beq.n	80047e2 <disp2_10pt+0x76>
 80047ba:	e025      	b.n	8004808 <disp2_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	b29a      	uxth	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	b298      	uxth	r0, r3
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3305      	adds	r3, #5
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	4619      	mov	r1, r3
 80047dc:	f002 f9a8 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80047e0:	e012      	b.n	8004808 <disp2_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	b298      	uxth	r0, r3
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3305      	adds	r3, #5
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004800:	4619      	mov	r1, r3
 8004802:	f002 f995 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004806:	bf00      	nop
			 }
				 k++;
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	3301      	adds	r3, #1
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	3b01      	subs	r3, #1
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
 8004814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004816:	2b00      	cmp	r3, #0
 8004818:	dac6      	bge.n	80047a8 <disp2_10pt+0x3c>
	 for(j=0;j<5;j++) {
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	3301      	adds	r3, #1
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2b04      	cmp	r3, #4
 8004824:	ddbd      	ble.n	80047a2 <disp2_10pt+0x36>
		 }
	}
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	3738      	adds	r7, #56	; 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bdb0      	pop	{r4, r5, r7, pc}
 8004830:	0809b048 	.word	0x0809b048
 8004834:	0809b3f8 	.word	0x0809b3f8

08004838 <disp3_10pt>:

void disp3_10pt(int X, int Y){
 8004838:	b5b0      	push	{r4, r5, r7, lr}
 800483a:	b08e      	sub	sp, #56	; 0x38
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <disp3_10pt+0xc4>)
 8004844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800484c:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <disp3_10pt+0xc8>)
 8004852:	f107 0408 	add.w	r4, r7, #8
 8004856:	461d      	mov	r5, r3
 8004858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800485a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800485c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004860:	c403      	stmia	r4!, {r0, r1}
 8004862:	7022      	strb	r2, [r4, #0]
			0,0,0,1,0,
			0,0,1,1,0,
			0,1,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004868:	2300      	movs	r3, #0
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
 800486c:	e03e      	b.n	80048ec <disp3_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 800486e:	2304      	movs	r3, #4
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	e035      	b.n	80048e0 <disp3_10pt+0xa8>
				 switch (piece_data[k]) {
 8004874:	f107 0208 	add.w	r2, r7, #8
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <disp3_10pt+0x50>
 8004882:	2b01      	cmp	r3, #1
 8004884:	d013      	beq.n	80048ae <disp3_10pt+0x76>
 8004886:	e025      	b.n	80048d4 <disp3_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	b29a      	uxth	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4413      	add	r3, r2
 8004892:	b298      	uxth	r0, r3
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	b29b      	uxth	r3, r3
 800489c:	4413      	add	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3305      	adds	r3, #5
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	4619      	mov	r1, r3
 80048a8:	f002 f942 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80048ac:	e012      	b.n	80048d4 <disp3_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	b298      	uxth	r0, r3
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3305      	adds	r3, #5
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048cc:	4619      	mov	r1, r3
 80048ce:	f002 f92f 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80048d2:	bf00      	nop
			 }
				 k++;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	3301      	adds	r3, #1
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	3b01      	subs	r3, #1
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dac6      	bge.n	8004874 <disp3_10pt+0x3c>
	 for(j=0;j<5;j++) {
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	3301      	adds	r3, #1
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	ddbd      	ble.n	800486e <disp3_10pt+0x36>
		 }
	}
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	3738      	adds	r7, #56	; 0x38
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bdb0      	pop	{r4, r5, r7, pc}
 80048fc:	0809b048 	.word	0x0809b048
 8004900:	0809b414 	.word	0x0809b414

08004904 <disp4_10pt>:

void disp4_10pt(int X, int Y){
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 800490e:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <disp4_10pt+0xc4>)
 8004910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004918:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <disp4_10pt+0xc8>)
 800491e:	f107 0408 	add.w	r4, r7, #8
 8004922:	461d      	mov	r5, r3
 8004924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800492c:	c403      	stmia	r4!, {r0, r1}
 800492e:	7022      	strb	r2, [r4, #0]
			0,1,1,1,0,
			1,1,0,1,0,
			1,1,1,1,1,
			0,0,0,1,0
	};
	int i,j,k=0;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004934:	2300      	movs	r3, #0
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
 8004938:	e03e      	b.n	80049b8 <disp4_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 800493a:	2304      	movs	r3, #4
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
 800493e:	e035      	b.n	80049ac <disp4_10pt+0xa8>
				 switch (piece_data[k]) {
 8004940:	f107 0208 	add.w	r2, r7, #8
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	4413      	add	r3, r2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <disp4_10pt+0x50>
 800494e:	2b01      	cmp	r3, #1
 8004950:	d013      	beq.n	800497a <disp4_10pt+0x76>
 8004952:	e025      	b.n	80049a0 <disp4_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	b29a      	uxth	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	4413      	add	r3, r2
 800495e:	b298      	uxth	r0, r3
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	b29b      	uxth	r3, r3
 8004968:	4413      	add	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	3305      	adds	r3, #5
 800496e:	b29b      	uxth	r3, r3
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	4619      	mov	r1, r3
 8004974:	f002 f8dc 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004978:	e012      	b.n	80049a0 <disp4_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	b29a      	uxth	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	4413      	add	r3, r2
 8004984:	b298      	uxth	r0, r3
 8004986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	b29b      	uxth	r3, r3
 800498e:	4413      	add	r3, r2
 8004990:	b29b      	uxth	r3, r3
 8004992:	3305      	adds	r3, #5
 8004994:	b29b      	uxth	r3, r3
 8004996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004998:	4619      	mov	r1, r3
 800499a:	f002 f8c9 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800499e:	bf00      	nop
			 }
				 k++;
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	3301      	adds	r3, #1
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	3b01      	subs	r3, #1
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dac6      	bge.n	8004940 <disp4_10pt+0x3c>
	 for(j=0;j<5;j++) {
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	3301      	adds	r3, #1
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	ddbd      	ble.n	800493a <disp4_10pt+0x36>
		 }
	}
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	3738      	adds	r7, #56	; 0x38
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bdb0      	pop	{r4, r5, r7, pc}
 80049c8:	0809b048 	.word	0x0809b048
 80049cc:	0809b430 	.word	0x0809b430

080049d0 <disp5_10pt>:


void disp5_10pt(int X, int Y){
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b08e      	sub	sp, #56	; 0x38
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 80049da:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <disp5_10pt+0xc4>)
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049e4:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <disp5_10pt+0xc8>)
 80049ea:	f107 0408 	add.w	r4, r7, #8
 80049ee:	461d      	mov	r5, r3
 80049f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049f8:	c403      	stmia	r4!, {r0, r1}
 80049fa:	7022      	strb	r2, [r4, #0]
			0,1,0,0,0,
			1,1,1,1,0,
			0,0,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
 8004a04:	e03e      	b.n	8004a84 <disp5_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004a06:	2304      	movs	r3, #4
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	e035      	b.n	8004a78 <disp5_10pt+0xa8>
				 switch (piece_data[k]) {
 8004a0c:	f107 0208 	add.w	r2, r7, #8
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <disp5_10pt+0x50>
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d013      	beq.n	8004a46 <disp5_10pt+0x76>
 8004a1e:	e025      	b.n	8004a6c <disp5_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	b298      	uxth	r0, r3
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3305      	adds	r3, #5
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f002 f876 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004a44:	e012      	b.n	8004a6c <disp5_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	b298      	uxth	r0, r3
 8004a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3305      	adds	r3, #5
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a64:	4619      	mov	r1, r3
 8004a66:	f002 f863 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004a6a:	bf00      	nop
			 }
				 k++;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	3301      	adds	r3, #1
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	3b01      	subs	r3, #1
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dac6      	bge.n	8004a0c <disp5_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	3301      	adds	r3, #1
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	ddbd      	ble.n	8004a06 <disp5_10pt+0x36>
		 }
	}
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	3738      	adds	r7, #56	; 0x38
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bdb0      	pop	{r4, r5, r7, pc}
 8004a94:	0809b048 	.word	0x0809b048
 8004a98:	0809b44c 	.word	0x0809b44c

08004a9c <disp6_10pt>:

void disp6_10pt(int X, int Y){
 8004a9c:	b5b0      	push	{r4, r5, r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004aa6:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <disp6_10pt+0xc4>)
 8004aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ab0:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <disp6_10pt+0xc8>)
 8004ab6:	f107 0408 	add.w	r4, r7, #8
 8004aba:	461d      	mov	r5, r3
 8004abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ac4:	c403      	stmia	r4!, {r0, r1}
 8004ac6:	7022      	strb	r2, [r4, #0]
			1,1,0,0,0,
			1,1,1,1,0,
			1,1,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004acc:	2300      	movs	r3, #0
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad0:	e03e      	b.n	8004b50 <disp6_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	e035      	b.n	8004b44 <disp6_10pt+0xa8>
				 switch (piece_data[k]) {
 8004ad8:	f107 0208 	add.w	r2, r7, #8
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	4413      	add	r3, r2
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <disp6_10pt+0x50>
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d013      	beq.n	8004b12 <disp6_10pt+0x76>
 8004aea:	e025      	b.n	8004b38 <disp6_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	b298      	uxth	r0, r3
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3305      	adds	r3, #5
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f002 f810 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004b10:	e012      	b.n	8004b38 <disp6_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	b298      	uxth	r0, r3
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3305      	adds	r3, #5
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b30:	4619      	mov	r1, r3
 8004b32:	f001 fffd 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004b36:	bf00      	nop
			 }
				 k++;
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	3b01      	subs	r3, #1
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	dac6      	bge.n	8004ad8 <disp6_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	ddbd      	ble.n	8004ad2 <disp6_10pt+0x36>
		 }
	}
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	3738      	adds	r7, #56	; 0x38
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b60:	0809b048 	.word	0x0809b048
 8004b64:	0809b468 	.word	0x0809b468

08004b68 <disp7_10pt>:


void disp7_10pt(int X, int Y){
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	b08e      	sub	sp, #56	; 0x38
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004b72:	4a2e      	ldr	r2, [pc, #184]	; (8004c2c <disp7_10pt+0xc4>)
 8004b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b7c:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004b80:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <disp7_10pt+0xc8>)
 8004b82:	f107 0408 	add.w	r4, r7, #8
 8004b86:	461d      	mov	r5, r3
 8004b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b90:	c403      	stmia	r4!, {r0, r1}
 8004b92:	7022      	strb	r2, [r4, #0]
			0,0,0,1,0,
			0,0,1,0,0,
			0,1,1,0,0,
			0,1,1,0,0
	};
	int i,j,k=0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004b98:	2300      	movs	r3, #0
 8004b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9c:	e03e      	b.n	8004c1c <disp7_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	e035      	b.n	8004c10 <disp7_10pt+0xa8>
				 switch (piece_data[k]) {
 8004ba4:	f107 0208 	add.w	r2, r7, #8
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <disp7_10pt+0x50>
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d013      	beq.n	8004bde <disp7_10pt+0x76>
 8004bb6:	e025      	b.n	8004c04 <disp7_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3305      	adds	r3, #5
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f001 ffaa 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004bdc:	e012      	b.n	8004c04 <disp7_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	b298      	uxth	r0, r3
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3305      	adds	r3, #5
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f001 ff97 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004c02:	bf00      	nop
			 }
				 k++;
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	3301      	adds	r3, #1
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dac6      	bge.n	8004ba4 <disp7_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	3301      	adds	r3, #1
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	ddbd      	ble.n	8004b9e <disp7_10pt+0x36>
		 }
	}
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	3738      	adds	r7, #56	; 0x38
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2c:	0809b048 	.word	0x0809b048
 8004c30:	0809b484 	.word	0x0809b484

08004c34 <disp8_10pt>:


void disp8_10pt(int X, int Y){
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004c3e:	4a2e      	ldr	r2, [pc, #184]	; (8004cf8 <disp8_10pt+0xc4>)
 8004c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c48:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <disp8_10pt+0xc8>)
 8004c4e:	f107 0408 	add.w	r4, r7, #8
 8004c52:	461d      	mov	r5, r3
 8004c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c5c:	c403      	stmia	r4!, {r0, r1}
 8004c5e:	7022      	strb	r2, [r4, #0]
			1,1,0,1,0,
			0,1,1,1,0,
			1,1,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004c64:	2300      	movs	r3, #0
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	e03e      	b.n	8004ce8 <disp8_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6e:	e035      	b.n	8004cdc <disp8_10pt+0xa8>
				 switch (piece_data[k]) {
 8004c70:	f107 0208 	add.w	r2, r7, #8
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	4413      	add	r3, r2
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <disp8_10pt+0x50>
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d013      	beq.n	8004caa <disp8_10pt+0x76>
 8004c82:	e025      	b.n	8004cd0 <disp8_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b298      	uxth	r0, r3
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3305      	adds	r3, #5
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	f001 ff44 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004ca8:	e012      	b.n	8004cd0 <disp8_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b298      	uxth	r0, r3
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3305      	adds	r3, #5
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f001 ff31 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004cce:	bf00      	nop
			 }
				 k++;
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	dac6      	bge.n	8004c70 <disp8_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	ddbd      	ble.n	8004c6a <disp8_10pt+0x36>
		 }
	}
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	3738      	adds	r7, #56	; 0x38
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf8:	0809b048 	.word	0x0809b048
 8004cfc:	0809b4a0 	.word	0x0809b4a0

08004d00 <disp9_10pt>:


void disp9_10pt(int X, int Y){
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b08e      	sub	sp, #56	; 0x38
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004d0a:	4a2e      	ldr	r2, [pc, #184]	; (8004dc4 <disp9_10pt+0xc4>)
 8004d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d14:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <disp9_10pt+0xc8>)
 8004d1a:	f107 0408 	add.w	r4, r7, #8
 8004d1e:	461d      	mov	r5, r3
 8004d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d28:	c403      	stmia	r4!, {r0, r1}
 8004d2a:	7022      	strb	r2, [r4, #0]
			1,1,0,1,0,
			1,1,1,1,0,
			0,0,0,1,0,
			0,1,1,1,0
	};
	int i,j,k=0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004d30:	2300      	movs	r3, #0
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
 8004d34:	e03e      	b.n	8004db4 <disp9_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004d36:	2304      	movs	r3, #4
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	e035      	b.n	8004da8 <disp9_10pt+0xa8>
				 switch (piece_data[k]) {
 8004d3c:	f107 0208 	add.w	r2, r7, #8
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	4413      	add	r3, r2
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <disp9_10pt+0x50>
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d013      	beq.n	8004d76 <disp9_10pt+0x76>
 8004d4e:	e025      	b.n	8004d9c <disp9_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	b298      	uxth	r0, r3
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3305      	adds	r3, #5
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f001 fede 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004d74:	e012      	b.n	8004d9c <disp9_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	b298      	uxth	r0, r3
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3305      	adds	r3, #5
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d94:	4619      	mov	r1, r3
 8004d96:	f001 fecb 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004d9a:	bf00      	nop
			 }
				 k++;
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	3301      	adds	r3, #1
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da4:	3b01      	subs	r3, #1
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	dac6      	bge.n	8004d3c <disp9_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	3301      	adds	r3, #1
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	ddbd      	ble.n	8004d36 <disp9_10pt+0x36>
		 }
	}
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	3738      	adds	r7, #56	; 0x38
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc4:	0809b048 	.word	0x0809b048
 8004dc8:	0809b4bc 	.word	0x0809b4bc

08004dcc <dispPoint_10pt>:




void dispPoint_10pt(int X, int Y){
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004dd6:	4a2e      	ldr	r2, [pc, #184]	; (8004e90 <dispPoint_10pt+0xc4>)
 8004dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004de0:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <dispPoint_10pt+0xc8>)
 8004de6:	f107 0408 	add.w	r4, r7, #8
 8004dea:	461d      	mov	r5, r3
 8004dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004df4:	c403      	stmia	r4!, {r0, r1}
 8004df6:	7022      	strb	r2, [r4, #0]
			0,0,0,0,0,
			0,0,0,0,0,
			0,0,0,0,0,
			0,1,1,0,0
	};
	int i,j,k=0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004e00:	e03e      	b.n	8004e80 <dispPoint_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004e02:	2304      	movs	r3, #4
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	e035      	b.n	8004e74 <dispPoint_10pt+0xa8>
				 switch (piece_data[k]) {
 8004e08:	f107 0208 	add.w	r2, r7, #8
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	4413      	add	r3, r2
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <dispPoint_10pt+0x50>
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d013      	beq.n	8004e42 <dispPoint_10pt+0x76>
 8004e1a:	e025      	b.n	8004e68 <dispPoint_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	b298      	uxth	r0, r3
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3305      	adds	r3, #5
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f001 fe78 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004e40:	e012      	b.n	8004e68 <dispPoint_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b298      	uxth	r0, r3
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3305      	adds	r3, #5
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e60:	4619      	mov	r1, r3
 8004e62:	f001 fe65 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004e66:	bf00      	nop
			 }
				 k++;
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	3b01      	subs	r3, #1
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dac6      	bge.n	8004e08 <dispPoint_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	ddbd      	ble.n	8004e02 <dispPoint_10pt+0x36>
		 }
	}
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	3738      	adds	r7, #56	; 0x38
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e90:	0809b048 	.word	0x0809b048
 8004e94:	0809b4d8 	.word	0x0809b4d8

08004e98 <dispVoid_10pt>:

void dispVoid_10pt(int X, int Y){
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b08e      	sub	sp, #56	; 0x38
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[2] = {
 8004ea2:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <dispVoid_10pt+0xc4>)
 8004ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eac:	e883 0003 	stmia.w	r3, {r0, r1}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_WHITE};
	char piece_data[] = {
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <dispVoid_10pt+0xc8>)
 8004eb2:	f107 0408 	add.w	r4, r7, #8
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ec0:	c403      	stmia	r4!, {r0, r1}
 8004ec2:	7022      	strb	r2, [r4, #0]
			0,0,0,0,0,
			0,0,0,0,0,
			0,0,0,0,0,
			0,0,0,0,0
	};
	int i,j,k=0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for(j=0;j<5;j++) {
 8004ec8:	2300      	movs	r3, #0
 8004eca:	633b      	str	r3, [r7, #48]	; 0x30
 8004ecc:	e03e      	b.n	8004f4c <dispVoid_10pt+0xb4>
		 for (i = 4; i >= 0; i--) {
 8004ece:	2304      	movs	r3, #4
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	e035      	b.n	8004f40 <dispVoid_10pt+0xa8>
				 switch (piece_data[k]) {
 8004ed4:	f107 0208 	add.w	r2, r7, #8
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	4413      	add	r3, r2
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <dispVoid_10pt+0x50>
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d013      	beq.n	8004f0e <dispVoid_10pt+0x76>
 8004ee6:	e025      	b.n	8004f34 <dispVoid_10pt+0x9c>
					  case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[0]);
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3305      	adds	r3, #5
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	4619      	mov	r1, r3
 8004f08:	f001 fe12 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004f0c:	e012      	b.n	8004f34 <dispVoid_10pt+0x9c>
					  case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+5, color_map1[1]);
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	b298      	uxth	r0, r3
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3305      	adds	r3, #5
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f001 fdff 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8004f32:	bf00      	nop
			 }
				 k++;
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	3301      	adds	r3, #1
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
		 for (i = 4; i >= 0; i--) {
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dac6      	bge.n	8004ed4 <dispVoid_10pt+0x3c>
	 for(j=0;j<5;j++) {
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	3301      	adds	r3, #1
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	ddbd      	ble.n	8004ece <dispVoid_10pt+0x36>
		 }
	}
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	3738      	adds	r7, #56	; 0x38
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f5c:	0809b048 	.word	0x0809b048
 8004f60:	0809b4f4 	.word	0x0809b4f4

08004f64 <DispScoreIG>:


void DispScoreIG(int number, int TS){
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08c      	sub	sp, #48	; 0x30
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	int tab[7]={0,0,0,10,0,0,0};
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	2300      	movs	r3, #0
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
	int i=6;
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int row;
	if(number>=1000000){
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4aa2      	ldr	r2, [pc, #648]	; (800521c <DispScoreIG+0x2b8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	dd2e      	ble.n	8004ff4 <DispScoreIG+0x90>
		number=999999;
 8004f96:	4ba1      	ldr	r3, [pc, #644]	; (800521c <DispScoreIG+0x2b8>)
 8004f98:	607b      	str	r3, [r7, #4]
	}
	while (number!=0)
 8004f9a:	e02b      	b.n	8004ff4 <DispScoreIG+0x90>
	    {
	        tab[i]=number%10;
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4ba0      	ldr	r3, [pc, #640]	; (8005220 <DispScoreIG+0x2bc>)
 8004fa0:	fb83 2301 	smull	r2, r3, r3, r1
 8004fa4:	109a      	asrs	r2, r3, #2
 8004fa6:	17cb      	asrs	r3, r1, #31
 8004fa8:	1ad2      	subs	r2, r2, r3
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	1aca      	subs	r2, r1, r3
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f843 2c24 	str.w	r2, [r3, #-36]
	        number=number/10;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a96      	ldr	r2, [pc, #600]	; (8005220 <DispScoreIG+0x2bc>)
 8004fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8004fca:	1092      	asrs	r2, r2, #2
 8004fcc:	17db      	asrs	r3, r3, #31
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	607b      	str	r3, [r7, #4]
	        i--;
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	        if(i==3){
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d10a      	bne.n	8004ff4 <DispScoreIG+0x90>
	        	tab[i]=10;
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004fe6:	4413      	add	r3, r2
 8004fe8:	220a      	movs	r2, #10
 8004fea:	f843 2c24 	str.w	r2, [r3, #-36]
	        	i--;
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (number!=0)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1d0      	bne.n	8004f9c <DispScoreIG+0x38>
	        }
	    }
	for (i=0;i<7;i++){
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	e104      	b.n	800520a <DispScoreIG+0x2a6>
		if(TS==0){row=0;}
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <DispScoreIG+0xa8>
 8005006:	2300      	movs	r3, #0
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
 800500a:	e001      	b.n	8005010 <DispScoreIG+0xac>
		else{row=1;}
 800500c:	2301      	movs	r3, #1
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
		dispVoid_10pt(44-i*5,74+row*56);
 8005010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005012:	4613      	mov	r3, r2
 8005014:	079b      	lsls	r3, r3, #30
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	334a      	adds	r3, #74	; 0x4a
 800502c:	4619      	mov	r1, r3
 800502e:	f7ff ff33 	bl	8004e98 <dispVoid_10pt>
		switch(tab[i]){
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800503a:	4413      	add	r3, r2
 800503c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8005040:	2b0a      	cmp	r3, #10
 8005042:	f200 80df 	bhi.w	8005204 <DispScoreIG+0x2a0>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <DispScoreIG+0xe8>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005079 	.word	0x08005079
 8005050:	0800509d 	.word	0x0800509d
 8005054:	080050c1 	.word	0x080050c1
 8005058:	080050e5 	.word	0x080050e5
 800505c:	08005109 	.word	0x08005109
 8005060:	0800512d 	.word	0x0800512d
 8005064:	08005151 	.word	0x08005151
 8005068:	08005175 	.word	0x08005175
 800506c:	08005199 	.word	0x08005199
 8005070:	080051bd 	.word	0x080051bd
 8005074:	080051e1 	.word	0x080051e1
			case 0:
				disp0_10pt(44-i*5,74+row*56);
 8005078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507a:	4613      	mov	r3, r2
 800507c:	079b      	lsls	r3, r3, #30
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	334a      	adds	r3, #74	; 0x4a
 8005094:	4619      	mov	r1, r3
 8005096:	f7ff fa9d 	bl	80045d4 <disp0_10pt>
				break;
 800509a:	e0b3      	b.n	8005204 <DispScoreIG+0x2a0>
			case 1:
				disp1_10pt(44-i*5,74+row*56);
 800509c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509e:	4613      	mov	r3, r2
 80050a0:	079b      	lsls	r3, r3, #30
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80050ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	334a      	adds	r3, #74	; 0x4a
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7ff faf1 	bl	80046a0 <disp1_10pt>
				break;
 80050be:	e0a1      	b.n	8005204 <DispScoreIG+0x2a0>
			case 2:
				disp2_10pt(44-i*5,74+row*56);
 80050c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c2:	4613      	mov	r3, r2
 80050c4:	079b      	lsls	r3, r3, #30
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80050d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	334a      	adds	r3, #74	; 0x4a
 80050dc:	4619      	mov	r1, r3
 80050de:	f7ff fb45 	bl	800476c <disp2_10pt>
				break;
 80050e2:	e08f      	b.n	8005204 <DispScoreIG+0x2a0>
			case 3:
				disp3_10pt(44-i*5,74+row*56);
 80050e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e6:	4613      	mov	r3, r2
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	334a      	adds	r3, #74	; 0x4a
 8005100:	4619      	mov	r1, r3
 8005102:	f7ff fb99 	bl	8004838 <disp3_10pt>
				break;
 8005106:	e07d      	b.n	8005204 <DispScoreIG+0x2a0>
			case 4:
				disp4_10pt(44-i*5,74+row*56);
 8005108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510a:	4613      	mov	r3, r2
 800510c:	079b      	lsls	r3, r3, #30
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	334a      	adds	r3, #74	; 0x4a
 8005124:	4619      	mov	r1, r3
 8005126:	f7ff fbed 	bl	8004904 <disp4_10pt>
				break;
 800512a:	e06b      	b.n	8005204 <DispScoreIG+0x2a0>
			case 5:
				disp5_10pt(44-i*5,74+row*56);
 800512c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800512e:	4613      	mov	r3, r2
 8005130:	079b      	lsls	r3, r3, #30
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	334a      	adds	r3, #74	; 0x4a
 8005148:	4619      	mov	r1, r3
 800514a:	f7ff fc41 	bl	80049d0 <disp5_10pt>
				break;
 800514e:	e059      	b.n	8005204 <DispScoreIG+0x2a0>
			case 6:
				disp6_10pt(44-i*5,74+row*56);
 8005150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005152:	4613      	mov	r3, r2
 8005154:	079b      	lsls	r3, r3, #30
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005162:	4613      	mov	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	334a      	adds	r3, #74	; 0x4a
 800516c:	4619      	mov	r1, r3
 800516e:	f7ff fc95 	bl	8004a9c <disp6_10pt>
				break;
 8005172:	e047      	b.n	8005204 <DispScoreIG+0x2a0>
			case 7:
				disp7_10pt(44-i*5,74+row*56);
 8005174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005176:	4613      	mov	r3, r2
 8005178:	079b      	lsls	r3, r3, #30
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	334a      	adds	r3, #74	; 0x4a
 8005190:	4619      	mov	r1, r3
 8005192:	f7ff fce9 	bl	8004b68 <disp7_10pt>
				break;
 8005196:	e035      	b.n	8005204 <DispScoreIG+0x2a0>
			case 8:
				disp8_10pt(44-i*5,74+row*56);
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	4613      	mov	r3, r2
 800519c:	079b      	lsls	r3, r3, #30
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80051a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	334a      	adds	r3, #74	; 0x4a
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7ff fd3d 	bl	8004c34 <disp8_10pt>
				break;
 80051ba:	e023      	b.n	8005204 <DispScoreIG+0x2a0>
			case 9:
				disp9_10pt(44-i*5,74+row*56);
 80051bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051be:	4613      	mov	r3, r2
 80051c0:	079b      	lsls	r3, r3, #30
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80051cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	334a      	adds	r3, #74	; 0x4a
 80051d8:	4619      	mov	r1, r3
 80051da:	f7ff fd91 	bl	8004d00 <disp9_10pt>
				break;
 80051de:	e011      	b.n	8005204 <DispScoreIG+0x2a0>
			case 10:
				dispPoint_10pt(44-i*5,74+row*56);
 80051e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e2:	4613      	mov	r3, r2
 80051e4:	079b      	lsls	r3, r3, #30
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80051f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	334a      	adds	r3, #74	; 0x4a
 80051fc:	4619      	mov	r1, r3
 80051fe:	f7ff fde5 	bl	8004dcc <dispPoint_10pt>
				break;
 8005202:	bf00      	nop
	for (i=0;i<7;i++){
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	3301      	adds	r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b06      	cmp	r3, #6
 800520e:	f77f aef7 	ble.w	8005000 <DispScoreIG+0x9c>
		}
	}
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	3730      	adds	r7, #48	; 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	000f423f 	.word	0x000f423f
 8005220:	66666667 	.word	0x66666667

08005224 <dispSmallPiece1>:
 */

#include "base_piece.h"
#include "stm32746g_discovery_lcd.h"

void dispSmallPiece1(int X, int Y){
 8005224:	b580      	push	{r7, lr}
 8005226:	b0ac      	sub	sp, #176	; 0xb0
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[3] = {
 800522e:	4a51      	ldr	r2, [pc, #324]	; (8005374 <dispSmallPiece1+0x150>)
 8005230:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005234:	ca07      	ldmia	r2, {r0, r1, r2}
 8005236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_BLUE1,
	                LCD_COLOR_WHITE1};

	char piece_data[] = {
 800523a:	4a4f      	ldr	r2, [pc, #316]	; (8005378 <dispSmallPiece1+0x154>)
 800523c:	f107 0308 	add.w	r3, r7, #8
 8005240:	4611      	mov	r1, r2
 8005242:	2290      	movs	r2, #144	; 0x90
 8005244:	4618      	mov	r0, r3
 8005246:	f007 f8d5 	bl	800c3f4 <memcpy>
		1,1,1,1,1,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0
		};

	int i,j,k=0;
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	      for(j=0;j<12;j++) {
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005256:	e082      	b.n	800535e <dispSmallPiece1+0x13a>
			 for (i = 11; i >= 0; i--) {
 8005258:	230b      	movs	r3, #11
 800525a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800525e:	e075      	b.n	800534c <dispSmallPiece1+0x128>
				 switch (piece_data[k]) {
 8005260:	f107 0208 	add.w	r2, r7, #8
 8005264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005268:	4413      	add	r3, r2
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d863      	bhi.n	8005338 <dispSmallPiece1+0x114>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <dispSmallPiece1+0x54>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	080052b5 	.word	0x080052b5
 8005280:	080052e1 	.word	0x080052e1
 8005284:	0800530d 	.word	0x0800530d
				 case 0:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[0]);
 8005288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800528c:	b29a      	uxth	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	4413      	add	r3, r2
 8005294:	b298      	uxth	r0, r3
 8005296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	330c      	adds	r3, #12
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80052ac:	4619      	mov	r1, r3
 80052ae:	f001 fc3f 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80052b2:	e041      	b.n	8005338 <dispSmallPiece1+0x114>
				 case 1:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[1]);
 80052b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4413      	add	r3, r2
 80052c0:	b298      	uxth	r0, r3
 80052c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	330c      	adds	r3, #12
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80052d8:	4619      	mov	r1, r3
 80052da:	f001 fc29 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 80052de:	e02b      	b.n	8005338 <dispSmallPiece1+0x114>
				 case 2:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[2]);
 80052e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	b298      	uxth	r0, r3
 80052ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	330c      	adds	r3, #12
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005304:	4619      	mov	r1, r3
 8005306:	f001 fc13 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800530a:	e015      	b.n	8005338 <dispSmallPiece1+0x114>
				 case 3:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[3]);
 800530c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005310:	b29a      	uxth	r2, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	4413      	add	r3, r2
 8005318:	b298      	uxth	r0, r3
 800531a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	b29b      	uxth	r3, r3
 8005324:	4413      	add	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	330c      	adds	r3, #12
 800532a:	b29b      	uxth	r3, r3
 800532c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005330:	4619      	mov	r1, r3
 8005332:	f001 fbfd 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8005336:	bf00      	nop
				 }
				 k++;
 8005338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800533c:	3301      	adds	r3, #1
 800533e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 for (i = 11; i >= 0; i--) {
 8005342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005346:	3b01      	subs	r3, #1
 8005348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800534c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005350:	2b00      	cmp	r3, #0
 8005352:	da85      	bge.n	8005260 <dispSmallPiece1+0x3c>
	      for(j=0;j<12;j++) {
 8005354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005358:	3301      	adds	r3, #1
 800535a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800535e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005362:	2b0b      	cmp	r3, #11
 8005364:	f77f af78 	ble.w	8005258 <dispSmallPiece1+0x34>
			 }
		 }
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	37b0      	adds	r7, #176	; 0xb0
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	0809b510 	.word	0x0809b510
 8005378:	0809b51c 	.word	0x0809b51c

0800537c <dispSmallPiece2>:


void dispSmallPiece2(int X, int Y){
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ac      	sub	sp, #176	; 0xb0
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[3] = {
 8005386:	4a51      	ldr	r2, [pc, #324]	; (80054cc <dispSmallPiece2+0x150>)
 8005388:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800538c:	ca07      	ldmia	r2, {r0, r1, r2}
 800538e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	                LCD_COLOR_BLACK,
	                LCD_COLOR_BLUE1,
	                LCD_COLOR_WHITE1};

	char piece_data[] = {
 8005392:	4a4f      	ldr	r2, [pc, #316]	; (80054d0 <dispSmallPiece2+0x154>)
 8005394:	f107 0308 	add.w	r3, r7, #8
 8005398:	4611      	mov	r1, r2
 800539a:	2290      	movs	r2, #144	; 0x90
 800539c:	4618      	mov	r0, r3
 800539e:	f007 f829 	bl	800c3f4 <memcpy>
		1,1,1,1,1,1,1,1,1,1,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0
		};

	int i,j,k=0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	      for(j=0;j<12;j++) {
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053ae:	e082      	b.n	80054b6 <dispSmallPiece2+0x13a>
			 for (i = 11; i >= 0; i--) {
 80053b0:	230b      	movs	r3, #11
 80053b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053b6:	e075      	b.n	80054a4 <dispSmallPiece2+0x128>
				 switch (piece_data[k]) {
 80053b8:	f107 0208 	add.w	r2, r7, #8
 80053bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d863      	bhi.n	8005490 <dispSmallPiece2+0x114>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <dispSmallPiece2+0x54>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	0800540d 	.word	0x0800540d
 80053d8:	08005439 	.word	0x08005439
 80053dc:	08005465 	.word	0x08005465
				 case 0:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[0]);
 80053e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	b298      	uxth	r0, r3
 80053ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	330c      	adds	r3, #12
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005404:	4619      	mov	r1, r3
 8005406:	f001 fb93 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800540a:	e041      	b.n	8005490 <dispSmallPiece2+0x114>
				 case 1:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[1]);
 800540c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005410:	b29a      	uxth	r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	4413      	add	r3, r2
 8005418:	b298      	uxth	r0, r3
 800541a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	b29b      	uxth	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	330c      	adds	r3, #12
 800542a:	b29b      	uxth	r3, r3
 800542c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005430:	4619      	mov	r1, r3
 8005432:	f001 fb7d 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8005436:	e02b      	b.n	8005490 <dispSmallPiece2+0x114>
				 case 2:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[2]);
 8005438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800543c:	b29a      	uxth	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	4413      	add	r3, r2
 8005444:	b298      	uxth	r0, r3
 8005446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	b29b      	uxth	r3, r3
 8005450:	4413      	add	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	330c      	adds	r3, #12
 8005456:	b29b      	uxth	r3, r3
 8005458:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800545c:	4619      	mov	r1, r3
 800545e:	f001 fb67 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 8005462:	e015      	b.n	8005490 <dispSmallPiece2+0x114>
				 case 3:
					 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[3]);
 8005464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005468:	b29a      	uxth	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	4413      	add	r3, r2
 8005470:	b298      	uxth	r0, r3
 8005472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	b29b      	uxth	r3, r3
 800547c:	4413      	add	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	330c      	adds	r3, #12
 8005482:	b29b      	uxth	r3, r3
 8005484:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005488:	4619      	mov	r1, r3
 800548a:	f001 fb51 	bl	8006b30 <BSP_LCD_DrawPixel>
					 break;
 800548e:	bf00      	nop
				 }
				 k++;
 8005490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005494:	3301      	adds	r3, #1
 8005496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 for (i = 11; i >= 0; i--) {
 800549a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549e:	3b01      	subs	r3, #1
 80054a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da85      	bge.n	80053b8 <dispSmallPiece2+0x3c>
	      for(j=0;j<12;j++) {
 80054ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054b0:	3301      	adds	r3, #1
 80054b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054ba:	2b0b      	cmp	r3, #11
 80054bc:	f77f af78 	ble.w	80053b0 <dispSmallPiece2+0x34>
			 }
		 }
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	37b0      	adds	r7, #176	; 0xb0
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	0809b510 	.word	0x0809b510
 80054d0:	0809b5ac 	.word	0x0809b5ac

080054d4 <dispSmallPiece3>:

void dispSmallPiece3(int X, int Y){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b0ac      	sub	sp, #176	; 0xb0
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	uint32_t color_map1[3] = {
 80054de:	4a51      	ldr	r2, [pc, #324]	; (8005624 <dispSmallPiece3+0x150>)
 80054e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80054e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80054e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		                LCD_COLOR_BLACK,
		                LCD_COLOR_BLUE2,
		                LCD_COLOR_WHITE1};

		char piece_data[] = {
 80054ea:	4a4f      	ldr	r2, [pc, #316]	; (8005628 <dispSmallPiece3+0x154>)
 80054ec:	f107 0308 	add.w	r3, r7, #8
 80054f0:	4611      	mov	r1, r2
 80054f2:	2290      	movs	r2, #144	; 0x90
 80054f4:	4618      	mov	r0, r3
 80054f6:	f006 ff7d 	bl	800c3f4 <memcpy>
			1,1,1,1,1,1,1,1,1,1,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,0,0,0
			};

		int i,j,k=0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		      for(j=0;j<12;j++) {
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005506:	e082      	b.n	800560e <dispSmallPiece3+0x13a>
				 for (i = 11; i >= 0; i--) {
 8005508:	230b      	movs	r3, #11
 800550a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800550e:	e075      	b.n	80055fc <dispSmallPiece3+0x128>
					 switch (piece_data[k]) {
 8005510:	f107 0208 	add.w	r2, r7, #8
 8005514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d863      	bhi.n	80055e8 <dispSmallPiece3+0x114>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <dispSmallPiece3+0x54>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005539 	.word	0x08005539
 800552c:	08005565 	.word	0x08005565
 8005530:	08005591 	.word	0x08005591
 8005534:	080055bd 	.word	0x080055bd
					 case 0:
						 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[0]);
 8005538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800553c:	b29a      	uxth	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	4413      	add	r3, r2
 8005544:	b298      	uxth	r0, r3
 8005546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4413      	add	r3, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	330c      	adds	r3, #12
 8005556:	b29b      	uxth	r3, r3
 8005558:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800555c:	4619      	mov	r1, r3
 800555e:	f001 fae7 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 8005562:	e041      	b.n	80055e8 <dispSmallPiece3+0x114>
					 case 1:
						 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[1]);
 8005564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005568:	b29a      	uxth	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	4413      	add	r3, r2
 8005570:	b298      	uxth	r0, r3
 8005572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	b29b      	uxth	r3, r3
 800557c:	4413      	add	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	330c      	adds	r3, #12
 8005582:	b29b      	uxth	r3, r3
 8005584:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005588:	4619      	mov	r1, r3
 800558a:	f001 fad1 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 800558e:	e02b      	b.n	80055e8 <dispSmallPiece3+0x114>
					 case 2:
						 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[2]);
 8005590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005594:	b29a      	uxth	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	4413      	add	r3, r2
 800559c:	b298      	uxth	r0, r3
 800559e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	330c      	adds	r3, #12
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80055b4:	4619      	mov	r1, r3
 80055b6:	f001 fabb 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80055ba:	e015      	b.n	80055e8 <dispSmallPiece3+0x114>
					 case 3:
						 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map1[3]);
 80055bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	b298      	uxth	r0, r3
 80055ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	330c      	adds	r3, #12
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80055e0:	4619      	mov	r1, r3
 80055e2:	f001 faa5 	bl	8006b30 <BSP_LCD_DrawPixel>
						 break;
 80055e6:	bf00      	nop
					 }
					 k++;
 80055e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				 for (i = 11; i >= 0; i--) {
 80055f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f6:	3b01      	subs	r3, #1
 80055f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005600:	2b00      	cmp	r3, #0
 8005602:	da85      	bge.n	8005510 <dispSmallPiece3+0x3c>
		      for(j=0;j<12;j++) {
 8005604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005608:	3301      	adds	r3, #1
 800560a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800560e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005612:	2b0b      	cmp	r3, #11
 8005614:	f77f af78 	ble.w	8005508 <dispSmallPiece3+0x34>
				 }
			 }
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	37b0      	adds	r7, #176	; 0xb0
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	0809b63c 	.word	0x0809b63c
 8005628:	0809b5ac 	.word	0x0809b5ac

0800562c <dispSmallVoid>:

void dispSmallVoid(int X, int Y){
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	uint32_t color_map[1] = {
 8005636:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800563a:	60fb      	str	r3, [r7, #12]
			                LCD_COLOR_BLACK};

	int i,j;
	 for(j=0;j<12;j++) {
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e01d      	b.n	800567e <dispSmallVoid+0x52>
		 for (i = 11; i >= 0; i--) {
 8005642:	230b      	movs	r3, #11
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e014      	b.n	8005672 <dispSmallVoid+0x46>
			 BSP_LCD_DrawPixel(j+Y, i+X+12, color_map[0]);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	b29a      	uxth	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	4413      	add	r3, r2
 8005652:	b298      	uxth	r0, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	b29b      	uxth	r3, r3
 800565c:	4413      	add	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	330c      	adds	r3, #12
 8005662:	b29b      	uxth	r3, r3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4619      	mov	r1, r3
 8005668:	f001 fa62 	bl	8006b30 <BSP_LCD_DrawPixel>
		 for (i = 11; i >= 0; i--) {
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3b01      	subs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	dae7      	bge.n	8005648 <dispSmallVoid+0x1c>
	 for(j=0;j<12;j++) {
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b0b      	cmp	r3, #11
 8005682:	ddde      	ble.n	8005642 <dispSmallVoid+0x16>
		 }
	 }
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_MspInit+0x4c>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <HAL_MspInit+0x4c>)
 800569c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6413      	str	r3, [r2, #64]	; 0x40
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_MspInit+0x4c>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_MspInit+0x4c>)
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_MspInit+0x4c>)
 80056b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056b8:	6453      	str	r3, [r2, #68]	; 0x44
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_MspInit+0x4c>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056c6:	2200      	movs	r2, #0
 80056c8:	210f      	movs	r1, #15
 80056ca:	f06f 0001 	mvn.w	r0, #1
 80056ce:	f001 fed7 	bl	8007480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800

080056e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <HAL_CRC_MspInit+0x38>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10b      	bne.n	800570a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_CRC_MspInit+0x3c>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_CRC_MspInit+0x3c>)
 80056f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056fc:	6313      	str	r3, [r2, #48]	; 0x30
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <HAL_CRC_MspInit+0x3c>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40023000 	.word	0x40023000
 800571c:	40023800 	.word	0x40023800

08005720 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a0d      	ldr	r2, [pc, #52]	; (8005764 <HAL_DMA2D_MspInit+0x44>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d113      	bne.n	800575a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <HAL_DMA2D_MspInit+0x48>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <HAL_DMA2D_MspInit+0x48>)
 8005738:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800573c:	6313      	str	r3, [r2, #48]	; 0x30
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <HAL_DMA2D_MspInit+0x48>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800574a:	2200      	movs	r2, #0
 800574c:	2105      	movs	r1, #5
 800574e:	205a      	movs	r0, #90	; 0x5a
 8005750:	f001 fe96 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005754:	205a      	movs	r0, #90	; 0x5a
 8005756:	f001 feaf 	bl	80074b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	4002b000 	.word	0x4002b000
 8005768:	40023800 	.word	0x40023800

0800576c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005774:	f107 0314 	add.w	r3, r7, #20
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	609a      	str	r2, [r3, #8]
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_I2C_MspInit+0x7c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d128      	bne.n	80057e0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800578e:	4b17      	ldr	r3, [pc, #92]	; (80057ec <HAL_I2C_MspInit+0x80>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_I2C_MspInit+0x80>)
 8005794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005798:	6313      	str	r3, [r2, #48]	; 0x30
 800579a:	4b14      	ldr	r3, [pc, #80]	; (80057ec <HAL_I2C_MspInit+0x80>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80057a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80057aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ac:	2312      	movs	r3, #18
 80057ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b4:	2303      	movs	r3, #3
 80057b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80057b8:	2304      	movs	r3, #4
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4619      	mov	r1, r3
 80057c2:	480b      	ldr	r0, [pc, #44]	; (80057f0 <HAL_I2C_MspInit+0x84>)
 80057c4:	f002 fcca 	bl	800815c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80057c8:	4b08      	ldr	r3, [pc, #32]	; (80057ec <HAL_I2C_MspInit+0x80>)
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	4a07      	ldr	r2, [pc, #28]	; (80057ec <HAL_I2C_MspInit+0x80>)
 80057ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057d2:	6413      	str	r3, [r2, #64]	; 0x40
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_I2C_MspInit+0x80>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80057e0:	bf00      	nop
 80057e2:	3728      	adds	r7, #40	; 0x28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40005c00 	.word	0x40005c00
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40021c00 	.word	0x40021c00

080057f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0a      	ldr	r2, [pc, #40]	; (800582c <HAL_I2C_MspDeInit+0x38>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10e      	bne.n	8005824 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005806:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <HAL_I2C_MspDeInit+0x3c>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <HAL_I2C_MspDeInit+0x3c>)
 800580c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005810:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	4807      	ldr	r0, [pc, #28]	; (8005834 <HAL_I2C_MspDeInit+0x40>)
 8005816:	f002 fe4d 	bl	80084b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800581a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800581e:	4805      	ldr	r0, [pc, #20]	; (8005834 <HAL_I2C_MspDeInit+0x40>)
 8005820:	f002 fe48 	bl	80084b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40005c00 	.word	0x40005c00
 8005830:	40023800 	.word	0x40023800
 8005834:	40021c00 	.word	0x40021c00

08005838 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a55      	ldr	r2, [pc, #340]	; (80059ac <HAL_LTDC_MspInit+0x174>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f040 80a3 	bne.w	80059a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800585c:	4b54      	ldr	r3, [pc, #336]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	4a53      	ldr	r2, [pc, #332]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 8005862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005866:	6453      	str	r3, [r2, #68]	; 0x44
 8005868:	4b51      	ldr	r3, [pc, #324]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005874:	4b4e      	ldr	r3, [pc, #312]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	4a4d      	ldr	r2, [pc, #308]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 800587a:	f043 0310 	orr.w	r3, r3, #16
 800587e:	6313      	str	r3, [r2, #48]	; 0x30
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800588c:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4a47      	ldr	r2, [pc, #284]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 8005892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005896:	6313      	str	r3, [r2, #48]	; 0x30
 8005898:	4b45      	ldr	r3, [pc, #276]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80058a4:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	4a41      	ldr	r2, [pc, #260]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ae:	6313      	str	r3, [r2, #48]	; 0x30
 80058b0:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80058bc:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	6313      	str	r3, [r2, #48]	; 0x30
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058de:	6313      	str	r3, [r2, #48]	; 0x30
 80058e0:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <HAL_LTDC_MspInit+0x178>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80058ec:	2310      	movs	r3, #16
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f0:	2302      	movs	r3, #2
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f8:	2300      	movs	r3, #0
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80058fc:	230e      	movs	r3, #14
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005904:	4619      	mov	r1, r3
 8005906:	482b      	ldr	r0, [pc, #172]	; (80059b4 <HAL_LTDC_MspInit+0x17c>)
 8005908:	f002 fc28 	bl	800815c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800590c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005912:	2302      	movs	r3, #2
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005916:	2300      	movs	r3, #0
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591a:	2300      	movs	r3, #0
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800591e:	230e      	movs	r3, #14
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005926:	4619      	mov	r1, r3
 8005928:	4823      	ldr	r0, [pc, #140]	; (80059b8 <HAL_LTDC_MspInit+0x180>)
 800592a:	f002 fc17 	bl	800815c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800592e:	23f7      	movs	r3, #247	; 0xf7
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593a:	2300      	movs	r3, #0
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800593e:	230e      	movs	r3, #14
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005946:	4619      	mov	r1, r3
 8005948:	481c      	ldr	r0, [pc, #112]	; (80059bc <HAL_LTDC_MspInit+0x184>)
 800594a:	f002 fc07 	bl	800815c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800594e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005954:	2302      	movs	r3, #2
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595c:	2300      	movs	r3, #0
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005960:	2309      	movs	r3, #9
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005968:	4619      	mov	r1, r3
 800596a:	4815      	ldr	r0, [pc, #84]	; (80059c0 <HAL_LTDC_MspInit+0x188>)
 800596c:	f002 fbf6 	bl	800815c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005970:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005976:	2302      	movs	r3, #2
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597a:	2300      	movs	r3, #0
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597e:	2300      	movs	r3, #0
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005982:	230e      	movs	r3, #14
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800598a:	4619      	mov	r1, r3
 800598c:	480d      	ldr	r0, [pc, #52]	; (80059c4 <HAL_LTDC_MspInit+0x18c>)
 800598e:	f002 fbe5 	bl	800815c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005992:	2200      	movs	r2, #0
 8005994:	2105      	movs	r1, #5
 8005996:	2058      	movs	r0, #88	; 0x58
 8005998:	f001 fd72 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800599c:	2058      	movs	r0, #88	; 0x58
 800599e:	f001 fd8b 	bl	80074b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80059a2:	bf00      	nop
 80059a4:	3738      	adds	r7, #56	; 0x38
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40016800 	.word	0x40016800
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40022400 	.word	0x40022400
 80059bc:	40022800 	.word	0x40022800
 80059c0:	40021800 	.word	0x40021800
 80059c4:	40022000 	.word	0x40022000

080059c8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0d      	ldr	r2, [pc, #52]	; (8005a0c <HAL_RNG_MspInit+0x44>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d113      	bne.n	8005a02 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <HAL_RNG_MspInit+0x48>)
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4a0c      	ldr	r2, [pc, #48]	; (8005a10 <HAL_RNG_MspInit+0x48>)
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	6353      	str	r3, [r2, #52]	; 0x34
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <HAL_RNG_MspInit+0x48>)
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2105      	movs	r1, #5
 80059f6:	2050      	movs	r0, #80	; 0x50
 80059f8:	f001 fd42 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80059fc:	2050      	movs	r0, #80	; 0x50
 80059fe:	f001 fd5b 	bl	80074b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	50060800 	.word	0x50060800
 8005a10:	40023800 	.word	0x40023800

08005a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	609a      	str	r2, [r3, #8]
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <HAL_UART_MspInit+0xb4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d144      	bne.n	8005ac0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a36:	4b25      	ldr	r3, [pc, #148]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	4a24      	ldr	r2, [pc, #144]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a3c:	f043 0310 	orr.w	r3, r3, #16
 8005a40:	6453      	str	r3, [r2, #68]	; 0x44
 8005a42:	4b22      	ldr	r3, [pc, #136]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5a:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a66:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_UART_MspInit+0xb8>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a82:	2302      	movs	r3, #2
 8005a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a8e:	2307      	movs	r3, #7
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	4619      	mov	r1, r3
 8005a98:	480d      	ldr	r0, [pc, #52]	; (8005ad0 <HAL_UART_MspInit+0xbc>)
 8005a9a:	f002 fb5f 	bl	800815c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aac:	2300      	movs	r3, #0
 8005aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ab0:	2307      	movs	r3, #7
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <HAL_UART_MspInit+0xc0>)
 8005abc:	f002 fb4e 	bl	800815c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005ac0:	bf00      	nop
 8005ac2:	3728      	adds	r7, #40	; 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40011000 	.word	0x40011000
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	40020400 	.word	0x40020400
 8005ad4:	40020000 	.word	0x40020000

08005ad8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005aec:	4b3a      	ldr	r3, [pc, #232]	; (8005bd8 <HAL_FMC_MspInit+0x100>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d16d      	bne.n	8005bd0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005af4:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_FMC_MspInit+0x100>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005afa:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <HAL_FMC_MspInit+0x104>)
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	4a37      	ldr	r2, [pc, #220]	; (8005bdc <HAL_FMC_MspInit+0x104>)
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	6393      	str	r3, [r2, #56]	; 0x38
 8005b06:	4b35      	ldr	r3, [pc, #212]	; (8005bdc <HAL_FMC_MspInit+0x104>)
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005b12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005b16:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b20:	2303      	movs	r3, #3
 8005b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b24:	230c      	movs	r3, #12
 8005b26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	482c      	ldr	r0, [pc, #176]	; (8005be0 <HAL_FMC_MspInit+0x108>)
 8005b2e:	f002 fb15 	bl	800815c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005b32:	f248 1333 	movw	r3, #33075	; 0x8133
 8005b36:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b40:	2303      	movs	r3, #3
 8005b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b44:	230c      	movs	r3, #12
 8005b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4825      	ldr	r0, [pc, #148]	; (8005be4 <HAL_FMC_MspInit+0x10c>)
 8005b4e:	f002 fb05 	bl	800815c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005b52:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005b56:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b60:	2303      	movs	r3, #3
 8005b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b64:	230c      	movs	r3, #12
 8005b66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b68:	1d3b      	adds	r3, r7, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	481e      	ldr	r0, [pc, #120]	; (8005be8 <HAL_FMC_MspInit+0x110>)
 8005b6e:	f002 faf5 	bl	800815c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8005b72:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005b76:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b80:	2303      	movs	r3, #3
 8005b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005b84:	230c      	movs	r3, #12
 8005b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4817      	ldr	r0, [pc, #92]	; (8005bec <HAL_FMC_MspInit+0x114>)
 8005b8e:	f002 fae5 	bl	800815c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8005b92:	2328      	movs	r3, #40	; 0x28
 8005b94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b96:	2302      	movs	r3, #2
 8005b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4811      	ldr	r0, [pc, #68]	; (8005bf0 <HAL_FMC_MspInit+0x118>)
 8005bac:	f002 fad6 	bl	800815c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	480a      	ldr	r0, [pc, #40]	; (8005bf4 <HAL_FMC_MspInit+0x11c>)
 8005bca:	f002 fac7 	bl	800815c <HAL_GPIO_Init>
 8005bce:	e000      	b.n	8005bd2 <HAL_FMC_MspInit+0xfa>
    return;
 8005bd0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200000d0 	.word	0x200000d0
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40021800 	.word	0x40021800
 8005be8:	40020c00 	.word	0x40020c00
 8005bec:	40021400 	.word	0x40021400
 8005bf0:	40021c00 	.word	0x40021c00
 8005bf4:	40020800 	.word	0x40020800

08005bf8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005c00:	f7ff ff6a 	bl	8005ad8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	; 0x30
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	2036      	movs	r0, #54	; 0x36
 8005c22:	f001 fc2d 	bl	8007480 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005c26:	2036      	movs	r0, #54	; 0x36
 8005c28:	f001 fc46 	bl	80074b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <HAL_InitTick+0xa0>)
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	4a1e      	ldr	r2, [pc, #120]	; (8005cac <HAL_InitTick+0xa0>)
 8005c32:	f043 0310 	orr.w	r3, r3, #16
 8005c36:	6413      	str	r3, [r2, #64]	; 0x40
 8005c38:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_InitTick+0xa0>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c44:	f107 0210 	add.w	r2, r7, #16
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f004 fc06 	bl	800a460 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005c54:	f004 fbdc 	bl	800a410 <HAL_RCC_GetPCLK1Freq>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <HAL_InitTick+0xa4>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	0c9b      	lsrs	r3, r3, #18
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <HAL_InitTick+0xac>)
 8005c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005c7a:	4a0e      	ldr	r2, [pc, #56]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005c8c:	4809      	ldr	r0, [pc, #36]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c8e:	f005 f954 	bl	800af3a <HAL_TIM_Base_Init>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005c98:	4806      	ldr	r0, [pc, #24]	; (8005cb4 <HAL_InitTick+0xa8>)
 8005c9a:	f005 f9af 	bl	800affc <HAL_TIM_Base_Start_IT>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	e000      	b.n	8005ca4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3730      	adds	r7, #48	; 0x30
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	431bde83 	.word	0x431bde83
 8005cb4:	20000f18 	.word	0x20000f18
 8005cb8:	40001000 	.word	0x40001000

08005cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cc0:	e7fe      	b.n	8005cc0 <NMI_Handler+0x4>

08005cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cc6:	e7fe      	b.n	8005cc6 <HardFault_Handler+0x4>

08005cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ccc:	e7fe      	b.n	8005ccc <MemManage_Handler+0x4>

08005cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd2:	e7fe      	b.n	8005cd2 <BusFault_Handler+0x4>

08005cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd8:	e7fe      	b.n	8005cd8 <UsageFault_Handler+0x4>

08005cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch(prgm_counter){
 8005cee:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <EXTI0_IRQHandler+0x78>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d82e      	bhi.n	8005d54 <EXTI0_IRQHandler+0x6c>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <EXTI0_IRQHandler+0x14>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d55 	.word	0x08005d55
 8005d00:	08005d0d 	.word	0x08005d0d
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d49 	.word	0x08005d49
		case 0:
			break;
		case 1:
			if(B1==0){
 8005d0c:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <EXTI0_IRQHandler+0x7c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <EXTI0_IRQHandler+0x34>
					B1=2;
 8005d14:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <EXTI0_IRQHandler+0x7c>)
 8005d16:	2202      	movs	r2, #2
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e004      	b.n	8005d26 <EXTI0_IRQHandler+0x3e>
				}
				else{
					B1--;
 8005d1c:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <EXTI0_IRQHandler+0x7c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <EXTI0_IRQHandler+0x7c>)
 8005d24:	6013      	str	r3, [r2, #0]
				}
				aff_select(B1);
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <EXTI0_IRQHandler+0x7c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd f8de 	bl	8002eec <aff_select>
			break;
 8005d30:	e010      	b.n	8005d54 <EXTI0_IRQHandler+0x6c>
		case 2:
			move_piece(3,pieces_globales->first,pieces,grid,coord);
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <EXTI0_IRQHandler+0x80>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <EXTI0_IRQHandler+0x84>)
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <EXTI0_IRQHandler+0x88>)
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <EXTI0_IRQHandler+0x8c>)
 8005d40:	2003      	movs	r0, #3
 8005d42:	f7fb fe2b 	bl	800199c <move_piece>
			break;
 8005d46:	e005      	b.n	8005d54 <EXTI0_IRQHandler+0x6c>
		case 3:
			boucleur++;
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <EXTI0_IRQHandler+0x90>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <EXTI0_IRQHandler+0x90>)
 8005d50:	6013      	str	r3, [r2, #0]
			break;
 8005d52:	bf00      	nop
		}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005d54:	2001      	movs	r0, #1
 8005d56:	f002 fcd3 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	200000c4 	.word	0x200000c4
 8005d64:	200000c0 	.word	0x200000c0
 8005d68:	20000e8c 	.word	0x20000e8c
 8005d6c:	20000360 	.word	0x20000360
 8005d70:	20000368 	.word	0x20000368
 8005d74:	20000918 	.word	0x20000918
 8005d78:	200000c8 	.word	0x200000c8

08005d7c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	switch(prgm_counter){
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <EXTI2_IRQHandler+0x30>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d80b      	bhi.n	8005da0 <EXTI2_IRQHandler+0x24>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <EXTI2_IRQHandler+0x14>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005da1 	.word	0x08005da1
 8005d98:	08005da1 	.word	0x08005da1
 8005d9c:	08005da1 	.word	0x08005da1
			break;
		case 3:
			break;
		}
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005da0:	2004      	movs	r0, #4
 8005da2:	f002 fcad 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200000c4 	.word	0x200000c4

08005db0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	switch(prgm_counter){
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <EXTI3_IRQHandler+0x48>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d817      	bhi.n	8005dec <EXTI3_IRQHandler+0x3c>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <EXTI3_IRQHandler+0x14>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005dd5 	.word	0x08005dd5
 8005dcc:	08005ded 	.word	0x08005ded
 8005dd0:	08005de1 	.word	0x08005de1
		case 0:
			break;
		case 1:

			global_advance++;
 8005dd4:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <EXTI3_IRQHandler+0x4c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <EXTI3_IRQHandler+0x4c>)
 8005ddc:	6013      	str	r3, [r2, #0]
			break;
 8005dde:	e005      	b.n	8005dec <EXTI3_IRQHandler+0x3c>
		case 2:

			break;
		case 3:
			boucleur++;
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <EXTI3_IRQHandler+0x50>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <EXTI3_IRQHandler+0x50>)
 8005de8:	6013      	str	r3, [r2, #0]
			break;
 8005dea:	bf00      	nop
		}
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005dec:	2008      	movs	r0, #8
 8005dee:	f002 fc87 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200000c4 	.word	0x200000c4
 8005dfc:	200000cc 	.word	0x200000cc
 8005e00:	200000c8 	.word	0x200000c8

08005e04 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	switch(prgm_counter){
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <EXTI4_IRQHandler+0x48>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d815      	bhi.n	8005e3e <EXTI4_IRQHandler+0x3a>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <EXTI4_IRQHandler+0x14>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e3f 	.word	0x08005e3f
 8005e1c:	08005e3f 	.word	0x08005e3f
 8005e20:	08005e29 	.word	0x08005e29
 8005e24:	08005e3f 	.word	0x08005e3f
		case 0:
			break;
		case 1:
			break;
		case 2:
			move_piece(0,pieces_globales->first,pieces,grid,coord);
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <EXTI4_IRQHandler+0x4c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <EXTI4_IRQHandler+0x50>)
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <EXTI4_IRQHandler+0x54>)
 8005e34:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <EXTI4_IRQHandler+0x58>)
 8005e36:	2000      	movs	r0, #0
 8005e38:	f7fb fdb0 	bl	800199c <move_piece>
			break;
 8005e3c:	bf00      	nop
		case 3:
			break;
		}

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005e3e:	2010      	movs	r0, #16
 8005e40:	f002 fc5e 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200000c4 	.word	0x200000c4
 8005e50:	20000e8c 	.word	0x20000e8c
 8005e54:	20000360 	.word	0x20000360
 8005e58:	20000368 	.word	0x20000368
 8005e5c:	20000918 	.word	0x20000918

08005e60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	switch(prgm_counter){
 8005e66:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <EXTI9_5_IRQHandler+0x74>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d828      	bhi.n	8005ec0 <EXTI9_5_IRQHandler+0x60>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <EXTI9_5_IRQHandler+0x14>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005ec1 	.word	0x08005ec1
 8005e78:	08005e85 	.word	0x08005e85
 8005e7c:	08005eab 	.word	0x08005eab
 8005e80:	08005ec1 	.word	0x08005ec1
		case 0:
			break;
		case 1:
			if(B1==2){
 8005e84:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <EXTI9_5_IRQHandler+0x78>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d103      	bne.n	8005e94 <EXTI9_5_IRQHandler+0x34>
					B1=0;
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <EXTI9_5_IRQHandler+0x78>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e004      	b.n	8005e9e <EXTI9_5_IRQHandler+0x3e>
				}
				else{
					B1++;
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <EXTI9_5_IRQHandler+0x78>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ed8 <EXTI9_5_IRQHandler+0x78>)
 8005e9c:	6013      	str	r3, [r2, #0]
				}
				aff_select(B1);
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <EXTI9_5_IRQHandler+0x78>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd f822 	bl	8002eec <aff_select>
			break;
 8005ea8:	e00a      	b.n	8005ec0 <EXTI9_5_IRQHandler+0x60>
		case 2:
			move_piece(2,pieces_globales->first,pieces,grid,coord);
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <EXTI9_5_IRQHandler+0x7c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <EXTI9_5_IRQHandler+0x80>)
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <EXTI9_5_IRQHandler+0x84>)
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <EXTI9_5_IRQHandler+0x88>)
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7fb fd6f 	bl	800199c <move_piece>
			break;
 8005ebe:	bf00      	nop
		case 3:
			break;
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005ec0:	2040      	movs	r0, #64	; 0x40
 8005ec2:	f002 fc1d 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005ec6:	2080      	movs	r0, #128	; 0x80
 8005ec8:	f002 fc1a 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200000c4 	.word	0x200000c4
 8005ed8:	200000c0 	.word	0x200000c0
 8005edc:	20000e8c 	.word	0x20000e8c
 8005ee0:	20000360 	.word	0x20000360
 8005ee4:	20000368 	.word	0x20000368
 8005ee8:	20000918 	.word	0x20000918

08005eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	switch(prgm_counter){
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <EXTI15_10_IRQHandler+0x48>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d815      	bhi.n	8005f26 <EXTI15_10_IRQHandler+0x3a>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <EXTI15_10_IRQHandler+0x14>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f27 	.word	0x08005f27
 8005f04:	08005f27 	.word	0x08005f27
 8005f08:	08005f11 	.word	0x08005f11
 8005f0c:	08005f27 	.word	0x08005f27
		case 0:
			break;
		case 1:
			break;
		case 2:
			move_piece(1,pieces_globales->first,pieces,grid,coord);
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <EXTI15_10_IRQHandler+0x4c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <EXTI15_10_IRQHandler+0x50>)
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <EXTI15_10_IRQHandler+0x54>)
 8005f1c:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <EXTI15_10_IRQHandler+0x58>)
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f7fb fd3c 	bl	800199c <move_piece>
			break;
 8005f24:	bf00      	nop
		case 3:
			break;
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005f26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f2a:	f002 fbe9 	bl	8008700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	200000c4 	.word	0x200000c4
 8005f38:	20000e8c 	.word	0x20000e8c
 8005f3c:	20000360 	.word	0x20000360
 8005f40:	20000368 	.word	0x20000368
 8005f44:	20000918 	.word	0x20000918

08005f48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005f4c:	4802      	ldr	r0, [pc, #8]	; (8005f58 <TIM6_DAC_IRQHandler+0x10>)
 8005f4e:	f005 f8cd 	bl	800b0ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000f18 	.word	0x20000f18

08005f5c <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8005f60:	4802      	ldr	r0, [pc, #8]	; (8005f6c <RNG_IRQHandler+0x10>)
 8005f62:	f004 feee 	bl	800ad42 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000e90 	.word	0x20000e90

08005f70 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005f74:	4802      	ldr	r0, [pc, #8]	; (8005f80 <LTDC_IRQHandler+0x10>)
 8005f76:	f003 faf1 	bl	800955c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000d60 	.word	0x20000d60

08005f84 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005f88:	4802      	ldr	r0, [pc, #8]	; (8005f94 <DMA2D_IRQHandler+0x10>)
 8005f8a:	f001 fea9 	bl	8007ce0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000ea0 	.word	0x20000ea0

08005f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
	return 1;
 8005f9c:	2301      	movs	r3, #1
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <_kill>:

int _kill(int pid, int sig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005fb2:	f006 f9ed 	bl	800c390 <__errno>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2216      	movs	r2, #22
 8005fba:	601a      	str	r2, [r3, #0]
	return -1;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_exit>:

void _exit (int status)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ffe7 	bl	8005fa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005fda:	e7fe      	b.n	8005fda <_exit+0x12>

08005fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e00a      	b.n	8006004 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005fee:	f3af 8000 	nop.w
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	60ba      	str	r2, [r7, #8]
 8005ffa:	b2ca      	uxtb	r2, r1
 8005ffc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	dbf0      	blt.n	8005fee <_read+0x12>
	}

return len;
 800600c:	687b      	ldr	r3, [r7, #4]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e009      	b.n	800603c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	60ba      	str	r2, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	3301      	adds	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	dbf1      	blt.n	8006028 <_write+0x12>
	}
	return len;
 8006044:	687b      	ldr	r3, [r7, #4]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <_close>:

int _close(int file)
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
	return -1;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800605a:	4618      	mov	r0, r3
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006076:	605a      	str	r2, [r3, #4]
	return 0;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <_isatty>:

int _isatty(int file)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	return 1;
 800608e:	2301      	movs	r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
	return 0;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060c0:	4a14      	ldr	r2, [pc, #80]	; (8006114 <_sbrk+0x5c>)
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <_sbrk+0x60>)
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060cc:	4b13      	ldr	r3, [pc, #76]	; (800611c <_sbrk+0x64>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060d4:	4b11      	ldr	r3, [pc, #68]	; (800611c <_sbrk+0x64>)
 80060d6:	4a12      	ldr	r2, [pc, #72]	; (8006120 <_sbrk+0x68>)
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <_sbrk+0x64>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d207      	bcs.n	80060f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060e8:	f006 f952 	bl	800c390 <__errno>
 80060ec:	4603      	mov	r3, r0
 80060ee:	220c      	movs	r2, #12
 80060f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f6:	e009      	b.n	800610c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <_sbrk+0x64>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <_sbrk+0x64>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	4a05      	ldr	r2, [pc, #20]	; (800611c <_sbrk+0x64>)
 8006108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20050000 	.word	0x20050000
 8006118:	00000400 	.word	0x00000400
 800611c:	200000d4 	.word	0x200000d4
 8006120:	20001058 	.word	0x20001058

08006124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <SystemInit+0x20>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	4a05      	ldr	r2, [pc, #20]	; (8006144 <SystemInit+0x20>)
 8006130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	e000ed00 	.word	0xe000ed00

08006148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800614c:	480d      	ldr	r0, [pc, #52]	; (8006184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800614e:	490e      	ldr	r1, [pc, #56]	; (8006188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006154:	e002      	b.n	800615c <LoopCopyDataInit>

08006156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800615a:	3304      	adds	r3, #4

0800615c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800615c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800615e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006160:	d3f9      	bcc.n	8006156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006162:	4a0b      	ldr	r2, [pc, #44]	; (8006190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006164:	4c0b      	ldr	r4, [pc, #44]	; (8006194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006168:	e001      	b.n	800616e <LoopFillZerobss>

0800616a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800616a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800616c:	3204      	adds	r2, #4

0800616e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800616e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006170:	d3fb      	bcc.n	800616a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006172:	f7ff ffd7 	bl	8006124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006176:	f006 f911 	bl	800c39c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800617a:	f7fb fe9f 	bl	8001ebc <main>
  bx  lr    
 800617e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006180:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006188:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800618c:	0809d27c 	.word	0x0809d27c
  ldr r2, =_sbss
 8006190:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8006194:	20001054 	.word	0x20001054

08006198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006198:	e7fe      	b.n	8006198 <ADC_IRQHandler>

0800619a <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4603      	mov	r3, r0
 80061a2:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80061a4:	20c8      	movs	r0, #200	; 0xc8
 80061a6:	f000 fb6d 	bl	8006884 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80061aa:	f000 f9b5 	bl	8006518 <ft5336_I2C_InitializeIfRequired>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	4603      	mov	r3, r0
 80061be:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80061de:	2300      	movs	r3, #0
 80061e0:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80061e2:	f000 f999 	bl	8006518 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e010      	b.n	800620e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	21a8      	movs	r1, #168	; 0xa8
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fb28 	bl	8006848 <TS_IO_Read>
 80061f8:	4603      	mov	r3, r0
 80061fa:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80061fc:	7b7b      	ldrb	r3, [r7, #13]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b51      	cmp	r3, #81	; 0x51
 8006202:	d101      	bne.n	8006208 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8006204:	2301      	movs	r3, #1
 8006206:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	3301      	adds	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d802      	bhi.n	800621a <ft5336_ReadID+0x4e>
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0e8      	beq.n	80061ec <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800621a:	7b7b      	ldrb	r3, [r7, #13]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	b29b      	uxth	r3, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f97f 	bl	8006538 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f933 	bl	80064a8 <ft5336_TS_DisableIT>
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2102      	movs	r1, #2
 8006260:	4618      	mov	r0, r3
 8006262:	f000 faf1 	bl	8006848 <TS_IO_Read>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	b2db      	uxtb	r3, r3
 8006274:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b05      	cmp	r3, #5
 800627c:	d901      	bls.n	8006282 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <ft5336_TS_DetectTouch+0x50>)
 8006288:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <ft5336_TS_DetectTouch+0x50>)
 800628c:	2200      	movs	r2, #0
 800628e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	b2db      	uxtb	r3, r3
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200000d8 	.word	0x200000d8

080062a0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80062c2:	4b6d      	ldr	r3, [pc, #436]	; (8006478 <ft5336_TS_GetXY+0x1d8>)
 80062c4:	789a      	ldrb	r2, [r3, #2]
 80062c6:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <ft5336_TS_GetXY+0x1d8>)
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	f080 80cf 	bcs.w	800646e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80062d0:	4b69      	ldr	r3, [pc, #420]	; (8006478 <ft5336_TS_GetXY+0x1d8>)
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d871      	bhi.n	80063bc <ft5336_TS_GetXY+0x11c>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <ft5336_TS_GetXY+0x40>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006309 	.word	0x08006309
 80062e4:	0800631b 	.word	0x0800631b
 80062e8:	0800632d 	.word	0x0800632d
 80062ec:	0800633f 	.word	0x0800633f
 80062f0:	08006351 	.word	0x08006351
 80062f4:	08006363 	.word	0x08006363
 80062f8:	08006375 	.word	0x08006375
 80062fc:	08006387 	.word	0x08006387
 8006300:	08006399 	.word	0x08006399
 8006304:	080063ab 	.word	0x080063ab
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8006308:	2304      	movs	r3, #4
 800630a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800630c:	2303      	movs	r3, #3
 800630e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8006310:	2306      	movs	r3, #6
 8006312:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8006314:	2305      	movs	r3, #5
 8006316:	753b      	strb	r3, [r7, #20]
      break;
 8006318:	e051      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800631a:	230a      	movs	r3, #10
 800631c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800631e:	2309      	movs	r3, #9
 8006320:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8006322:	230c      	movs	r3, #12
 8006324:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8006326:	230b      	movs	r3, #11
 8006328:	753b      	strb	r3, [r7, #20]
      break;
 800632a:	e048      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800632c:	2310      	movs	r3, #16
 800632e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8006330:	230f      	movs	r3, #15
 8006332:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8006334:	2312      	movs	r3, #18
 8006336:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8006338:	2311      	movs	r3, #17
 800633a:	753b      	strb	r3, [r7, #20]
      break;
 800633c:	e03f      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800633e:	2316      	movs	r3, #22
 8006340:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8006342:	2315      	movs	r3, #21
 8006344:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8006346:	2318      	movs	r3, #24
 8006348:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800634a:	2317      	movs	r3, #23
 800634c:	753b      	strb	r3, [r7, #20]
      break;
 800634e:	e036      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8006350:	231c      	movs	r3, #28
 8006352:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8006354:	231b      	movs	r3, #27
 8006356:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8006358:	231e      	movs	r3, #30
 800635a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800635c:	231d      	movs	r3, #29
 800635e:	753b      	strb	r3, [r7, #20]
      break;
 8006360:	e02d      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8006362:	2322      	movs	r3, #34	; 0x22
 8006364:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8006366:	2321      	movs	r3, #33	; 0x21
 8006368:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800636a:	2324      	movs	r3, #36	; 0x24
 800636c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800636e:	2323      	movs	r3, #35	; 0x23
 8006370:	753b      	strb	r3, [r7, #20]
      break;
 8006372:	e024      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8006374:	2328      	movs	r3, #40	; 0x28
 8006376:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8006378:	2327      	movs	r3, #39	; 0x27
 800637a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800637c:	232a      	movs	r3, #42	; 0x2a
 800637e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8006380:	2329      	movs	r3, #41	; 0x29
 8006382:	753b      	strb	r3, [r7, #20]
      break;
 8006384:	e01b      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8006386:	232e      	movs	r3, #46	; 0x2e
 8006388:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800638a:	232d      	movs	r3, #45	; 0x2d
 800638c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800638e:	2330      	movs	r3, #48	; 0x30
 8006390:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8006392:	232f      	movs	r3, #47	; 0x2f
 8006394:	753b      	strb	r3, [r7, #20]
      break;
 8006396:	e012      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8006398:	2334      	movs	r3, #52	; 0x34
 800639a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800639c:	2333      	movs	r3, #51	; 0x33
 800639e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80063a0:	2336      	movs	r3, #54	; 0x36
 80063a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80063a4:	2335      	movs	r3, #53	; 0x35
 80063a6:	753b      	strb	r3, [r7, #20]
      break;
 80063a8:	e009      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80063aa:	233a      	movs	r3, #58	; 0x3a
 80063ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80063ae:	2339      	movs	r3, #57	; 0x39
 80063b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80063b2:	233c      	movs	r3, #60	; 0x3c
 80063b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80063b6:	233b      	movs	r3, #59	; 0x3b
 80063b8:	753b      	strb	r3, [r7, #20]
      break;
 80063ba:	e000      	b.n	80063be <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80063bc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80063be:	89fb      	ldrh	r3, [r7, #14]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	7dfa      	ldrb	r2, [r7, #23]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fa3e 	bl	8006848 <TS_IO_Read>
 80063cc:	4603      	mov	r3, r0
 80063ce:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 80063d8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80063da:	89fb      	ldrh	r3, [r7, #14]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	7dba      	ldrb	r2, [r7, #22]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa30 	bl	8006848 <TS_IO_Read>
 80063e8:	4603      	mov	r3, r0
 80063ea:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063f6:	b21a      	sxth	r2, r3
 80063f8:	4b20      	ldr	r3, [pc, #128]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	b21b      	sxth	r3, r3
 8006402:	b29a      	uxth	r2, r3
 8006404:	4b1d      	ldr	r3, [pc, #116]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 8006406:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 800640a:	881a      	ldrh	r2, [r3, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	7d7a      	ldrb	r2, [r7, #21]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fa15 	bl	8006848 <TS_IO_Read>
 800641e:	4603      	mov	r3, r0
 8006420:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8006422:	7cfb      	ldrb	r3, [r7, #19]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	b29a      	uxth	r2, r3
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 800642a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800642c:	89fb      	ldrh	r3, [r7, #14]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	7d3a      	ldrb	r2, [r7, #20]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fa07 	bl	8006848 <TS_IO_Read>
 800643a:	4603      	mov	r3, r0
 800643c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800643e:	7cfb      	ldrb	r3, [r7, #19]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006448:	b21a      	sxth	r2, r3
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b21b      	sxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b21b      	sxth	r3, r3
 8006454:	b29a      	uxth	r2, r3
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 8006458:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <ft5336_TS_GetXY+0x1dc>)
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <ft5336_TS_GetXY+0x1d8>)
 8006464:	789b      	ldrb	r3, [r3, #2]
 8006466:	3301      	adds	r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b03      	ldr	r3, [pc, #12]	; (8006478 <ft5336_TS_GetXY+0x1d8>)
 800646c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200000d8 	.word	0x200000d8
 800647c:	200000dc 	.word	0x200000dc

08006480 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	7bfa      	ldrb	r2, [r7, #15]
 8006498:	21a4      	movs	r1, #164	; 0xa4
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f9ba 	bl	8006814 <TS_IO_Write>
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	7bfa      	ldrb	r2, [r7, #15]
 80064c0:	21a4      	movs	r1, #164	; 0xa4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f9a6 	bl	8006814 <TS_IO_Write>
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8006506:	781b      	ldrb	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200000d8 	.word	0x200000d8

08006518 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800651c:	f7ff fff0 	bl	8006500 <ft5336_Get_I2C_InitializedStatus>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8006526:	f000 f96b 	bl	8006800 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800652a:	4b02      	ldr	r3, [pc, #8]	; (8006534 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
  }
}
 8006530:	bf00      	nop
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200000d8 	.word	0x200000d8

08006538 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	; 0x30
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a51      	ldr	r2, [pc, #324]	; (80066a4 <I2Cx_MspInit+0x150>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d14d      	bne.n	8006600 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006564:	4b50      	ldr	r3, [pc, #320]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	4a4f      	ldr	r2, [pc, #316]	; (80066a8 <I2Cx_MspInit+0x154>)
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	6313      	str	r3, [r2, #48]	; 0x30
 8006570:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006580:	2312      	movs	r3, #18
 8006582:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006588:	2302      	movs	r3, #2
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800658c:	2304      	movs	r3, #4
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006590:	f107 031c 	add.w	r3, r7, #28
 8006594:	4619      	mov	r1, r3
 8006596:	4845      	ldr	r0, [pc, #276]	; (80066ac <I2Cx_MspInit+0x158>)
 8006598:	f001 fde0 	bl	800815c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800659c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	4619      	mov	r1, r3
 80065a8:	4840      	ldr	r0, [pc, #256]	; (80066ac <I2Cx_MspInit+0x158>)
 80065aa:	f001 fdd7 	bl	800815c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80065ae:	4b3e      	ldr	r3, [pc, #248]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	4a3d      	ldr	r2, [pc, #244]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065b8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ba:	4b3b      	ldr	r3, [pc, #236]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80065c6:	4b38      	ldr	r3, [pc, #224]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065d0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80065d2:	4b35      	ldr	r3, [pc, #212]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <I2Cx_MspInit+0x154>)
 80065d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065dc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80065de:	2200      	movs	r2, #0
 80065e0:	210f      	movs	r1, #15
 80065e2:	2048      	movs	r0, #72	; 0x48
 80065e4:	f000 ff4c 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80065e8:	2048      	movs	r0, #72	; 0x48
 80065ea:	f000 ff65 	bl	80074b8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80065ee:	2200      	movs	r2, #0
 80065f0:	210f      	movs	r1, #15
 80065f2:	2049      	movs	r0, #73	; 0x49
 80065f4:	f000 ff44 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80065f8:	2049      	movs	r0, #73	; 0x49
 80065fa:	f000 ff5d 	bl	80074b8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80065fe:	e04d      	b.n	800669c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006600:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	4a28      	ldr	r2, [pc, #160]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006606:	f043 0302 	orr.w	r3, r3, #2
 800660a:	6313      	str	r3, [r2, #48]	; 0x30
 800660c:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <I2Cx_MspInit+0x154>)
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8006618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800661c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800661e:	2312      	movs	r3, #18
 8006620:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006626:	2302      	movs	r3, #2
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800662a:	2304      	movs	r3, #4
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	4619      	mov	r1, r3
 8006634:	481e      	ldr	r0, [pc, #120]	; (80066b0 <I2Cx_MspInit+0x15c>)
 8006636:	f001 fd91 	bl	800815c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800663a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006640:	f107 031c 	add.w	r3, r7, #28
 8006644:	4619      	mov	r1, r3
 8006646:	481a      	ldr	r0, [pc, #104]	; (80066b0 <I2Cx_MspInit+0x15c>)
 8006648:	f001 fd88 	bl	800815c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <I2Cx_MspInit+0x154>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006656:	6413      	str	r3, [r2, #64]	; 0x40
 8006658:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <I2Cx_MspInit+0x154>)
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006664:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4a0f      	ldr	r2, [pc, #60]	; (80066a8 <I2Cx_MspInit+0x154>)
 800666a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800666e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006670:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <I2Cx_MspInit+0x154>)
 8006676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800667a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800667c:	2200      	movs	r2, #0
 800667e:	210f      	movs	r1, #15
 8006680:	201f      	movs	r0, #31
 8006682:	f000 fefd 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8006686:	201f      	movs	r0, #31
 8006688:	f000 ff16 	bl	80074b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800668c:	2200      	movs	r2, #0
 800668e:	210f      	movs	r1, #15
 8006690:	2020      	movs	r0, #32
 8006692:	f000 fef5 	bl	8007480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8006696:	2020      	movs	r0, #32
 8006698:	f000 ff0e 	bl	80074b8 <HAL_NVIC_EnableIRQ>
}
 800669c:	bf00      	nop
 800669e:	3730      	adds	r7, #48	; 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	200000e0 	.word	0x200000e0
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40021c00 	.word	0x40021c00
 80066b0:	40020400 	.word	0x40020400

080066b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f002 fb31 	bl	8008d24 <HAL_I2C_GetState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d125      	bne.n	8006714 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a14      	ldr	r2, [pc, #80]	; (800671c <I2Cx_Init+0x68>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d103      	bne.n	80066d8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a13      	ldr	r2, [pc, #76]	; (8006720 <I2Cx_Init+0x6c>)
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e002      	b.n	80066de <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <I2Cx_Init+0x70>)
 80066dc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a11      	ldr	r2, [pc, #68]	; (8006728 <I2Cx_Init+0x74>)
 80066e2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff23 	bl	8006554 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 f81a 	bl	8008748 <HAL_I2C_Init>
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	200000e0 	.word	0x200000e0
 8006720:	40005c00 	.word	0x40005c00
 8006724:	40005400 	.word	0x40005400
 8006728:	40912732 	.word	0x40912732

0800672c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af04      	add	r7, sp, #16
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4603      	mov	r3, r0
 800673c:	72fb      	strb	r3, [r7, #11]
 800673e:	460b      	mov	r3, r1
 8006740:	813b      	strh	r3, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	b299      	uxth	r1, r3
 800674e:	88f8      	ldrh	r0, [r7, #6]
 8006750:	893a      	ldrh	r2, [r7, #8]
 8006752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4603      	mov	r3, r0
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f002 f9c4 	bl	8008af0 <HAL_I2C_Mem_Read>
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006772:	7afb      	ldrb	r3, [r7, #11]
 8006774:	4619      	mov	r1, r3
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f832 	bl	80067e0 <I2Cx_Error>
  }
  return status;    
 800677c:	7dfb      	ldrb	r3, [r7, #23]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b08a      	sub	sp, #40	; 0x28
 800678a:	af04      	add	r7, sp, #16
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	461a      	mov	r2, r3
 8006794:	4603      	mov	r3, r0
 8006796:	72fb      	strb	r3, [r7, #11]
 8006798:	460b      	mov	r3, r1
 800679a:	813b      	strh	r3, [r7, #8]
 800679c:	4613      	mov	r3, r2
 800679e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	b299      	uxth	r1, r3
 80067a8:	88f8      	ldrh	r0, [r7, #6]
 80067aa:	893a      	ldrh	r2, [r7, #8]
 80067ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067b0:	9302      	str	r3, [sp, #8]
 80067b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4603      	mov	r3, r0
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f002 f883 	bl	80088c8 <HAL_I2C_Mem_Write>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	4619      	mov	r1, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f805 	bl	80067e0 <I2Cx_Error>
  }
  return status;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f002 f83b 	bl	8008868 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff5e 	bl	80066b4 <I2Cx_Init>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <TS_IO_Init+0x10>)
 8006806:	f7ff ff55 	bl	80066b4 <I2Cx_Init>
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	200000e0 	.word	0x200000e0

08006814 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af02      	add	r7, sp, #8
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	460b      	mov	r3, r1
 8006820:	71bb      	strb	r3, [r7, #6]
 8006822:	4613      	mov	r3, r2
 8006824:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006826:	79bb      	ldrb	r3, [r7, #6]
 8006828:	b29a      	uxth	r2, r3
 800682a:	79f9      	ldrb	r1, [r7, #7]
 800682c:	2301      	movs	r3, #1
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	1d7b      	adds	r3, r7, #5
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2301      	movs	r3, #1
 8006836:	4803      	ldr	r0, [pc, #12]	; (8006844 <TS_IO_Write+0x30>)
 8006838:	f7ff ffa5 	bl	8006786 <I2Cx_WriteMultiple>
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	200000e0 	.word	0x200000e0

08006848 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af02      	add	r7, sp, #8
 800684e:	4603      	mov	r3, r0
 8006850:	460a      	mov	r2, r1
 8006852:	71fb      	strb	r3, [r7, #7]
 8006854:	4613      	mov	r3, r2
 8006856:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800685c:	79bb      	ldrb	r3, [r7, #6]
 800685e:	b29a      	uxth	r2, r3
 8006860:	79f9      	ldrb	r1, [r7, #7]
 8006862:	2301      	movs	r3, #1
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	f107 030f 	add.w	r3, r7, #15
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2301      	movs	r3, #1
 800686e:	4804      	ldr	r0, [pc, #16]	; (8006880 <TS_IO_Read+0x38>)
 8006870:	f7ff ff5c 	bl	800672c <I2Cx_ReadMultiple>

  return read_value;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200000e0 	.word	0x200000e0

08006884 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fd1b 	bl	80072c8 <HAL_Delay>
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80068a0:	4b31      	ldr	r3, [pc, #196]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068a2:	2228      	movs	r2, #40	; 0x28
 80068a4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80068a6:	4b30      	ldr	r3, [pc, #192]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068a8:	2209      	movs	r2, #9
 80068aa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80068ac:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068ae:	2235      	movs	r2, #53	; 0x35
 80068b0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068b4:	220b      	movs	r2, #11
 80068b6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068ba:	f240 121b 	movw	r2, #283	; 0x11b
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80068c0:	4b29      	ldr	r3, [pc, #164]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068c2:	f240 2215 	movw	r2, #533	; 0x215
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80068c8:	4b27      	ldr	r3, [pc, #156]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068ca:	f240 121d 	movw	r2, #285	; 0x11d
 80068ce:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068d2:	f240 2235 	movw	r2, #565	; 0x235
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80068d8:	2100      	movs	r1, #0
 80068da:	4823      	ldr	r0, [pc, #140]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068dc:	f000 fa68 	bl	8006db0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80068e0:	4b21      	ldr	r3, [pc, #132]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80068e8:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068ea:	f44f 7288 	mov.w	r2, #272	; 0x110
 80068ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80068f0:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80068f8:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <BSP_LCD_Init+0xcc>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006900:	4b19      	ldr	r3, [pc, #100]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006908:	4b17      	ldr	r3, [pc, #92]	; (8006968 <BSP_LCD_Init+0xcc>)
 800690a:	2200      	movs	r2, #0
 800690c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800690e:	4b16      	ldr	r3, [pc, #88]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8006914:	4b14      	ldr	r3, [pc, #80]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006916:	2200      	movs	r2, #0
 8006918:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <BSP_LCD_Init+0xcc>)
 800691c:	2200      	movs	r2, #0
 800691e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <BSP_LCD_Init+0xd0>)
 8006924:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8006926:	4810      	ldr	r0, [pc, #64]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006928:	f002 ff18 	bl	800975c <HAL_LTDC_GetState>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8006932:	2100      	movs	r1, #0
 8006934:	480c      	ldr	r0, [pc, #48]	; (8006968 <BSP_LCD_Init+0xcc>)
 8006936:	f000 f961 	bl	8006bfc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800693a:	480b      	ldr	r0, [pc, #44]	; (8006968 <BSP_LCD_Init+0xcc>)
 800693c:	f002 fd3e 	bl	80093bc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006940:	2201      	movs	r2, #1
 8006942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006946:	480a      	ldr	r0, [pc, #40]	; (8006970 <BSP_LCD_Init+0xd4>)
 8006948:	f001 fec0 	bl	80086cc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800694c:	2201      	movs	r2, #1
 800694e:	2108      	movs	r1, #8
 8006950:	4808      	ldr	r0, [pc, #32]	; (8006974 <BSP_LCD_Init+0xd8>)
 8006952:	f001 febb 	bl	80086cc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006956:	f000 fa93 	bl	8006e80 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800695a:	4807      	ldr	r0, [pc, #28]	; (8006978 <BSP_LCD_Init+0xdc>)
 800695c:	f000 f8a6 	bl	8006aac <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000f64 	.word	0x20000f64
 800696c:	40016800 	.word	0x40016800
 8006970:	40022000 	.word	0x40022000
 8006974:	40022800 	.word	0x40022800
 8006978:	20000038 	.word	0x20000038

0800697c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <BSP_LCD_GetXSize+0x20>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <BSP_LCD_GetXSize+0x24>)
 8006986:	2134      	movs	r1, #52	; 0x34
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	4413      	add	r3, r2
 800698e:	3360      	adds	r3, #96	; 0x60
 8006990:	681b      	ldr	r3, [r3, #0]
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000016c 	.word	0x2000016c
 80069a0:	20000f64 	.word	0x20000f64

080069a4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <BSP_LCD_GetYSize+0x20>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <BSP_LCD_GetYSize+0x24>)
 80069ae:	2134      	movs	r1, #52	; 0x34
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	4413      	add	r3, r2
 80069b6:	3364      	adds	r3, #100	; 0x64
 80069b8:	681b      	ldr	r3, [r3, #0]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	2000016c 	.word	0x2000016c
 80069c8:	20000f64 	.word	0x20000f64

080069cc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b090      	sub	sp, #64	; 0x40
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	6039      	str	r1, [r7, #0]
 80069d6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80069dc:	f7ff ffce 	bl	800697c <BSP_LCD_GetXSize>
 80069e0:	4603      	mov	r3, r0
 80069e2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80069e8:	f7ff ffdc 	bl	80069a4 <BSP_LCD_GetYSize>
 80069ec:	4603      	mov	r3, r0
 80069ee:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80069f8:	23ff      	movs	r3, #255	; 0xff
 80069fa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006a12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006a18:	2307      	movs	r3, #7
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006a1c:	f7ff ffae 	bl	800697c <BSP_LCD_GetXSize>
 8006a20:	4603      	mov	r3, r0
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8006a24:	f7ff ffbe 	bl	80069a4 <BSP_LCD_GetYSize>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	4619      	mov	r1, r3
 8006a34:	4812      	ldr	r0, [pc, #72]	; (8006a80 <BSP_LCD_LayerDefaultInit+0xb4>)
 8006a36:	f002 fe53 	bl	80096e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	4911      	ldr	r1, [pc, #68]	; (8006a84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	3304      	adds	r3, #4
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a4e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	490c      	ldr	r1, [pc, #48]	; (8006a84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006a54:	4613      	mov	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3308      	adds	r3, #8
 8006a60:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006a62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	4907      	ldr	r1, [pc, #28]	; (8006a84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3740      	adds	r7, #64	; 0x40
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000f64 	.word	0x20000f64
 8006a84:	20000170 	.word	0x20000170
 8006a88:	20000038 	.word	0x20000038

08006a8c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006a94:	4a04      	ldr	r2, [pc, #16]	; (8006aa8 <BSP_LCD_SelectLayer+0x1c>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
} 
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	2000016c 	.word	0x2000016c

08006aac <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <BSP_LCD_SetFont+0x2c>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4908      	ldr	r1, [pc, #32]	; (8006adc <BSP_LCD_SetFont+0x30>)
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000016c 	.word	0x2000016c
 8006adc:	20000170 	.word	0x20000170

08006ae0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <BSP_LCD_Clear+0x48>)
 8006aea:	681c      	ldr	r4, [r3, #0]
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <BSP_LCD_Clear+0x48>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a0e      	ldr	r2, [pc, #56]	; (8006b2c <BSP_LCD_Clear+0x4c>)
 8006af2:	2134      	movs	r1, #52	; 0x34
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	335c      	adds	r3, #92	; 0x5c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461e      	mov	r6, r3
 8006b00:	f7ff ff3c 	bl	800697c <BSP_LCD_GetXSize>
 8006b04:	4605      	mov	r5, r0
 8006b06:	f7ff ff4d 	bl	80069a4 <BSP_LCD_GetYSize>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	2300      	movs	r3, #0
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	462a      	mov	r2, r5
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f964 	bl	8006de8 <LL_FillBuffer>
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b28:	2000016c 	.word	0x2000016c
 8006b2c:	20000f64 	.word	0x20000f64

08006b30 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006b30:	b5b0      	push	{r4, r5, r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	603a      	str	r2, [r7, #0]
 8006b3a:	80fb      	strh	r3, [r7, #6]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006b40:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <BSP_LCD_DrawPixel+0x88>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <BSP_LCD_DrawPixel+0x8c>)
 8006b46:	2134      	movs	r1, #52	; 0x34
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3348      	adds	r3, #72	; 0x48
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d116      	bne.n	8006b84 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <BSP_LCD_DrawPixel+0x88>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <BSP_LCD_DrawPixel+0x8c>)
 8006b5c:	2134      	movs	r1, #52	; 0x34
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	335c      	adds	r3, #92	; 0x5c
 8006b66:	681c      	ldr	r4, [r3, #0]
 8006b68:	88bd      	ldrh	r5, [r7, #4]
 8006b6a:	f7ff ff07 	bl	800697c <BSP_LCD_GetXSize>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	fb03 f205 	mul.w	r2, r3, r5
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	4413      	add	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4423      	add	r3, r4
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8006b82:	e015      	b.n	8006bb0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <BSP_LCD_DrawPixel+0x88>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0c      	ldr	r2, [pc, #48]	; (8006bbc <BSP_LCD_DrawPixel+0x8c>)
 8006b8a:	2134      	movs	r1, #52	; 0x34
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	335c      	adds	r3, #92	; 0x5c
 8006b94:	681c      	ldr	r4, [r3, #0]
 8006b96:	88bd      	ldrh	r5, [r7, #4]
 8006b98:	f7ff fef0 	bl	800697c <BSP_LCD_GetXSize>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	fb03 f205 	mul.w	r2, r3, r5
 8006ba2:	88fb      	ldrh	r3, [r7, #6]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4423      	add	r3, r4
 8006baa:	461a      	mov	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6013      	str	r3, [r2, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	2000016c 	.word	0x2000016c
 8006bbc:	20000f64 	.word	0x20000f64

08006bc0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <BSP_LCD_DisplayOn+0x30>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <BSP_LCD_DisplayOn+0x30>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bda:	4806      	ldr	r0, [pc, #24]	; (8006bf4 <BSP_LCD_DisplayOn+0x34>)
 8006bdc:	f001 fd76 	bl	80086cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8006be0:	2201      	movs	r2, #1
 8006be2:	2108      	movs	r1, #8
 8006be4:	4804      	ldr	r0, [pc, #16]	; (8006bf8 <BSP_LCD_DisplayOn+0x38>)
 8006be6:	f001 fd71 	bl	80086cc <HAL_GPIO_WritePin>
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000f64 	.word	0x20000f64
 8006bf4:	40022000 	.word	0x40022000
 8006bf8:	40022800 	.word	0x40022800

08006bfc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b090      	sub	sp, #64	; 0x40
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006c06:	4b64      	ldr	r3, [pc, #400]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	4a63      	ldr	r2, [pc, #396]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c10:	6453      	str	r3, [r2, #68]	; 0x44
 8006c12:	4b61      	ldr	r3, [pc, #388]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006c1e:	4b5e      	ldr	r3, [pc, #376]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a5d      	ldr	r2, [pc, #372]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c36:	4b58      	ldr	r3, [pc, #352]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	4a57      	ldr	r2, [pc, #348]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c3c:	f043 0310 	orr.w	r3, r3, #16
 8006c40:	6313      	str	r3, [r2, #48]	; 0x30
 8006c42:	4b55      	ldr	r3, [pc, #340]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	623b      	str	r3, [r7, #32]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c4e:	4b52      	ldr	r3, [pc, #328]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	4a51      	ldr	r2, [pc, #324]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c58:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5a:	4b4f      	ldr	r3, [pc, #316]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	61fb      	str	r3, [r7, #28]
 8006c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006c66:	4b4c      	ldr	r3, [pc, #304]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	4a4b      	ldr	r2, [pc, #300]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c70:	6313      	str	r3, [r2, #48]	; 0x30
 8006c72:	4b49      	ldr	r3, [pc, #292]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006c7e:	4b46      	ldr	r3, [pc, #280]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	4a45      	ldr	r2, [pc, #276]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b43      	ldr	r3, [pc, #268]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006c96:	4b40      	ldr	r3, [pc, #256]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca2:	4b3d      	ldr	r3, [pc, #244]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006cae:	4b3a      	ldr	r3, [pc, #232]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	4a39      	ldr	r2, [pc, #228]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cba:	4b37      	ldr	r3, [pc, #220]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006cc6:	4b34      	ldr	r3, [pc, #208]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	4a33      	ldr	r2, [pc, #204]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd2:	4b31      	ldr	r3, [pc, #196]	; (8006d98 <BSP_LCD_MspInit+0x19c>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006cde:	2310      	movs	r3, #16
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006cea:	2302      	movs	r3, #2
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006cee:	230e      	movs	r3, #14
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4828      	ldr	r0, [pc, #160]	; (8006d9c <BSP_LCD_MspInit+0x1a0>)
 8006cfa:	f001 fa2f 	bl	800815c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d04:	2302      	movs	r3, #2
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006d08:	2309      	movs	r3, #9
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d10:	4619      	mov	r1, r3
 8006d12:	4823      	ldr	r0, [pc, #140]	; (8006da0 <BSP_LCD_MspInit+0x1a4>)
 8006d14:	f001 fa22 	bl	800815c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006d18:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d22:	230e      	movs	r3, #14
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	481d      	ldr	r0, [pc, #116]	; (8006da4 <BSP_LCD_MspInit+0x1a8>)
 8006d2e:	f001 fa15 	bl	800815c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006d32:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d3c:	230e      	movs	r3, #14
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d44:	4619      	mov	r1, r3
 8006d46:	4818      	ldr	r0, [pc, #96]	; (8006da8 <BSP_LCD_MspInit+0x1ac>)
 8006d48:	f001 fa08 	bl	800815c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006d4c:	23f7      	movs	r3, #247	; 0xf7
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d50:	2302      	movs	r3, #2
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006d54:	230e      	movs	r3, #14
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4813      	ldr	r0, [pc, #76]	; (8006dac <BSP_LCD_MspInit+0x1b0>)
 8006d60:	f001 f9fc 	bl	800815c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d72:	4619      	mov	r1, r3
 8006d74:	480b      	ldr	r0, [pc, #44]	; (8006da4 <BSP_LCD_MspInit+0x1a8>)
 8006d76:	f001 f9f1 	bl	800815c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d86:	4619      	mov	r1, r3
 8006d88:	4808      	ldr	r0, [pc, #32]	; (8006dac <BSP_LCD_MspInit+0x1b0>)
 8006d8a:	f001 f9e7 	bl	800815c <HAL_GPIO_Init>
}
 8006d8e:	bf00      	nop
 8006d90:	3740      	adds	r7, #64	; 0x40
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40021800 	.word	0x40021800
 8006da4:	40022000 	.word	0x40022000
 8006da8:	40022400 	.word	0x40022400
 8006dac:	40022800 	.word	0x40022800

08006db0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <BSP_LCD_ClockConfig+0x34>)
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <BSP_LCD_ClockConfig+0x34>)
 8006dc2:	22c0      	movs	r2, #192	; 0xc0
 8006dc4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <BSP_LCD_ClockConfig+0x34>)
 8006dc8:	2205      	movs	r2, #5
 8006dca:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <BSP_LCD_ClockConfig+0x34>)
 8006dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006dd4:	4803      	ldr	r0, [pc, #12]	; (8006de4 <BSP_LCD_ClockConfig+0x34>)
 8006dd6:	f003 fb75 	bl	800a4c4 <HAL_RCCEx_PeriphCLKConfig>
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000188 	.word	0x20000188

08006de8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006df6:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <LL_FillBuffer+0x88>)
 8006df8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006dfc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <LL_FillBuffer+0x8c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <LL_FillBuffer+0x90>)
 8006e04:	2134      	movs	r1, #52	; 0x34
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3348      	adds	r3, #72	; 0x48
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d103      	bne.n	8006e1c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e16:	2202      	movs	r2, #2
 8006e18:	609a      	str	r2, [r3, #8]
 8006e1a:	e002      	b.n	8006e22 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006e1c:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006e22:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e2a:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <LL_FillBuffer+0x94>)
 8006e2c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006e2e:	4810      	ldr	r0, [pc, #64]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e30:	f000 fdf8 	bl	8007a24 <HAL_DMA2D_Init>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d115      	bne.n	8006e66 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	480c      	ldr	r0, [pc, #48]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e3e:	f001 f85f 	bl	8007f00 <HAL_DMA2D_ConfigLayer>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10e      	bne.n	8006e66 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	4807      	ldr	r0, [pc, #28]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e54:	f000 fe30 	bl	8007ab8 <HAL_DMA2D_Start>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006e5e:	210a      	movs	r1, #10
 8006e60:	4803      	ldr	r0, [pc, #12]	; (8006e70 <LL_FillBuffer+0x88>)
 8006e62:	f000 fe54 	bl	8007b0e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000012c 	.word	0x2000012c
 8006e74:	2000016c 	.word	0x2000016c
 8006e78:	20000f64 	.word	0x20000f64
 8006e7c:	4002b000 	.word	0x4002b000

08006e80 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006e84:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006e86:	4a2a      	ldr	r2, [pc, #168]	; (8006f30 <BSP_SDRAM_Init+0xb0>)
 8006e88:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006e8a:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006e92:	2207      	movs	r2, #7
 8006e94:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006e96:	4b27      	ldr	r3, [pc, #156]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006e98:	2204      	movs	r2, #4
 8006e9a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006e9c:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006ea2:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006ea8:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006eaa:	2202      	movs	r2, #2
 8006eac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006eae:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006eb4:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006eba:	4b1c      	ldr	r3, [pc, #112]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006ec6:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ec8:	2210      	movs	r2, #16
 8006eca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006ecc:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ece:	2240      	movs	r2, #64	; 0x40
 8006ed0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006ed2:	4b16      	ldr	r3, [pc, #88]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006ee8:	4b10      	ldr	r3, [pc, #64]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	480c      	ldr	r0, [pc, #48]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006efa:	f000 f87f 	bl	8006ffc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006efe:	490d      	ldr	r1, [pc, #52]	; (8006f34 <BSP_SDRAM_Init+0xb4>)
 8006f00:	480a      	ldr	r0, [pc, #40]	; (8006f2c <BSP_SDRAM_Init+0xac>)
 8006f02:	f003 ff89 	bl	800ae18 <HAL_SDRAM_Init>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <BSP_SDRAM_Init+0xb8>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e002      	b.n	8006f1a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <BSP_SDRAM_Init+0xb8>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006f1a:	f240 6003 	movw	r0, #1539	; 0x603
 8006f1e:	f000 f80d 	bl	8006f3c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006f22:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <BSP_SDRAM_Init+0xb8>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2000100c 	.word	0x2000100c
 8006f30:	a0000140 	.word	0xa0000140
 8006f34:	2000020c 	.word	0x2000020c
 8006f38:	2000002c 	.word	0x2000002c

08006f3c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006f48:	4b2a      	ldr	r3, [pc, #168]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f50:	2210      	movs	r2, #16
 8006f52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006f54:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f64:	4923      	ldr	r1, [pc, #140]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f66:	4824      	ldr	r0, [pc, #144]	; (8006ff8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f68:	f003 ff8a 	bl	800ae80 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	f000 f9ab 	bl	80072c8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006f72:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f74:	2202      	movs	r2, #2
 8006f76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006f84:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f8e:	4919      	ldr	r1, [pc, #100]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f90:	4819      	ldr	r0, [pc, #100]	; (8006ff8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f92:	f003 ff75 	bl	800ae80 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006f96:	4b17      	ldr	r3, [pc, #92]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f98:	2203      	movs	r2, #3
 8006f9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006f9c:	4b15      	ldr	r3, [pc, #84]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006fa2:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006fa8:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fb2:	4910      	ldr	r1, [pc, #64]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fb4:	4810      	ldr	r0, [pc, #64]	; (8006ff8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fb6:	f003 ff63 	bl	800ae80 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006fba:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006fbe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fc8:	2210      	movs	r2, #16
 8006fca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fd6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fdc:	4905      	ldr	r1, [pc, #20]	; (8006ff4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fde:	4806      	ldr	r0, [pc, #24]	; (8006ff8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fe0:	f003 ff4e 	bl	800ae80 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4804      	ldr	r0, [pc, #16]	; (8006ff8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fe8:	f003 ff7f 	bl	800aeea <HAL_SDRAM_ProgramRefreshRate>
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000228 	.word	0x20000228
 8006ff8:	2000100c 	.word	0x2000100c

08006ffc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b090      	sub	sp, #64	; 0x40
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007006:	4b70      	ldr	r3, [pc, #448]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	4a6f      	ldr	r2, [pc, #444]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6393      	str	r3, [r2, #56]	; 0x38
 8007012:	4b6d      	ldr	r3, [pc, #436]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800701e:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4a69      	ldr	r2, [pc, #420]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007028:	6313      	str	r3, [r2, #48]	; 0x30
 800702a:	4b67      	ldr	r3, [pc, #412]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007036:	4b64      	ldr	r3, [pc, #400]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	4a63      	ldr	r2, [pc, #396]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6313      	str	r3, [r2, #48]	; 0x30
 8007042:	4b61      	ldr	r3, [pc, #388]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	623b      	str	r3, [r7, #32]
 800704c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800704e:	4b5e      	ldr	r3, [pc, #376]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	4a5d      	ldr	r2, [pc, #372]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007054:	f043 0308 	orr.w	r3, r3, #8
 8007058:	6313      	str	r3, [r2, #48]	; 0x30
 800705a:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007066:	4b58      	ldr	r3, [pc, #352]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	4a57      	ldr	r2, [pc, #348]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800706c:	f043 0310 	orr.w	r3, r3, #16
 8007070:	6313      	str	r3, [r2, #48]	; 0x30
 8007072:	4b55      	ldr	r3, [pc, #340]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800707e:	4b52      	ldr	r3, [pc, #328]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a51      	ldr	r2, [pc, #324]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007084:	f043 0320 	orr.w	r3, r3, #32
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b4f      	ldr	r3, [pc, #316]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007096:	4b4c      	ldr	r3, [pc, #304]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	4a4b      	ldr	r2, [pc, #300]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 800709c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a0:	6313      	str	r3, [r2, #48]	; 0x30
 80070a2:	4b49      	ldr	r3, [pc, #292]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070ae:	4b46      	ldr	r3, [pc, #280]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	4a45      	ldr	r2, [pc, #276]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 80070b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ba:	4b43      	ldr	r3, [pc, #268]	; (80071c8 <BSP_SDRAM_MspInit+0x1cc>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80070c6:	2302      	movs	r3, #2
 80070c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80070ca:	2301      	movs	r3, #1
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80070ce:	2302      	movs	r3, #2
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80070d2:	230c      	movs	r3, #12
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80070d6:	2308      	movs	r3, #8
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80070da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	483a      	ldr	r0, [pc, #232]	; (80071cc <BSP_SDRAM_MspInit+0x1d0>)
 80070e2:	f001 f83b 	bl	800815c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80070e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80070ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070f0:	4619      	mov	r1, r3
 80070f2:	4837      	ldr	r0, [pc, #220]	; (80071d0 <BSP_SDRAM_MspInit+0x1d4>)
 80070f4:	f001 f832 	bl	800815c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80070f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80070fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007102:	4619      	mov	r1, r3
 8007104:	4833      	ldr	r0, [pc, #204]	; (80071d4 <BSP_SDRAM_MspInit+0x1d8>)
 8007106:	f001 f829 	bl	800815c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800710a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007114:	4619      	mov	r1, r3
 8007116:	4830      	ldr	r0, [pc, #192]	; (80071d8 <BSP_SDRAM_MspInit+0x1dc>)
 8007118:	f001 f820 	bl	800815c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800711c:	f248 1333 	movw	r3, #33075	; 0x8133
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007126:	4619      	mov	r1, r3
 8007128:	482c      	ldr	r0, [pc, #176]	; (80071dc <BSP_SDRAM_MspInit+0x1e0>)
 800712a:	f001 f817 	bl	800815c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800712e:	2328      	movs	r3, #40	; 0x28
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007136:	4619      	mov	r1, r3
 8007138:	4829      	ldr	r0, [pc, #164]	; (80071e0 <BSP_SDRAM_MspInit+0x1e4>)
 800713a:	f001 f80f 	bl	800815c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800713e:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800714a:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007158:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800715a:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800715c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007160:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007168:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800716a:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800716c:	2200      	movs	r2, #0
 800716e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007170:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007176:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800717a:	2200      	movs	r2, #0
 800717c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800717e:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007180:	2203      	movs	r2, #3
 8007182:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007186:	2200      	movs	r2, #0
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007190:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 8007192:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <BSP_SDRAM_MspInit+0x1ec>)
 8007194:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800719a:	631a      	str	r2, [r3, #48]	; 0x30
 800719c:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80071a2:	4810      	ldr	r0, [pc, #64]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 80071a4:	f000 fb2e 	bl	8007804 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80071a8:	480e      	ldr	r0, [pc, #56]	; (80071e4 <BSP_SDRAM_MspInit+0x1e8>)
 80071aa:	f000 fa7d 	bl	80076a8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80071ae:	2200      	movs	r2, #0
 80071b0:	210f      	movs	r1, #15
 80071b2:	2038      	movs	r0, #56	; 0x38
 80071b4:	f000 f964 	bl	8007480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80071b8:	2038      	movs	r0, #56	; 0x38
 80071ba:	f000 f97d 	bl	80074b8 <HAL_NVIC_EnableIRQ>
}
 80071be:	bf00      	nop
 80071c0:	3740      	adds	r7, #64	; 0x40
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40020800 	.word	0x40020800
 80071d0:	40020c00 	.word	0x40020c00
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40021400 	.word	0x40021400
 80071dc:	40021800 	.word	0x40021800
 80071e0:	40021c00 	.word	0x40021c00
 80071e4:	20000238 	.word	0x20000238
 80071e8:	40026410 	.word	0x40026410

080071ec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	460a      	mov	r2, r1
 80071f6:	80fb      	strh	r3, [r7, #6]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007200:	4a14      	ldr	r2, [pc, #80]	; (8007254 <BSP_TS_Init+0x68>)
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <BSP_TS_Init+0x6c>)
 8007208:	88bb      	ldrh	r3, [r7, #4]
 800720a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800720c:	4b13      	ldr	r3, [pc, #76]	; (800725c <BSP_TS_Init+0x70>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2070      	movs	r0, #112	; 0x70
 8007212:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <BSP_TS_Init+0x70>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2070      	movs	r0, #112	; 0x70
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	2b51      	cmp	r3, #81	; 0x51
 8007220:	d111      	bne.n	8007246 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <BSP_TS_Init+0x74>)
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <BSP_TS_Init+0x70>)
 8007226:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <BSP_TS_Init+0x78>)
 800722a:	2270      	movs	r2, #112	; 0x70
 800722c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <BSP_TS_Init+0x7c>)
 8007230:	2208      	movs	r2, #8
 8007232:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <BSP_TS_Init+0x74>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <BSP_TS_Init+0x78>)
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	b292      	uxth	r2, r2
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	e001      	b.n	800724a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007246:	2303      	movs	r3, #3
 8007248:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800724a:	7bfb      	ldrb	r3, [r7, #15]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	2000029c 	.word	0x2000029c
 8007258:	2000029e 	.word	0x2000029e
 800725c:	20000004 	.word	0x20000004
 8007260:	20000298 	.word	0x20000298
 8007264:	200002a1 	.word	0x200002a1
 8007268:	200002a0 	.word	0x200002a0

0800726c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007270:	2003      	movs	r0, #3
 8007272:	f000 f8fa 	bl	800746a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007276:	2000      	movs	r0, #0
 8007278:	f7fe fcc8 	bl	8005c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800727c:	f7fe fa08 	bl	8005690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_IncTick+0x20>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <HAL_IncTick+0x24>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4413      	add	r3, r2
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <HAL_IncTick+0x24>)
 800729a:	6013      	str	r3, [r2, #0]
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20000034 	.word	0x20000034
 80072ac:	20001040 	.word	0x20001040

080072b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  return uwTick;
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <HAL_GetTick+0x14>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20001040 	.word	0x20001040

080072c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072d0:	f7ff ffee 	bl	80072b0 <HAL_GetTick>
 80072d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e0:	d005      	beq.n	80072ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072e2:	4b0a      	ldr	r3, [pc, #40]	; (800730c <HAL_Delay+0x44>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80072ee:	bf00      	nop
 80072f0:	f7ff ffde 	bl	80072b0 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d8f7      	bhi.n	80072f0 <HAL_Delay+0x28>
  {
  }
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000034 	.word	0x20000034

08007310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <__NVIC_SetPriorityGrouping+0x40>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800732c:	4013      	ands	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007338:	4b06      	ldr	r3, [pc, #24]	; (8007354 <__NVIC_SetPriorityGrouping+0x44>)
 800733a:	4313      	orrs	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800733e:	4a04      	ldr	r2, [pc, #16]	; (8007350 <__NVIC_SetPriorityGrouping+0x40>)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	60d3      	str	r3, [r2, #12]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	e000ed00 	.word	0xe000ed00
 8007354:	05fa0000 	.word	0x05fa0000

08007358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800735c:	4b04      	ldr	r3, [pc, #16]	; (8007370 <__NVIC_GetPriorityGrouping+0x18>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	f003 0307 	and.w	r3, r3, #7
}
 8007366:	4618      	mov	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	e000ed00 	.word	0xe000ed00

08007374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800737e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007382:	2b00      	cmp	r3, #0
 8007384:	db0b      	blt.n	800739e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	f003 021f 	and.w	r2, r3, #31
 800738c:	4907      	ldr	r1, [pc, #28]	; (80073ac <__NVIC_EnableIRQ+0x38>)
 800738e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2001      	movs	r0, #1
 8007396:	fa00 f202 	lsl.w	r2, r0, r2
 800739a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	e000e100 	.word	0xe000e100

080073b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	6039      	str	r1, [r7, #0]
 80073ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	db0a      	blt.n	80073da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	490c      	ldr	r1, [pc, #48]	; (80073fc <__NVIC_SetPriority+0x4c>)
 80073ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ce:	0112      	lsls	r2, r2, #4
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	440b      	add	r3, r1
 80073d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073d8:	e00a      	b.n	80073f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	4908      	ldr	r1, [pc, #32]	; (8007400 <__NVIC_SetPriority+0x50>)
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	3b04      	subs	r3, #4
 80073e8:	0112      	lsls	r2, r2, #4
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	440b      	add	r3, r1
 80073ee:	761a      	strb	r2, [r3, #24]
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	e000e100 	.word	0xe000e100
 8007400:	e000ed00 	.word	0xe000ed00

08007404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007404:	b480      	push	{r7}
 8007406:	b089      	sub	sp, #36	; 0x24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf28      	it	cs
 8007422:	2304      	movcs	r3, #4
 8007424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	3304      	adds	r3, #4
 800742a:	2b06      	cmp	r3, #6
 800742c:	d902      	bls.n	8007434 <NVIC_EncodePriority+0x30>
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3b03      	subs	r3, #3
 8007432:	e000      	b.n	8007436 <NVIC_EncodePriority+0x32>
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43da      	mvns	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	401a      	ands	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800744c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	fa01 f303 	lsl.w	r3, r1, r3
 8007456:	43d9      	mvns	r1, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800745c:	4313      	orrs	r3, r2
         );
}
 800745e:	4618      	mov	r0, r3
 8007460:	3724      	adds	r7, #36	; 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff ff4c 	bl	8007310 <__NVIC_SetPriorityGrouping>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007492:	f7ff ff61 	bl	8007358 <__NVIC_GetPriorityGrouping>
 8007496:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f7ff ffb1 	bl	8007404 <NVIC_EncodePriority>
 80074a2:	4602      	mov	r2, r0
 80074a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff ff80 	bl	80073b0 <__NVIC_SetPriority>
}
 80074b0:	bf00      	nop
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff ff54 	bl	8007374 <__NVIC_EnableIRQ>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e054      	b.n	8007590 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7f5b      	ldrb	r3, [r3, #29]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fe f8f2 	bl	80056e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	791b      	ldrb	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10c      	bne.n	8007524 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a22      	ldr	r2, [pc, #136]	; (8007598 <HAL_CRC_Init+0xc4>)
 8007510:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0218 	bic.w	r2, r2, #24
 8007520:	609a      	str	r2, [r3, #8]
 8007522:	e00c      	b.n	800753e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6899      	ldr	r1, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	461a      	mov	r2, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f834 	bl	800759c <HAL_CRCEx_Polynomial_Set>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e028      	b.n	8007590 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	795b      	ldrb	r3, [r3, #5]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754e:	611a      	str	r2, [r3, #16]
 8007550:	e004      	b.n	800755c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6912      	ldr	r2, [r2, #16]
 800755a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	04c11db7 	.word	0x04c11db7

0800759c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80075ac:	231f      	movs	r3, #31
 80075ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80075b0:	bf00      	nop
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1e5a      	subs	r2, r3, #1
 80075b6:	613a      	str	r2, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d009      	beq.n	80075d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <HAL_CRCEx_Polynomial_Set+0x16>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b18      	cmp	r3, #24
 80075d4:	d846      	bhi.n	8007664 <HAL_CRCEx_Polynomial_Set+0xc8>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	0800766b 	.word	0x0800766b
 80075e0:	08007665 	.word	0x08007665
 80075e4:	08007665 	.word	0x08007665
 80075e8:	08007665 	.word	0x08007665
 80075ec:	08007665 	.word	0x08007665
 80075f0:	08007665 	.word	0x08007665
 80075f4:	08007665 	.word	0x08007665
 80075f8:	08007665 	.word	0x08007665
 80075fc:	08007659 	.word	0x08007659
 8007600:	08007665 	.word	0x08007665
 8007604:	08007665 	.word	0x08007665
 8007608:	08007665 	.word	0x08007665
 800760c:	08007665 	.word	0x08007665
 8007610:	08007665 	.word	0x08007665
 8007614:	08007665 	.word	0x08007665
 8007618:	08007665 	.word	0x08007665
 800761c:	0800764d 	.word	0x0800764d
 8007620:	08007665 	.word	0x08007665
 8007624:	08007665 	.word	0x08007665
 8007628:	08007665 	.word	0x08007665
 800762c:	08007665 	.word	0x08007665
 8007630:	08007665 	.word	0x08007665
 8007634:	08007665 	.word	0x08007665
 8007638:	08007665 	.word	0x08007665
 800763c:	08007641 	.word	0x08007641
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b06      	cmp	r3, #6
 8007644:	d913      	bls.n	800766e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800764a:	e010      	b.n	800766e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b07      	cmp	r3, #7
 8007650:	d90f      	bls.n	8007672 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007656:	e00c      	b.n	8007672 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d90b      	bls.n	8007676 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007662:	e008      	b.n	8007676 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	e006      	b.n	8007678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800766a:	bf00      	nop
 800766c:	e004      	b.n	8007678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007676:	bf00      	nop
  }
  if (status == HAL_OK)
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f023 0118 	bic.w	r1, r3, #24
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80076b4:	f7ff fdfc 	bl	80072b0 <HAL_GetTick>
 80076b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e099      	b.n	80077f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076e4:	e00f      	b.n	8007706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076e6:	f7ff fde3 	bl	80072b0 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b05      	cmp	r3, #5
 80076f2:	d908      	bls.n	8007706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2203      	movs	r2, #3
 80076fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e078      	b.n	80077f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e8      	bne.n	80076e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4b38      	ldr	r3, [pc, #224]	; (8007800 <HAL_DMA_Init+0x158>)
 8007720:	4013      	ands	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800773e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800774a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	2b04      	cmp	r3, #4
 800775e:	d107      	bne.n	8007770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	4313      	orrs	r3, r2
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b04      	cmp	r3, #4
 8007798:	d117      	bne.n	80077ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f8bd 	bl	800792c <DMA_CheckFifoParam>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d008      	beq.n	80077ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80077c6:	2301      	movs	r3, #1
 80077c8:	e016      	b.n	80077f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f874 	bl	80078c0 <DMA_CalcBaseAndBitshift>
 80077d8:	4603      	mov	r3, r0
 80077da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	223f      	movs	r2, #63	; 0x3f
 80077e2:	409a      	lsls	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	f010803f 	.word	0xf010803f

08007804 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e050      	b.n	80078b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d101      	bne.n	8007826 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	e048      	b.n	80078b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0201 	bic.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2200      	movs	r2, #0
 8007844:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2221      	movs	r2, #33	; 0x21
 8007864:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f82a 	bl	80078c0 <DMA_CalcBaseAndBitshift>
 800786c:	4603      	mov	r3, r0
 800786e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	223f      	movs	r2, #63	; 0x3f
 8007876:	409a      	lsls	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	3b10      	subs	r3, #16
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <DMA_CalcBaseAndBitshift+0x60>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078da:	4a12      	ldr	r2, [pc, #72]	; (8007924 <DMA_CalcBaseAndBitshift+0x64>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d908      	bls.n	8007900 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <DMA_CalcBaseAndBitshift+0x68>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	1d1a      	adds	r2, r3, #4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58
 80078fe:	e006      	b.n	800790e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <DMA_CalcBaseAndBitshift+0x68>)
 8007908:	4013      	ands	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	aaaaaaab 	.word	0xaaaaaaab
 8007924:	0809b660 	.word	0x0809b660
 8007928:	fffffc00 	.word	0xfffffc00

0800792c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d11f      	bne.n	8007986 <DMA_CheckFifoParam+0x5a>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d856      	bhi.n	80079fa <DMA_CheckFifoParam+0xce>
 800794c:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <DMA_CheckFifoParam+0x28>)
 800794e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007952:	bf00      	nop
 8007954:	08007965 	.word	0x08007965
 8007958:	08007977 	.word	0x08007977
 800795c:	08007965 	.word	0x08007965
 8007960:	080079fb 	.word	0x080079fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d046      	beq.n	80079fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007974:	e043      	b.n	80079fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800797e:	d140      	bne.n	8007a02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007984:	e03d      	b.n	8007a02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798e:	d121      	bne.n	80079d4 <DMA_CheckFifoParam+0xa8>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b03      	cmp	r3, #3
 8007994:	d837      	bhi.n	8007a06 <DMA_CheckFifoParam+0xda>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <DMA_CheckFifoParam+0x70>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079ad 	.word	0x080079ad
 80079a0:	080079b3 	.word	0x080079b3
 80079a4:	080079ad 	.word	0x080079ad
 80079a8:	080079c5 	.word	0x080079c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e030      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d025      	beq.n	8007a0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079c2:	e022      	b.n	8007a0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079cc:	d11f      	bne.n	8007a0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079d2:	e01c      	b.n	8007a0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d903      	bls.n	80079e2 <DMA_CheckFifoParam+0xb6>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d003      	beq.n	80079e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80079e0:	e018      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	73fb      	strb	r3, [r7, #15]
      break;
 80079e6:	e015      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00e      	beq.n	8007a12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
      break;
 80079f8:	e00b      	b.n	8007a12 <DMA_CheckFifoParam+0xe6>
      break;
 80079fa:	bf00      	nop
 80079fc:	e00a      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;
 80079fe:	bf00      	nop
 8007a00:	e008      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;
 8007a02:	bf00      	nop
 8007a04:	e006      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;
 8007a06:	bf00      	nop
 8007a08:	e004      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;
 8007a0a:	bf00      	nop
 8007a0c:	e002      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <DMA_CheckFifoParam+0xe8>
      break;
 8007a12:	bf00      	nop
    }
  } 
  
  return status; 
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop

08007a24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e039      	b.n	8007aaa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fd fe68 	bl	8005720 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	f023 0107 	bic.w	r1, r3, #7
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_DMA2D_Init+0x90>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68d1      	ldr	r1, [r2, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	430b      	orrs	r3, r1
 8007a98:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	ffffc000 	.word	0xffffc000

08007ab8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_DMA2D_Start+0x1c>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e018      	b.n	8007b06 <HAL_DMA2D_Start+0x4e>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fa98 	bl	8008024 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d056      	beq.n	8007bd8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b2a:	f7ff fbc1 	bl	80072b0 <HAL_GetTick>
 8007b2e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b30:	e04b      	b.n	8007bca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d023      	beq.n	8007b8c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	f043 0202 	orr.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	f043 0201 	orr.w	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2221      	movs	r2, #33	; 0x21
 8007b76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0a5      	b.n	8007cd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b92:	d01a      	beq.n	8007bca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b94:	f7ff fb8c 	bl	80072b0 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <HAL_DMA2D_PollForTransfer+0x9c>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10f      	bne.n	8007bca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	f043 0220 	orr.w	r2, r3, #32
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2203      	movs	r2, #3
 8007bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e086      	b.n	8007cd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ac      	beq.n	8007b32 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d061      	beq.n	8007cbe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bfa:	f7ff fb59 	bl	80072b0 <HAL_GetTick>
 8007bfe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c00:	e056      	b.n	8007cb0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d02e      	beq.n	8007c72 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c22:	f043 0204 	orr.w	r2, r3, #4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c38:	f043 0202 	orr.w	r2, r3, #2
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	f043 0201 	orr.w	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2229      	movs	r2, #41	; 0x29
 8007c5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2204      	movs	r2, #4
 8007c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e032      	b.n	8007cd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c78:	d01a      	beq.n	8007cb0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c7a:	f7ff fb19 	bl	80072b0 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d302      	bcc.n	8007c90 <HAL_DMA2D_PollForTransfer+0x182>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10f      	bne.n	8007cb0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	f043 0220 	orr.w	r2, r3, #32
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e013      	b.n	8007cd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0a1      	beq.n	8007c02 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2212      	movs	r2, #18
 8007cc4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d026      	beq.n	8007d50 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d021      	beq.n	8007d50 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d1a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	f043 0201 	orr.w	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2204      	movs	r2, #4
 8007d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d026      	beq.n	8007da8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d021      	beq.n	8007da8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d72:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d80:	f043 0202 	orr.w	r2, r3, #2
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2204      	movs	r2, #4
 8007d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d026      	beq.n	8007e00 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d021      	beq.n	8007e00 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	f043 0204 	orr.w	r2, r3, #4
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2204      	movs	r2, #4
 8007de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d013      	beq.n	8007e32 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e22:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f853 	bl	8007ed8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d024      	beq.n	8007e86 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01f      	beq.n	8007e86 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01f      	beq.n	8007ed0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01a      	beq.n	8007ed0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ea8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f80e 	bl	8007eec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_DMA2D_ConfigLayer+0x20>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e079      	b.n	8008014 <HAL_DMA2D_ConfigLayer+0x114>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	3318      	adds	r3, #24
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007f4a:	4b35      	ldr	r3, [pc, #212]	; (8008020 <HAL_DMA2D_ConfigLayer+0x120>)
 8007f4c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2b0a      	cmp	r3, #10
 8007f54:	d003      	beq.n	8007f5e <HAL_DMA2D_ConfigLayer+0x5e>
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b09      	cmp	r3, #9
 8007f5c:	d107      	bne.n	8007f6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	e005      	b.n	8007f7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d120      	bne.n	8007fc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	ea02 0103 	and.w	r1, r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b0a      	cmp	r3, #10
 8007fa8:	d003      	beq.n	8007fb2 <HAL_DMA2D_ConfigLayer+0xb2>
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d127      	bne.n	8008002 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc0:	e01f      	b.n	8008002 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	ea02 0103 	and.w	r1, r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b0a      	cmp	r3, #10
 8007fea:	d003      	beq.n	8007ff4 <HAL_DMA2D_ConfigLayer+0xf4>
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	d106      	bne.n	8008002 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008000:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	ff03000f 	.word	0xff03000f

08008024 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008024:	b480      	push	{r7}
 8008026:	b08b      	sub	sp, #44	; 0x2c
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	041a      	lsls	r2, r3, #16
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	431a      	orrs	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800805c:	d174      	bne.n	8008148 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008064:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800806c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008074:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	431a      	orrs	r2, r3
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	4313      	orrs	r3, r2
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
 8008094:	e053      	b.n	800813e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d106      	bne.n	80080ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
 80080aa:	e048      	b.n	800813e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d111      	bne.n	80080d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	0cdb      	lsrs	r3, r3, #19
 80080b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	0a9b      	lsrs	r3, r3, #10
 80080be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	08db      	lsrs	r3, r3, #3
 80080c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	02db      	lsls	r3, r3, #11
 80080ce:	4313      	orrs	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
 80080d6:	e032      	b.n	800813e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d117      	bne.n	8008110 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	0fdb      	lsrs	r3, r3, #31
 80080e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	0cdb      	lsrs	r3, r3, #19
 80080ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	0adb      	lsrs	r3, r3, #11
 80080f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	08db      	lsrs	r3, r3, #3
 80080f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	431a      	orrs	r2, r3
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	03db      	lsls	r3, r3, #15
 8008106:	4313      	orrs	r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	e016      	b.n	800813e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	0f1b      	lsrs	r3, r3, #28
 8008114:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	0b1b      	lsrs	r3, r3, #12
 8008120:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	091b      	lsrs	r3, r3, #4
 8008126:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	011a      	lsls	r2, r3, #4
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	431a      	orrs	r2, r3
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	031b      	lsls	r3, r3, #12
 8008136:	4313      	orrs	r3, r2
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008146:	e003      	b.n	8008150 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	60da      	str	r2, [r3, #12]
}
 8008150:	bf00      	nop
 8008152:	372c      	adds	r7, #44	; 0x2c
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800815c:	b480      	push	{r7}
 800815e:	b089      	sub	sp, #36	; 0x24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e175      	b.n	8008468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800817c:	2201      	movs	r2, #1
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4013      	ands	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	429a      	cmp	r2, r3
 8008196:	f040 8164 	bne.w	8008462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d005      	beq.n	80081b2 <HAL_GPIO_Init+0x56>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d130      	bne.n	8008214 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	2203      	movs	r2, #3
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4013      	ands	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	4313      	orrs	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081e8:	2201      	movs	r2, #1
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	43db      	mvns	r3, r3
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	4013      	ands	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 0201 	and.w	r2, r3, #1
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	4313      	orrs	r3, r2
 800820c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	2b03      	cmp	r3, #3
 800821e:	d017      	beq.n	8008250 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	2203      	movs	r2, #3
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	4013      	ands	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	4313      	orrs	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d123      	bne.n	80082a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	08da      	lsrs	r2, r3, #3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3208      	adds	r2, #8
 8008264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	220f      	movs	r2, #15
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	43db      	mvns	r3, r3
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	4013      	ands	r3, r2
 800827e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	4313      	orrs	r3, r2
 8008294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	08da      	lsrs	r2, r3, #3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3208      	adds	r2, #8
 800829e:	69b9      	ldr	r1, [r7, #24]
 80082a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	2203      	movs	r2, #3
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	43db      	mvns	r3, r3
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	4013      	ands	r3, r2
 80082ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f003 0203 	and.w	r2, r3, #3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80be 	beq.w	8008462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e6:	4b66      	ldr	r3, [pc, #408]	; (8008480 <HAL_GPIO_Init+0x324>)
 80082e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ea:	4a65      	ldr	r2, [pc, #404]	; (8008480 <HAL_GPIO_Init+0x324>)
 80082ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082f0:	6453      	str	r3, [r2, #68]	; 0x44
 80082f2:	4b63      	ldr	r3, [pc, #396]	; (8008480 <HAL_GPIO_Init+0x324>)
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80082fe:	4a61      	ldr	r2, [pc, #388]	; (8008484 <HAL_GPIO_Init+0x328>)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	3302      	adds	r3, #2
 8008306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	220f      	movs	r2, #15
 8008316:	fa02 f303 	lsl.w	r3, r2, r3
 800831a:	43db      	mvns	r3, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	4013      	ands	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a58      	ldr	r2, [pc, #352]	; (8008488 <HAL_GPIO_Init+0x32c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d037      	beq.n	800839a <HAL_GPIO_Init+0x23e>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a57      	ldr	r2, [pc, #348]	; (800848c <HAL_GPIO_Init+0x330>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d031      	beq.n	8008396 <HAL_GPIO_Init+0x23a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a56      	ldr	r2, [pc, #344]	; (8008490 <HAL_GPIO_Init+0x334>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d02b      	beq.n	8008392 <HAL_GPIO_Init+0x236>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a55      	ldr	r2, [pc, #340]	; (8008494 <HAL_GPIO_Init+0x338>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d025      	beq.n	800838e <HAL_GPIO_Init+0x232>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a54      	ldr	r2, [pc, #336]	; (8008498 <HAL_GPIO_Init+0x33c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01f      	beq.n	800838a <HAL_GPIO_Init+0x22e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a53      	ldr	r2, [pc, #332]	; (800849c <HAL_GPIO_Init+0x340>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d019      	beq.n	8008386 <HAL_GPIO_Init+0x22a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a52      	ldr	r2, [pc, #328]	; (80084a0 <HAL_GPIO_Init+0x344>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_GPIO_Init+0x226>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a51      	ldr	r2, [pc, #324]	; (80084a4 <HAL_GPIO_Init+0x348>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00d      	beq.n	800837e <HAL_GPIO_Init+0x222>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a50      	ldr	r2, [pc, #320]	; (80084a8 <HAL_GPIO_Init+0x34c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d007      	beq.n	800837a <HAL_GPIO_Init+0x21e>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a4f      	ldr	r2, [pc, #316]	; (80084ac <HAL_GPIO_Init+0x350>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d101      	bne.n	8008376 <HAL_GPIO_Init+0x21a>
 8008372:	2309      	movs	r3, #9
 8008374:	e012      	b.n	800839c <HAL_GPIO_Init+0x240>
 8008376:	230a      	movs	r3, #10
 8008378:	e010      	b.n	800839c <HAL_GPIO_Init+0x240>
 800837a:	2308      	movs	r3, #8
 800837c:	e00e      	b.n	800839c <HAL_GPIO_Init+0x240>
 800837e:	2307      	movs	r3, #7
 8008380:	e00c      	b.n	800839c <HAL_GPIO_Init+0x240>
 8008382:	2306      	movs	r3, #6
 8008384:	e00a      	b.n	800839c <HAL_GPIO_Init+0x240>
 8008386:	2305      	movs	r3, #5
 8008388:	e008      	b.n	800839c <HAL_GPIO_Init+0x240>
 800838a:	2304      	movs	r3, #4
 800838c:	e006      	b.n	800839c <HAL_GPIO_Init+0x240>
 800838e:	2303      	movs	r3, #3
 8008390:	e004      	b.n	800839c <HAL_GPIO_Init+0x240>
 8008392:	2302      	movs	r3, #2
 8008394:	e002      	b.n	800839c <HAL_GPIO_Init+0x240>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <HAL_GPIO_Init+0x240>
 800839a:	2300      	movs	r3, #0
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	f002 0203 	and.w	r2, r2, #3
 80083a2:	0092      	lsls	r2, r2, #2
 80083a4:	4093      	lsls	r3, r2
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80083ac:	4935      	ldr	r1, [pc, #212]	; (8008484 <HAL_GPIO_Init+0x328>)
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	089b      	lsrs	r3, r3, #2
 80083b2:	3302      	adds	r3, #2
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083ba:	4b3d      	ldr	r3, [pc, #244]	; (80084b0 <HAL_GPIO_Init+0x354>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	43db      	mvns	r3, r3
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	4013      	ands	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083de:	4a34      	ldr	r2, [pc, #208]	; (80084b0 <HAL_GPIO_Init+0x354>)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083e4:	4b32      	ldr	r3, [pc, #200]	; (80084b0 <HAL_GPIO_Init+0x354>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	43db      	mvns	r3, r3
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	4013      	ands	r3, r2
 80083f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008408:	4a29      	ldr	r2, [pc, #164]	; (80084b0 <HAL_GPIO_Init+0x354>)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800840e:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <HAL_GPIO_Init+0x354>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	43db      	mvns	r3, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4013      	ands	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008432:	4a1f      	ldr	r2, [pc, #124]	; (80084b0 <HAL_GPIO_Init+0x354>)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008438:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <HAL_GPIO_Init+0x354>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	43db      	mvns	r3, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4013      	ands	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800845c:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <HAL_GPIO_Init+0x354>)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	3301      	adds	r3, #1
 8008466:	61fb      	str	r3, [r7, #28]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	f67f ae86 	bls.w	800817c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40023800 	.word	0x40023800
 8008484:	40013800 	.word	0x40013800
 8008488:	40020000 	.word	0x40020000
 800848c:	40020400 	.word	0x40020400
 8008490:	40020800 	.word	0x40020800
 8008494:	40020c00 	.word	0x40020c00
 8008498:	40021000 	.word	0x40021000
 800849c:	40021400 	.word	0x40021400
 80084a0:	40021800 	.word	0x40021800
 80084a4:	40021c00 	.word	0x40021c00
 80084a8:	40022000 	.word	0x40022000
 80084ac:	40022400 	.word	0x40022400
 80084b0:	40013c00 	.word	0x40013c00

080084b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e0d9      	b.n	8008684 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80084d0:	2201      	movs	r2, #1
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4013      	ands	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	f040 80c9 	bne.w	800867e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80084ec:	4a6b      	ldr	r2, [pc, #428]	; (800869c <HAL_GPIO_DeInit+0x1e8>)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	089b      	lsrs	r3, r3, #2
 80084f2:	3302      	adds	r3, #2
 80084f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	220f      	movs	r2, #15
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	4013      	ands	r3, r2
 800850c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a63      	ldr	r2, [pc, #396]	; (80086a0 <HAL_GPIO_DeInit+0x1ec>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d037      	beq.n	8008586 <HAL_GPIO_DeInit+0xd2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a62      	ldr	r2, [pc, #392]	; (80086a4 <HAL_GPIO_DeInit+0x1f0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d031      	beq.n	8008582 <HAL_GPIO_DeInit+0xce>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a61      	ldr	r2, [pc, #388]	; (80086a8 <HAL_GPIO_DeInit+0x1f4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d02b      	beq.n	800857e <HAL_GPIO_DeInit+0xca>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a60      	ldr	r2, [pc, #384]	; (80086ac <HAL_GPIO_DeInit+0x1f8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d025      	beq.n	800857a <HAL_GPIO_DeInit+0xc6>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a5f      	ldr	r2, [pc, #380]	; (80086b0 <HAL_GPIO_DeInit+0x1fc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01f      	beq.n	8008576 <HAL_GPIO_DeInit+0xc2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a5e      	ldr	r2, [pc, #376]	; (80086b4 <HAL_GPIO_DeInit+0x200>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d019      	beq.n	8008572 <HAL_GPIO_DeInit+0xbe>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a5d      	ldr	r2, [pc, #372]	; (80086b8 <HAL_GPIO_DeInit+0x204>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <HAL_GPIO_DeInit+0xba>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a5c      	ldr	r2, [pc, #368]	; (80086bc <HAL_GPIO_DeInit+0x208>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00d      	beq.n	800856a <HAL_GPIO_DeInit+0xb6>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a5b      	ldr	r2, [pc, #364]	; (80086c0 <HAL_GPIO_DeInit+0x20c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <HAL_GPIO_DeInit+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a5a      	ldr	r2, [pc, #360]	; (80086c4 <HAL_GPIO_DeInit+0x210>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <HAL_GPIO_DeInit+0xae>
 800855e:	2309      	movs	r3, #9
 8008560:	e012      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008562:	230a      	movs	r3, #10
 8008564:	e010      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008566:	2308      	movs	r3, #8
 8008568:	e00e      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 800856a:	2307      	movs	r3, #7
 800856c:	e00c      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 800856e:	2306      	movs	r3, #6
 8008570:	e00a      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008572:	2305      	movs	r3, #5
 8008574:	e008      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008576:	2304      	movs	r3, #4
 8008578:	e006      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 800857a:	2303      	movs	r3, #3
 800857c:	e004      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 800857e:	2302      	movs	r3, #2
 8008580:	e002      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <HAL_GPIO_DeInit+0xd4>
 8008586:	2300      	movs	r3, #0
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	f002 0203 	and.w	r2, r2, #3
 800858e:	0092      	lsls	r2, r2, #2
 8008590:	4093      	lsls	r3, r2
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	429a      	cmp	r2, r3
 8008596:	d132      	bne.n	80085fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008598:	4b4b      	ldr	r3, [pc, #300]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	43db      	mvns	r3, r3
 80085a0:	4949      	ldr	r1, [pc, #292]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80085a6:	4b48      	ldr	r3, [pc, #288]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	4946      	ldr	r1, [pc, #280]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80085b4:	4b44      	ldr	r3, [pc, #272]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	43db      	mvns	r3, r3
 80085bc:	4942      	ldr	r1, [pc, #264]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085be:	4013      	ands	r3, r2
 80085c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80085c2:	4b41      	ldr	r3, [pc, #260]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	43db      	mvns	r3, r3
 80085ca:	493f      	ldr	r1, [pc, #252]	; (80086c8 <HAL_GPIO_DeInit+0x214>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	220f      	movs	r2, #15
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80085e0:	4a2e      	ldr	r2, [pc, #184]	; (800869c <HAL_GPIO_DeInit+0x1e8>)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	089b      	lsrs	r3, r3, #2
 80085e6:	3302      	adds	r3, #2
 80085e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	43da      	mvns	r2, r3
 80085f0:	482a      	ldr	r0, [pc, #168]	; (800869c <HAL_GPIO_DeInit+0x1e8>)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	089b      	lsrs	r3, r3, #2
 80085f6:	400a      	ands	r2, r1
 80085f8:	3302      	adds	r3, #2
 80085fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	2103      	movs	r1, #3
 8008608:	fa01 f303 	lsl.w	r3, r1, r3
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	08da      	lsrs	r2, r3, #3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3208      	adds	r2, #8
 800861c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	220f      	movs	r2, #15
 800862a:	fa02 f303 	lsl.w	r3, r2, r3
 800862e:	43db      	mvns	r3, r3
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	08d2      	lsrs	r2, r2, #3
 8008634:	4019      	ands	r1, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3208      	adds	r2, #8
 800863a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	2103      	movs	r1, #3
 8008648:	fa01 f303 	lsl.w	r3, r1, r3
 800864c:	43db      	mvns	r3, r3
 800864e:	401a      	ands	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	2101      	movs	r1, #1
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	43db      	mvns	r3, r3
 8008662:	401a      	ands	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	2103      	movs	r1, #3
 8008672:	fa01 f303 	lsl.w	r3, r1, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	401a      	ands	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	3301      	adds	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b0f      	cmp	r3, #15
 8008688:	f67f af22 	bls.w	80084d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40013800 	.word	0x40013800
 80086a0:	40020000 	.word	0x40020000
 80086a4:	40020400 	.word	0x40020400
 80086a8:	40020800 	.word	0x40020800
 80086ac:	40020c00 	.word	0x40020c00
 80086b0:	40021000 	.word	0x40021000
 80086b4:	40021400 	.word	0x40021400
 80086b8:	40021800 	.word	0x40021800
 80086bc:	40021c00 	.word	0x40021c00
 80086c0:	40022000 	.word	0x40022000
 80086c4:	40022400 	.word	0x40022400
 80086c8:	40013c00 	.word	0x40013c00

080086cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
 80086d8:	4613      	mov	r3, r2
 80086da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086dc:	787b      	ldrb	r3, [r7, #1]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80086e8:	e003      	b.n	80086f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80086ea:	887b      	ldrh	r3, [r7, #2]
 80086ec:	041a      	lsls	r2, r3, #16
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	619a      	str	r2, [r3, #24]
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800870a:	4b08      	ldr	r3, [pc, #32]	; (800872c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800870c:	695a      	ldr	r2, [r3, #20]
 800870e:	88fb      	ldrh	r3, [r7, #6]
 8008710:	4013      	ands	r3, r2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008716:	4a05      	ldr	r2, [pc, #20]	; (800872c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008718:	88fb      	ldrh	r3, [r7, #6]
 800871a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f806 	bl	8008730 <HAL_GPIO_EXTI_Callback>
  }
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	40013c00 	.word	0x40013c00

08008730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e07f      	b.n	800885a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fc fffc 	bl	800576c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2224      	movs	r2, #36	; 0x24
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008798:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d107      	bne.n	80087c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e006      	b.n	80087d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80087ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d104      	bne.n	80087e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6859      	ldr	r1, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <HAL_I2C_Init+0x11c>)
 80087ee:	430b      	orrs	r3, r1
 80087f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691a      	ldr	r2, [r3, #16]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69d9      	ldr	r1, [r3, #28]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	02008000 	.word	0x02008000

08008868 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e021      	b.n	80088be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2224      	movs	r2, #36	; 0x24
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0201 	bic.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fc ffae 	bl	80057f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	817b      	strh	r3, [r7, #10]
 80088da:	460b      	mov	r3, r1
 80088dc:	813b      	strh	r3, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	f040 80f9 	bne.w	8008ae2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_I2C_Mem_Write+0x34>
 80088f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008902:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0ed      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_I2C_Mem_Write+0x4e>
 8008912:	2302      	movs	r3, #2
 8008914:	e0e6      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800891e:	f7fe fcc7 	bl	80072b0 <HAL_GetTick>
 8008922:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2319      	movs	r3, #25
 800892a:	2201      	movs	r2, #1
 800892c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fad1 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0d1      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2221      	movs	r2, #33	; 0x21
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2240      	movs	r2, #64	; 0x40
 800894c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008968:	88f8      	ldrh	r0, [r7, #6]
 800896a:	893a      	ldrh	r2, [r7, #8]
 800896c:	8979      	ldrh	r1, [r7, #10]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4603      	mov	r3, r0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f9e1 	bl	8008d40 <I2C_RequestMemoryWrite>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0a9      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008994:	b29b      	uxth	r3, r3
 8008996:	2bff      	cmp	r3, #255	; 0xff
 8008998:	d90e      	bls.n	80089b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	22ff      	movs	r2, #255	; 0xff
 800899e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	8979      	ldrh	r1, [r7, #10]
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fc39 	bl	8009228 <I2C_TransferConfig>
 80089b6:	e00f      	b.n	80089d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	8979      	ldrh	r1, [r7, #10]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 fc28 	bl	8009228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fabb 	bl	8008f58 <I2C_WaitOnTXISFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07b      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d034      	beq.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d130      	bne.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	2200      	movs	r2, #0
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fa4d 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e04d      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2bff      	cmp	r3, #255	; 0xff
 8008a50:	d90e      	bls.n	8008a70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	22ff      	movs	r2, #255	; 0xff
 8008a56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	8979      	ldrh	r1, [r7, #10]
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fbdd 	bl	8009228 <I2C_TransferConfig>
 8008a6e:	e00f      	b.n	8008a90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	8979      	ldrh	r1, [r7, #10]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fbcc 	bl	8009228 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d19e      	bne.n	80089d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fa9a 	bl	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e01a      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6859      	ldr	r1, [r3, #4]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_I2C_Mem_Write+0x224>)
 8008ac2:	400b      	ands	r3, r1
 8008ac4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ae2:	2302      	movs	r3, #2
  }
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	fe00e800 	.word	0xfe00e800

08008af0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	461a      	mov	r2, r3
 8008afe:	4603      	mov	r3, r0
 8008b00:	817b      	strh	r3, [r7, #10]
 8008b02:	460b      	mov	r3, r1
 8008b04:	813b      	strh	r3, [r7, #8]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	f040 80fd 	bne.w	8008d12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <HAL_I2C_Mem_Read+0x34>
 8008b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0f1      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_I2C_Mem_Read+0x4e>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e0ea      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b46:	f7fe fbb3 	bl	80072b0 <HAL_GetTick>
 8008b4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	2319      	movs	r3, #25
 8008b52:	2201      	movs	r2, #1
 8008b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f9bd 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0d5      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2222      	movs	r2, #34	; 0x22
 8008b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2240      	movs	r2, #64	; 0x40
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b90:	88f8      	ldrh	r0, [r7, #6]
 8008b92:	893a      	ldrh	r2, [r7, #8]
 8008b94:	8979      	ldrh	r1, [r7, #10]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f921 	bl	8008de8 <I2C_RequestMemoryRead>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0ad      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2bff      	cmp	r3, #255	; 0xff
 8008bc0:	d90e      	bls.n	8008be0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	8979      	ldrh	r1, [r7, #10]
 8008bd0:	4b52      	ldr	r3, [pc, #328]	; (8008d1c <HAL_I2C_Mem_Read+0x22c>)
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fb25 	bl	8009228 <I2C_TransferConfig>
 8008bde:	e00f      	b.n	8008c00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	8979      	ldrh	r1, [r7, #10]
 8008bf2:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <HAL_I2C_Mem_Read+0x22c>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fb14 	bl	8009228 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2200      	movs	r2, #0
 8008c08:	2104      	movs	r1, #4
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f964 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e07c      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d034      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d130      	bne.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	2200      	movs	r2, #0
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f935 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e04d      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2bff      	cmp	r3, #255	; 0xff
 8008c80:	d90e      	bls.n	8008ca0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	8979      	ldrh	r1, [r7, #10]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 fac5 	bl	8009228 <I2C_TransferConfig>
 8008c9e:	e00f      	b.n	8008cc0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	8979      	ldrh	r1, [r7, #10]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fab4 	bl	8009228 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d19a      	bne.n	8008c00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f982 	bl	8008fd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e01a      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6859      	ldr	r1, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_I2C_Mem_Read+0x230>)
 8008cf2:	400b      	ands	r3, r1
 8008cf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	80002400 	.word	0x80002400
 8008d20:	fe00e800 	.word	0xfe00e800

08008d24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d32:	b2db      	uxtb	r3, r3
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	4608      	mov	r0, r1
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	817b      	strh	r3, [r7, #10]
 8008d52:	460b      	mov	r3, r1
 8008d54:	813b      	strh	r3, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	8979      	ldrh	r1, [r7, #10]
 8008d60:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <I2C_RequestMemoryWrite+0xa4>)
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fa5d 	bl	8009228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	69b9      	ldr	r1, [r7, #24]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 f8f0 	bl	8008f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e02c      	b.n	8008ddc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d105      	bne.n	8008d94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	629a      	str	r2, [r3, #40]	; 0x28
 8008d92:	e015      	b.n	8008dc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d94:	893b      	ldrh	r3, [r7, #8]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f000 f8d6 	bl	8008f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e012      	b.n	8008ddc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db6:	893b      	ldrh	r3, [r7, #8]
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2180      	movs	r1, #128	; 0x80
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 f884 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	80002000 	.word	0x80002000

08008de8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	817b      	strh	r3, [r7, #10]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	813b      	strh	r3, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	8979      	ldrh	r1, [r7, #10]
 8008e08:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <I2C_RequestMemoryRead+0xa4>)
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fa0a 	bl	8009228 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	69b9      	ldr	r1, [r7, #24]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f89d 	bl	8008f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e02c      	b.n	8008e82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d105      	bne.n	8008e3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
 8008e38:	e015      	b.n	8008e66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e3a:	893b      	ldrh	r3, [r7, #8]
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	69b9      	ldr	r1, [r7, #24]
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f883 	bl	8008f58 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e012      	b.n	8008e82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e5c:	893b      	ldrh	r3, [r7, #8]
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2140      	movs	r1, #64	; 0x40
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f831 	bl	8008ed8 <I2C_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e000      	b.n	8008e82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	80002000 	.word	0x80002000

08008e90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d103      	bne.n	8008eae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d007      	beq.n	8008ecc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	619a      	str	r2, [r3, #24]
  }
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ee8:	e022      	b.n	8008f30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef0:	d01e      	beq.n	8008f30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef2:	f7fe f9dd 	bl	80072b0 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d302      	bcc.n	8008f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d113      	bne.n	8008f30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	f043 0220 	orr.w	r2, r3, #32
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e00f      	b.n	8008f50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	bf0c      	ite	eq
 8008f40:	2301      	moveq	r3, #1
 8008f42:	2300      	movne	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d0cd      	beq.n	8008eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f64:	e02c      	b.n	8008fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 f870 	bl	8009050 <I2C_IsErrorOccurred>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e02a      	b.n	8008fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f80:	d01e      	beq.n	8008fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f82:	f7fe f995 	bl	80072b0 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d302      	bcc.n	8008f98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d113      	bne.n	8008fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9c:	f043 0220 	orr.w	r2, r3, #32
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e007      	b.n	8008fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d1cb      	bne.n	8008f66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fe4:	e028      	b.n	8009038 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 f830 	bl	8009050 <I2C_IsErrorOccurred>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e026      	b.n	8009048 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ffa:	f7fe f959 	bl	80072b0 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d302      	bcc.n	8009010 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d113      	bne.n	8009038 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009014:	f043 0220 	orr.w	r2, r3, #32
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e007      	b.n	8009048 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b20      	cmp	r3, #32
 8009044:	d1cf      	bne.n	8008fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f003 0310 	and.w	r3, r3, #16
 8009078:	2b00      	cmp	r3, #0
 800907a:	d075      	beq.n	8009168 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2210      	movs	r2, #16
 8009082:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009084:	e056      	b.n	8009134 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800908c:	d052      	beq.n	8009134 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800908e:	f7fe f90f 	bl	80072b0 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	429a      	cmp	r2, r3
 800909c:	d302      	bcc.n	80090a4 <I2C_IsErrorOccurred+0x54>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d147      	bne.n	8009134 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c6:	d12e      	bne.n	8009126 <I2C_IsErrorOccurred+0xd6>
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ce:	d02a      	beq.n	8009126 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80090d0:	7cfb      	ldrb	r3, [r7, #19]
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d027      	beq.n	8009126 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090e4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80090e6:	f7fe f8e3 	bl	80072b0 <HAL_GetTick>
 80090ea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090ec:	e01b      	b.n	8009126 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80090ee:	f7fe f8df 	bl	80072b0 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	2b19      	cmp	r3, #25
 80090fa:	d914      	bls.n	8009126 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009100:	f043 0220 	orr.w	r2, r3, #32
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b20      	cmp	r3, #32
 8009132:	d1dc      	bne.n	80090ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b20      	cmp	r3, #32
 8009140:	d003      	beq.n	800914a <I2C_IsErrorOccurred+0xfa>
 8009142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009146:	2b00      	cmp	r3, #0
 8009148:	d09d      	beq.n	8009086 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800914a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2220      	movs	r2, #32
 8009158:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	f043 0304 	orr.w	r3, r3, #4
 8009160:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	f043 0301 	orr.w	r3, r3, #1
 8009180:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800918a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	f043 0308 	orr.w	r3, r3, #8
 80091a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	f043 0302 	orr.w	r3, r3, #2
 80091c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80091d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01c      	beq.n	8009218 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fe56 	bl	8008e90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6859      	ldr	r1, [r3, #4]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <I2C_IsErrorOccurred+0x1d4>)
 80091f0:	400b      	ands	r3, r1
 80091f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800921c:	4618      	mov	r0, r3
 800921e:	3728      	adds	r7, #40	; 0x28
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	fe00e800 	.word	0xfe00e800

08009228 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	607b      	str	r3, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	817b      	strh	r3, [r7, #10]
 8009236:	4613      	mov	r3, r2
 8009238:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800923a:	897b      	ldrh	r3, [r7, #10]
 800923c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009240:	7a7b      	ldrb	r3, [r7, #9]
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009248:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	4313      	orrs	r3, r2
 8009252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009256:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	0d5b      	lsrs	r3, r3, #21
 8009262:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009266:	4b08      	ldr	r3, [pc, #32]	; (8009288 <I2C_TransferConfig+0x60>)
 8009268:	430b      	orrs	r3, r1
 800926a:	43db      	mvns	r3, r3
 800926c:	ea02 0103 	and.w	r1, r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	03ff63ff 	.word	0x03ff63ff

0800928c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d138      	bne.n	8009314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e032      	b.n	8009316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2224      	movs	r2, #36	; 0x24
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6819      	ldr	r1, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	e000      	b.n	8009316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009314:	2302      	movs	r3, #2
  }
}
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009322:	b480      	push	{r7}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b20      	cmp	r3, #32
 8009336:	d139      	bne.n	80093ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009342:	2302      	movs	r3, #2
 8009344:	e033      	b.n	80093ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2224      	movs	r2, #36	; 0x24
 8009352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	021b      	lsls	r3, r3, #8
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0201 	orr.w	r2, r2, #1
 8009396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e000      	b.n	80093ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093ac:	2302      	movs	r3, #2
  }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e0bf      	b.n	800954e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fc fa28 	bl	8005838 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80093fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009414:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6899      	ldr	r1, [r3, #8]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b4a      	ldr	r3, [pc, #296]	; (8009558 <HAL_LTDC_Init+0x19c>)
 8009430:	400b      	ands	r3, r1
 8009432:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6899      	ldr	r1, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699a      	ldr	r2, [r3, #24]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68d9      	ldr	r1, [r3, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b3e      	ldr	r3, [pc, #248]	; (8009558 <HAL_LTDC_Init+0x19c>)
 800945e:	400b      	ands	r3, r1
 8009460:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	041b      	lsls	r3, r3, #16
 8009468:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68d9      	ldr	r1, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a1a      	ldr	r2, [r3, #32]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6919      	ldr	r1, [r3, #16]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b33      	ldr	r3, [pc, #204]	; (8009558 <HAL_LTDC_Init+0x19c>)
 800948c:	400b      	ands	r3, r1
 800948e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6919      	ldr	r1, [r3, #16]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6959      	ldr	r1, [r3, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	4b27      	ldr	r3, [pc, #156]	; (8009558 <HAL_LTDC_Init+0x19c>)
 80094ba:	400b      	ands	r3, r1
 80094bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	041b      	lsls	r3, r3, #16
 80094c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6959      	ldr	r1, [r3, #20]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80094fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009512:	431a      	orrs	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0206 	orr.w	r2, r2, #6
 800952a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	f000f800 	.word	0xf000f800

0800955c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d023      	beq.n	80095c6 <HAL_LTDC_IRQHandler+0x6a>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01e      	beq.n	80095c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0204 	bic.w	r2, r2, #4
 8009596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2204      	movs	r2, #4
 800959e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095a6:	f043 0201 	orr.w	r2, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2204      	movs	r2, #4
 80095b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f86f 	bl	80096a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d023      	beq.n	8009618 <HAL_LTDC_IRQHandler+0xbc>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01e      	beq.n	8009618 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0202 	bic.w	r2, r2, #2
 80095e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2202      	movs	r2, #2
 80095f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095f8:	f043 0202 	orr.w	r2, r3, #2
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2204      	movs	r2, #4
 8009606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f846 	bl	80096a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d01b      	beq.n	800965a <HAL_LTDC_IRQHandler+0xfe>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d016      	beq.n	800965a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2201      	movs	r2, #1
 8009642:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f82f 	bl	80096b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01b      	beq.n	800969c <HAL_LTDC_IRQHandler+0x140>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0208 	bic.w	r2, r2, #8
 800967c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2208      	movs	r2, #8
 8009684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f818 	bl	80096cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80096e0:	b5b0      	push	{r4, r5, r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_LTDC_ConfigLayer+0x1a>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e02c      	b.n	8009754 <HAL_LTDC_ConfigLayer+0x74>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2134      	movs	r1, #52	; 0x34
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	4413      	add	r3, r2
 8009716:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	4614      	mov	r4, r2
 800971e:	461d      	mov	r5, r3
 8009720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800972a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 f81f 	bl	8009778 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2201      	movs	r2, #1
 8009740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bdb0      	pop	{r4, r5, r7, pc}

0800975c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800976a:	b2db      	uxtb	r3, r3
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009778:	b480      	push	{r7}
 800977a:	b089      	sub	sp, #36	; 0x24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009794:	4413      	add	r3, r2
 8009796:	041b      	lsls	r3, r3, #16
 8009798:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	01db      	lsls	r3, r3, #7
 80097a4:	4413      	add	r3, r2
 80097a6:	3384      	adds	r3, #132	; 0x84
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	4611      	mov	r1, r2
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	01d2      	lsls	r2, r2, #7
 80097b4:	440a      	add	r2, r1
 80097b6:	3284      	adds	r2, #132	; 0x84
 80097b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80097bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ce:	4413      	add	r3, r2
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4619      	mov	r1, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	01db      	lsls	r3, r3, #7
 80097dc:	440b      	add	r3, r1
 80097de:	3384      	adds	r3, #132	; 0x84
 80097e0:	4619      	mov	r1, r3
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097f6:	4413      	add	r3, r2
 80097f8:	041b      	lsls	r3, r3, #16
 80097fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	01db      	lsls	r3, r3, #7
 8009806:	4413      	add	r3, r2
 8009808:	3384      	adds	r3, #132	; 0x84
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	4611      	mov	r1, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	01d2      	lsls	r2, r2, #7
 8009816:	440a      	add	r2, r1
 8009818:	3284      	adds	r2, #132	; 0x84
 800981a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800981e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800982e:	4413      	add	r3, r2
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4619      	mov	r1, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	01db      	lsls	r3, r3, #7
 800983c:	440b      	add	r3, r1
 800983e:	3384      	adds	r3, #132	; 0x84
 8009840:	4619      	mov	r1, r3
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4313      	orrs	r3, r2
 8009846:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	01db      	lsls	r3, r3, #7
 8009852:	4413      	add	r3, r2
 8009854:	3384      	adds	r3, #132	; 0x84
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	4611      	mov	r1, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	01d2      	lsls	r2, r2, #7
 8009862:	440a      	add	r2, r1
 8009864:	3284      	adds	r2, #132	; 0x84
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	01db      	lsls	r3, r3, #7
 8009876:	4413      	add	r3, r2
 8009878:	3384      	adds	r3, #132	; 0x84
 800987a:	461a      	mov	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	061b      	lsls	r3, r3, #24
 800989c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	01db      	lsls	r3, r3, #7
 80098a8:	4413      	add	r3, r2
 80098aa:	3384      	adds	r3, #132	; 0x84
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	01db      	lsls	r3, r3, #7
 80098b8:	4413      	add	r3, r2
 80098ba:	3384      	adds	r3, #132	; 0x84
 80098bc:	461a      	mov	r2, r3
 80098be:	2300      	movs	r3, #0
 80098c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c8:	461a      	mov	r2, r3
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4619      	mov	r1, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	01db      	lsls	r3, r3, #7
 80098dc:	440b      	add	r3, r1
 80098de:	3384      	adds	r3, #132	; 0x84
 80098e0:	4619      	mov	r1, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	01db      	lsls	r3, r3, #7
 80098f2:	4413      	add	r3, r2
 80098f4:	3384      	adds	r3, #132	; 0x84
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	4611      	mov	r1, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	01d2      	lsls	r2, r2, #7
 8009902:	440a      	add	r2, r1
 8009904:	3284      	adds	r2, #132	; 0x84
 8009906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800990a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	01db      	lsls	r3, r3, #7
 8009916:	4413      	add	r3, r2
 8009918:	3384      	adds	r3, #132	; 0x84
 800991a:	461a      	mov	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	01db      	lsls	r3, r3, #7
 800992c:	4413      	add	r3, r2
 800992e:	3384      	adds	r3, #132	; 0x84
 8009930:	69da      	ldr	r2, [r3, #28]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4619      	mov	r1, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	01db      	lsls	r3, r3, #7
 800993c:	440b      	add	r3, r1
 800993e:	3384      	adds	r3, #132	; 0x84
 8009940:	4619      	mov	r1, r3
 8009942:	4b58      	ldr	r3, [pc, #352]	; (8009aa4 <LTDC_SetConfig+0x32c>)
 8009944:	4013      	ands	r3, r2
 8009946:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	69da      	ldr	r2, [r3, #28]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	68f9      	ldr	r1, [r7, #12]
 8009952:	6809      	ldr	r1, [r1, #0]
 8009954:	4608      	mov	r0, r1
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	01c9      	lsls	r1, r1, #7
 800995a:	4401      	add	r1, r0
 800995c:	3184      	adds	r1, #132	; 0x84
 800995e:	4313      	orrs	r3, r2
 8009960:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	01db      	lsls	r3, r3, #7
 800996c:	4413      	add	r3, r2
 800996e:	3384      	adds	r3, #132	; 0x84
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	01db      	lsls	r3, r3, #7
 800997c:	4413      	add	r3, r2
 800997e:	3384      	adds	r3, #132	; 0x84
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	01db      	lsls	r3, r3, #7
 8009990:	4413      	add	r3, r2
 8009992:	3384      	adds	r3, #132	; 0x84
 8009994:	461a      	mov	r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80099a4:	2304      	movs	r3, #4
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	e01b      	b.n	80099e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d102      	bne.n	80099b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80099b2:	2303      	movs	r3, #3
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e014      	b.n	80099e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d00b      	beq.n	80099d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d007      	beq.n	80099d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d003      	beq.n	80099d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80099d4:	2b07      	cmp	r3, #7
 80099d6:	d102      	bne.n	80099de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80099d8:	2302      	movs	r3, #2
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e001      	b.n	80099e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80099de:	2301      	movs	r3, #1
 80099e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	01db      	lsls	r3, r3, #7
 80099ec:	4413      	add	r3, r2
 80099ee:	3384      	adds	r3, #132	; 0x84
 80099f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	4611      	mov	r1, r2
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	01d2      	lsls	r2, r2, #7
 80099fc:	440a      	add	r2, r1
 80099fe:	3284      	adds	r2, #132	; 0x84
 8009a00:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009a04:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	fb02 f303 	mul.w	r3, r2, r3
 8009a10:	041a      	lsls	r2, r3, #16
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6859      	ldr	r1, [r3, #4]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	1acb      	subs	r3, r1, r3
 8009a1c:	69f9      	ldr	r1, [r7, #28]
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	3303      	adds	r3, #3
 8009a24:	68f9      	ldr	r1, [r7, #12]
 8009a26:	6809      	ldr	r1, [r1, #0]
 8009a28:	4608      	mov	r0, r1
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	01c9      	lsls	r1, r1, #7
 8009a2e:	4401      	add	r1, r0
 8009a30:	3184      	adds	r1, #132	; 0x84
 8009a32:	4313      	orrs	r3, r2
 8009a34:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	01db      	lsls	r3, r3, #7
 8009a40:	4413      	add	r3, r2
 8009a42:	3384      	adds	r3, #132	; 0x84
 8009a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	01db      	lsls	r3, r3, #7
 8009a50:	440b      	add	r3, r1
 8009a52:	3384      	adds	r3, #132	; 0x84
 8009a54:	4619      	mov	r1, r3
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <LTDC_SetConfig+0x330>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	01db      	lsls	r3, r3, #7
 8009a66:	4413      	add	r3, r2
 8009a68:	3384      	adds	r3, #132	; 0x84
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	01db      	lsls	r3, r3, #7
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3384      	adds	r3, #132	; 0x84
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	4611      	mov	r1, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	01d2      	lsls	r2, r2, #7
 8009a8c:	440a      	add	r2, r1
 8009a8e:	3284      	adds	r2, #132	; 0x84
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	6013      	str	r3, [r2, #0]
}
 8009a96:	bf00      	nop
 8009a98:	3724      	adds	r7, #36	; 0x24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	fffff8f8 	.word	0xfffff8f8
 8009aa8:	fffff800 	.word	0xfffff800

08009aac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ab0:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a04      	ldr	r2, [pc, #16]	; (8009ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aba:	6013      	str	r3, [r2, #0]
}
 8009abc:	bf00      	nop
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40007000 	.word	0x40007000

08009acc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009ad6:	4b23      	ldr	r3, [pc, #140]	; (8009b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	4a22      	ldr	r2, [pc, #136]	; (8009b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8009adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ae2:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009aee:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a1d      	ldr	r2, [pc, #116]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009afa:	f7fd fbd9 	bl	80072b0 <HAL_GetTick>
 8009afe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b00:	e009      	b.n	8009b16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b02:	f7fd fbd5 	bl	80072b0 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b10:	d901      	bls.n	8009b16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e022      	b.n	8009b5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b22:	d1ee      	bne.n	8009b02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009b24:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a0f      	ldr	r2, [pc, #60]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b30:	f7fd fbbe 	bl	80072b0 <HAL_GetTick>
 8009b34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b36:	e009      	b.n	8009b4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b38:	f7fd fbba 	bl	80072b0 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b46:	d901      	bls.n	8009b4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e007      	b.n	8009b5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b58:	d1ee      	bne.n	8009b38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40023800 	.word	0x40023800
 8009b68:	40007000 	.word	0x40007000

08009b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e291      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 8087 	beq.w	8009c9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b90:	4b96      	ldr	r3, [pc, #600]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f003 030c 	and.w	r3, r3, #12
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d00c      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b9c:	4b93      	ldr	r3, [pc, #588]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f003 030c 	and.w	r3, r3, #12
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d112      	bne.n	8009bce <HAL_RCC_OscConfig+0x62>
 8009ba8:	4b90      	ldr	r3, [pc, #576]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bb4:	d10b      	bne.n	8009bce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bb6:	4b8d      	ldr	r3, [pc, #564]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d06c      	beq.n	8009c9c <HAL_RCC_OscConfig+0x130>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d168      	bne.n	8009c9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e26b      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd6:	d106      	bne.n	8009be6 <HAL_RCC_OscConfig+0x7a>
 8009bd8:	4b84      	ldr	r3, [pc, #528]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a83      	ldr	r2, [pc, #524]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	e02e      	b.n	8009c44 <HAL_RCC_OscConfig+0xd8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10c      	bne.n	8009c08 <HAL_RCC_OscConfig+0x9c>
 8009bee:	4b7f      	ldr	r3, [pc, #508]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a7e      	ldr	r2, [pc, #504]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	4b7c      	ldr	r3, [pc, #496]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a7b      	ldr	r2, [pc, #492]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	e01d      	b.n	8009c44 <HAL_RCC_OscConfig+0xd8>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c10:	d10c      	bne.n	8009c2c <HAL_RCC_OscConfig+0xc0>
 8009c12:	4b76      	ldr	r3, [pc, #472]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a75      	ldr	r2, [pc, #468]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	4b73      	ldr	r3, [pc, #460]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a72      	ldr	r2, [pc, #456]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e00b      	b.n	8009c44 <HAL_RCC_OscConfig+0xd8>
 8009c2c:	4b6f      	ldr	r3, [pc, #444]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a6e      	ldr	r2, [pc, #440]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	4b6c      	ldr	r3, [pc, #432]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a6b      	ldr	r2, [pc, #428]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d013      	beq.n	8009c74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fd fb30 	bl	80072b0 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c54:	f7fd fb2c 	bl	80072b0 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b64      	cmp	r3, #100	; 0x64
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e21f      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c66:	4b61      	ldr	r3, [pc, #388]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0xe8>
 8009c72:	e014      	b.n	8009c9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c74:	f7fd fb1c 	bl	80072b0 <HAL_GetTick>
 8009c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c7a:	e008      	b.n	8009c8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c7c:	f7fd fb18 	bl	80072b0 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b64      	cmp	r3, #100	; 0x64
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e20b      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c8e:	4b57      	ldr	r3, [pc, #348]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f0      	bne.n	8009c7c <HAL_RCC_OscConfig+0x110>
 8009c9a:	e000      	b.n	8009c9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d069      	beq.n	8009d7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009caa:	4b50      	ldr	r3, [pc, #320]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 030c 	and.w	r3, r3, #12
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cb6:	4b4d      	ldr	r3, [pc, #308]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 030c 	and.w	r3, r3, #12
 8009cbe:	2b08      	cmp	r3, #8
 8009cc0:	d11c      	bne.n	8009cfc <HAL_RCC_OscConfig+0x190>
 8009cc2:	4b4a      	ldr	r3, [pc, #296]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d116      	bne.n	8009cfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cce:	4b47      	ldr	r3, [pc, #284]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x17a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d001      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e1df      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ce6:	4b41      	ldr	r3, [pc, #260]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	493d      	ldr	r1, [pc, #244]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cfa:	e040      	b.n	8009d7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d023      	beq.n	8009d4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d04:	4b39      	ldr	r3, [pc, #228]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a38      	ldr	r2, [pc, #224]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d10:	f7fd face 	bl	80072b0 <HAL_GetTick>
 8009d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d18:	f7fd faca 	bl	80072b0 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e1bd      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d2a:	4b30      	ldr	r3, [pc, #192]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d36:	4b2d      	ldr	r3, [pc, #180]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	4929      	ldr	r1, [pc, #164]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	600b      	str	r3, [r1, #0]
 8009d4a:	e018      	b.n	8009d7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d4c:	4b27      	ldr	r3, [pc, #156]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a26      	ldr	r2, [pc, #152]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d52:	f023 0301 	bic.w	r3, r3, #1
 8009d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d58:	f7fd faaa 	bl	80072b0 <HAL_GetTick>
 8009d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d5e:	e008      	b.n	8009d72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d60:	f7fd faa6 	bl	80072b0 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d901      	bls.n	8009d72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e199      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d72:	4b1e      	ldr	r3, [pc, #120]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f0      	bne.n	8009d60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d038      	beq.n	8009dfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d019      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d92:	4b16      	ldr	r3, [pc, #88]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d96:	4a15      	ldr	r2, [pc, #84]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009d98:	f043 0301 	orr.w	r3, r3, #1
 8009d9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d9e:	f7fd fa87 	bl	80072b0 <HAL_GetTick>
 8009da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009da4:	e008      	b.n	8009db8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009da6:	f7fd fa83 	bl	80072b0 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d901      	bls.n	8009db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e176      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009db8:	4b0c      	ldr	r3, [pc, #48]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0f0      	beq.n	8009da6 <HAL_RCC_OscConfig+0x23a>
 8009dc4:	e01a      	b.n	8009dfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dca:	4a08      	ldr	r2, [pc, #32]	; (8009dec <HAL_RCC_OscConfig+0x280>)
 8009dcc:	f023 0301 	bic.w	r3, r3, #1
 8009dd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd2:	f7fd fa6d 	bl	80072b0 <HAL_GetTick>
 8009dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dd8:	e00a      	b.n	8009df0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dda:	f7fd fa69 	bl	80072b0 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d903      	bls.n	8009df0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e15c      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
 8009dec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009df0:	4b91      	ldr	r3, [pc, #580]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1ee      	bne.n	8009dda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 80a4 	beq.w	8009f52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e0a:	4b8b      	ldr	r3, [pc, #556]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10d      	bne.n	8009e32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e16:	4b88      	ldr	r3, [pc, #544]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	4a87      	ldr	r2, [pc, #540]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e20:	6413      	str	r3, [r2, #64]	; 0x40
 8009e22:	4b85      	ldr	r3, [pc, #532]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e2a:	60bb      	str	r3, [r7, #8]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e32:	4b82      	ldr	r3, [pc, #520]	; (800a03c <HAL_RCC_OscConfig+0x4d0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d118      	bne.n	8009e70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009e3e:	4b7f      	ldr	r3, [pc, #508]	; (800a03c <HAL_RCC_OscConfig+0x4d0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a7e      	ldr	r2, [pc, #504]	; (800a03c <HAL_RCC_OscConfig+0x4d0>)
 8009e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e4a:	f7fd fa31 	bl	80072b0 <HAL_GetTick>
 8009e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e50:	e008      	b.n	8009e64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e52:	f7fd fa2d 	bl	80072b0 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b64      	cmp	r3, #100	; 0x64
 8009e5e:	d901      	bls.n	8009e64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e120      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e64:	4b75      	ldr	r3, [pc, #468]	; (800a03c <HAL_RCC_OscConfig+0x4d0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0f0      	beq.n	8009e52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d106      	bne.n	8009e86 <HAL_RCC_OscConfig+0x31a>
 8009e78:	4b6f      	ldr	r3, [pc, #444]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7c:	4a6e      	ldr	r2, [pc, #440]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e7e:	f043 0301 	orr.w	r3, r3, #1
 8009e82:	6713      	str	r3, [r2, #112]	; 0x70
 8009e84:	e02d      	b.n	8009ee2 <HAL_RCC_OscConfig+0x376>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10c      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x33c>
 8009e8e:	4b6a      	ldr	r3, [pc, #424]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e92:	4a69      	ldr	r2, [pc, #420]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e94:	f023 0301 	bic.w	r3, r3, #1
 8009e98:	6713      	str	r3, [r2, #112]	; 0x70
 8009e9a:	4b67      	ldr	r3, [pc, #412]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9e:	4a66      	ldr	r2, [pc, #408]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ea0:	f023 0304 	bic.w	r3, r3, #4
 8009ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea6:	e01c      	b.n	8009ee2 <HAL_RCC_OscConfig+0x376>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	2b05      	cmp	r3, #5
 8009eae:	d10c      	bne.n	8009eca <HAL_RCC_OscConfig+0x35e>
 8009eb0:	4b61      	ldr	r3, [pc, #388]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb4:	4a60      	ldr	r2, [pc, #384]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009eb6:	f043 0304 	orr.w	r3, r3, #4
 8009eba:	6713      	str	r3, [r2, #112]	; 0x70
 8009ebc:	4b5e      	ldr	r3, [pc, #376]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec0:	4a5d      	ldr	r2, [pc, #372]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ec8:	e00b      	b.n	8009ee2 <HAL_RCC_OscConfig+0x376>
 8009eca:	4b5b      	ldr	r3, [pc, #364]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	4a5a      	ldr	r2, [pc, #360]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ed0:	f023 0301 	bic.w	r3, r3, #1
 8009ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed6:	4b58      	ldr	r3, [pc, #352]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eda:	4a57      	ldr	r2, [pc, #348]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009edc:	f023 0304 	bic.w	r3, r3, #4
 8009ee0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d015      	beq.n	8009f16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eea:	f7fd f9e1 	bl	80072b0 <HAL_GetTick>
 8009eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ef0:	e00a      	b.n	8009f08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ef2:	f7fd f9dd 	bl	80072b0 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d901      	bls.n	8009f08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e0ce      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f08:	4b4b      	ldr	r3, [pc, #300]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0ee      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x386>
 8009f14:	e014      	b.n	8009f40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f16:	f7fd f9cb 	bl	80072b0 <HAL_GetTick>
 8009f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f1c:	e00a      	b.n	8009f34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f1e:	f7fd f9c7 	bl	80072b0 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d901      	bls.n	8009f34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e0b8      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f34:	4b40      	ldr	r3, [pc, #256]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1ee      	bne.n	8009f1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d105      	bne.n	8009f52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f46:	4b3c      	ldr	r3, [pc, #240]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	4a3b      	ldr	r2, [pc, #236]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80a4 	beq.w	800a0a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f5c:	4b36      	ldr	r3, [pc, #216]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f003 030c 	and.w	r3, r3, #12
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d06b      	beq.n	800a040 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d149      	bne.n	800a004 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f70:	4b31      	ldr	r3, [pc, #196]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a30      	ldr	r2, [pc, #192]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7fd f998 	bl	80072b0 <HAL_GetTick>
 8009f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f84:	f7fd f994 	bl	80072b0 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e087      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f96:	4b28      	ldr	r3, [pc, #160]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f0      	bne.n	8009f84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69da      	ldr	r2, [r3, #28]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	019b      	lsls	r3, r3, #6
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	041b      	lsls	r3, r3, #16
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	061b      	lsls	r3, r3, #24
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fd0:	4b19      	ldr	r3, [pc, #100]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a18      	ldr	r2, [pc, #96]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fdc:	f7fd f968 	bl	80072b0 <HAL_GetTick>
 8009fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fe2:	e008      	b.n	8009ff6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fe4:	f7fd f964 	bl	80072b0 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e057      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ff6:	4b10      	ldr	r3, [pc, #64]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f0      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x478>
 800a002:	e04f      	b.n	800a0a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a0b      	ldr	r2, [pc, #44]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 800a00a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a00e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fd f94e 	bl	80072b0 <HAL_GetTick>
 800a014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a018:	f7fd f94a 	bl	80072b0 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e03d      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a02a:	4b03      	ldr	r3, [pc, #12]	; (800a038 <HAL_RCC_OscConfig+0x4cc>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1f0      	bne.n	800a018 <HAL_RCC_OscConfig+0x4ac>
 800a036:	e035      	b.n	800a0a4 <HAL_RCC_OscConfig+0x538>
 800a038:	40023800 	.word	0x40023800
 800a03c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a040:	4b1b      	ldr	r3, [pc, #108]	; (800a0b0 <HAL_RCC_OscConfig+0x544>)
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d028      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a058:	429a      	cmp	r2, r3
 800a05a:	d121      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a066:	429a      	cmp	r2, r3
 800a068:	d11a      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a070:	4013      	ands	r3, r2
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a076:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a078:	4293      	cmp	r3, r2
 800a07a:	d111      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	3b01      	subs	r3, #1
 800a08a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d107      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d001      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e000      	b.n	800a0a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	40023800 	.word	0x40023800

0800a0b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0d0      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0cc:	4b6a      	ldr	r3, [pc, #424]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 030f 	and.w	r3, r3, #15
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d910      	bls.n	800a0fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0da:	4b67      	ldr	r3, [pc, #412]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f023 020f 	bic.w	r2, r3, #15
 800a0e2:	4965      	ldr	r1, [pc, #404]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ea:	4b63      	ldr	r3, [pc, #396]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d001      	beq.n	800a0fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0b8      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d020      	beq.n	800a14a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a114:	4b59      	ldr	r3, [pc, #356]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	4a58      	ldr	r2, [pc, #352]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a11a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a11e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0308 	and.w	r3, r3, #8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a12c:	4b53      	ldr	r3, [pc, #332]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	4a52      	ldr	r2, [pc, #328]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a136:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a138:	4b50      	ldr	r3, [pc, #320]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	494d      	ldr	r1, [pc, #308]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a146:	4313      	orrs	r3, r2
 800a148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d040      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d107      	bne.n	800a16e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a15e:	4b47      	ldr	r3, [pc, #284]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d115      	bne.n	800a196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e07f      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	2b02      	cmp	r3, #2
 800a174:	d107      	bne.n	800a186 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a176:	4b41      	ldr	r3, [pc, #260]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e073      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a186:	4b3d      	ldr	r3, [pc, #244]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e06b      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a196:	4b39      	ldr	r3, [pc, #228]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f023 0203 	bic.w	r2, r3, #3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4936      	ldr	r1, [pc, #216]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1a8:	f7fd f882 	bl	80072b0 <HAL_GetTick>
 800a1ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ae:	e00a      	b.n	800a1c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1b0:	f7fd f87e 	bl	80072b0 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d901      	bls.n	800a1c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e053      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1c6:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f003 020c 	and.w	r2, r3, #12
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d1eb      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1d8:	4b27      	ldr	r3, [pc, #156]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d210      	bcs.n	800a208 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f023 020f 	bic.w	r2, r3, #15
 800a1ee:	4922      	ldr	r1, [pc, #136]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f6:	4b20      	ldr	r3, [pc, #128]	; (800a278 <HAL_RCC_ClockConfig+0x1c4>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 030f 	and.w	r3, r3, #15
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d001      	beq.n	800a208 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e032      	b.n	800a26e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a214:	4b19      	ldr	r3, [pc, #100]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4916      	ldr	r1, [pc, #88]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a222:	4313      	orrs	r3, r2
 800a224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0308 	and.w	r3, r3, #8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d009      	beq.n	800a246 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	490e      	ldr	r1, [pc, #56]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a242:	4313      	orrs	r3, r2
 800a244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a246:	f000 f821 	bl	800a28c <HAL_RCC_GetSysClockFreq>
 800a24a:	4602      	mov	r2, r0
 800a24c:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <HAL_RCC_ClockConfig+0x1c8>)
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	091b      	lsrs	r3, r3, #4
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	490a      	ldr	r1, [pc, #40]	; (800a280 <HAL_RCC_ClockConfig+0x1cc>)
 800a258:	5ccb      	ldrb	r3, [r1, r3]
 800a25a:	fa22 f303 	lsr.w	r3, r2, r3
 800a25e:	4a09      	ldr	r2, [pc, #36]	; (800a284 <HAL_RCC_ClockConfig+0x1d0>)
 800a260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <HAL_RCC_ClockConfig+0x1d4>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7fb fcd0 	bl	8005c0c <HAL_InitTick>

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40023c00 	.word	0x40023c00
 800a27c:	40023800 	.word	0x40023800
 800a280:	0809b648 	.word	0x0809b648
 800a284:	20000000 	.word	0x20000000
 800a288:	20000030 	.word	0x20000030

0800a28c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a28c:	b5b0      	push	{r4, r5, r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a292:	2100      	movs	r1, #0
 800a294:	6079      	str	r1, [r7, #4]
 800a296:	2100      	movs	r1, #0
 800a298:	60f9      	str	r1, [r7, #12]
 800a29a:	2100      	movs	r1, #0
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a29e:	2100      	movs	r1, #0
 800a2a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2a2:	4952      	ldr	r1, [pc, #328]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a2a4:	6889      	ldr	r1, [r1, #8]
 800a2a6:	f001 010c 	and.w	r1, r1, #12
 800a2aa:	2908      	cmp	r1, #8
 800a2ac:	d00d      	beq.n	800a2ca <HAL_RCC_GetSysClockFreq+0x3e>
 800a2ae:	2908      	cmp	r1, #8
 800a2b0:	f200 8094 	bhi.w	800a3dc <HAL_RCC_GetSysClockFreq+0x150>
 800a2b4:	2900      	cmp	r1, #0
 800a2b6:	d002      	beq.n	800a2be <HAL_RCC_GetSysClockFreq+0x32>
 800a2b8:	2904      	cmp	r1, #4
 800a2ba:	d003      	beq.n	800a2c4 <HAL_RCC_GetSysClockFreq+0x38>
 800a2bc:	e08e      	b.n	800a3dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2be:	4b4c      	ldr	r3, [pc, #304]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0x164>)
 800a2c0:	60bb      	str	r3, [r7, #8]
      break;
 800a2c2:	e08e      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2c4:	4b4b      	ldr	r3, [pc, #300]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800a2c6:	60bb      	str	r3, [r7, #8]
      break;
 800a2c8:	e08b      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2ca:	4948      	ldr	r1, [pc, #288]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a2cc:	6849      	ldr	r1, [r1, #4]
 800a2ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a2d2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a2d4:	4945      	ldr	r1, [pc, #276]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a2d6:	6849      	ldr	r1, [r1, #4]
 800a2d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	d024      	beq.n	800a32a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2e0:	4942      	ldr	r1, [pc, #264]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a2e2:	6849      	ldr	r1, [r1, #4]
 800a2e4:	0989      	lsrs	r1, r1, #6
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	f04f 0100 	mov.w	r1, #0
 800a2ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a2f0:	f04f 0500 	mov.w	r5, #0
 800a2f4:	ea00 0204 	and.w	r2, r0, r4
 800a2f8:	ea01 0305 	and.w	r3, r1, r5
 800a2fc:	493d      	ldr	r1, [pc, #244]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800a2fe:	fb01 f003 	mul.w	r0, r1, r3
 800a302:	2100      	movs	r1, #0
 800a304:	fb01 f102 	mul.w	r1, r1, r2
 800a308:	1844      	adds	r4, r0, r1
 800a30a:	493a      	ldr	r1, [pc, #232]	; (800a3f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800a30c:	fba2 0101 	umull	r0, r1, r2, r1
 800a310:	1863      	adds	r3, r4, r1
 800a312:	4619      	mov	r1, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	461a      	mov	r2, r3
 800a318:	f04f 0300 	mov.w	r3, #0
 800a31c:	f7f5 ffc8 	bl	80002b0 <__aeabi_uldivmod>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4613      	mov	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	e04a      	b.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a32a:	4b30      	ldr	r3, [pc, #192]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	099b      	lsrs	r3, r3, #6
 800a330:	461a      	mov	r2, r3
 800a332:	f04f 0300 	mov.w	r3, #0
 800a336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a33a:	f04f 0100 	mov.w	r1, #0
 800a33e:	ea02 0400 	and.w	r4, r2, r0
 800a342:	ea03 0501 	and.w	r5, r3, r1
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	014b      	lsls	r3, r1, #5
 800a354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a358:	0142      	lsls	r2, r0, #5
 800a35a:	4610      	mov	r0, r2
 800a35c:	4619      	mov	r1, r3
 800a35e:	1b00      	subs	r0, r0, r4
 800a360:	eb61 0105 	sbc.w	r1, r1, r5
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	f04f 0300 	mov.w	r3, #0
 800a36c:	018b      	lsls	r3, r1, #6
 800a36e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a372:	0182      	lsls	r2, r0, #6
 800a374:	1a12      	subs	r2, r2, r0
 800a376:	eb63 0301 	sbc.w	r3, r3, r1
 800a37a:	f04f 0000 	mov.w	r0, #0
 800a37e:	f04f 0100 	mov.w	r1, #0
 800a382:	00d9      	lsls	r1, r3, #3
 800a384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a388:	00d0      	lsls	r0, r2, #3
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	1912      	adds	r2, r2, r4
 800a390:	eb45 0303 	adc.w	r3, r5, r3
 800a394:	f04f 0000 	mov.w	r0, #0
 800a398:	f04f 0100 	mov.w	r1, #0
 800a39c:	0299      	lsls	r1, r3, #10
 800a39e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a3a2:	0290      	lsls	r0, r2, #10
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	f7f5 ff7c 	bl	80002b0 <__aeabi_uldivmod>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4613      	mov	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <HAL_RCC_GetSysClockFreq+0x160>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d8:	60bb      	str	r3, [r7, #8]
      break;
 800a3da:	e002      	b.n	800a3e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <HAL_RCC_GetSysClockFreq+0x164>)
 800a3de:	60bb      	str	r3, [r7, #8]
      break;
 800a3e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	00f42400 	.word	0x00f42400
 800a3f4:	017d7840 	.word	0x017d7840

0800a3f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3fc:	4b03      	ldr	r3, [pc, #12]	; (800a40c <HAL_RCC_GetHCLKFreq+0x14>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
}
 800a400:	4618      	mov	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000000 	.word	0x20000000

0800a410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a414:	f7ff fff0 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a418:	4602      	mov	r2, r0
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	0a9b      	lsrs	r3, r3, #10
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	4903      	ldr	r1, [pc, #12]	; (800a434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a426:	5ccb      	ldrb	r3, [r1, r3]
 800a428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	40023800 	.word	0x40023800
 800a434:	0809b658 	.word	0x0809b658

0800a438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a43c:	f7ff ffdc 	bl	800a3f8 <HAL_RCC_GetHCLKFreq>
 800a440:	4602      	mov	r2, r0
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	0b5b      	lsrs	r3, r3, #13
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	4903      	ldr	r1, [pc, #12]	; (800a45c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a44e:	5ccb      	ldrb	r3, [r1, r3]
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a454:	4618      	mov	r0, r3
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40023800 	.word	0x40023800
 800a45c:	0809b658 	.word	0x0809b658

0800a460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	220f      	movs	r2, #15
 800a46e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a470:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <HAL_RCC_GetClockConfig+0x5c>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f003 0203 	and.w	r2, r3, #3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a47c:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <HAL_RCC_GetClockConfig+0x5c>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a488:	4b0c      	ldr	r3, [pc, #48]	; (800a4bc <HAL_RCC_GetClockConfig+0x5c>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <HAL_RCC_GetClockConfig+0x5c>)
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	08db      	lsrs	r3, r3, #3
 800a49a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a4a2:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <HAL_RCC_GetClockConfig+0x60>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 020f 	and.w	r2, r3, #15
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40023800 	.word	0x40023800
 800a4c0:	40023c00 	.word	0x40023c00

0800a4c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d012      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a4ec:	4b69      	ldr	r3, [pc, #420]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	4a68      	ldr	r2, [pc, #416]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a4f6:	6093      	str	r3, [r2, #8]
 800a4f8:	4b66      	ldr	r3, [pc, #408]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a500:	4964      	ldr	r1, [pc, #400]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a502:	4313      	orrs	r3, r2
 800a504:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d017      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a51e:	4b5d      	ldr	r3, [pc, #372]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52c:	4959      	ldr	r1, [pc, #356]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53c:	d101      	bne.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a53e:	2301      	movs	r3, #1
 800a540:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a54a:	2301      	movs	r3, #1
 800a54c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d017      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a55a:	4b4e      	ldr	r3, [pc, #312]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	494a      	ldr	r1, [pc, #296]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a578:	d101      	bne.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a57a:	2301      	movs	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a586:	2301      	movs	r3, #1
 800a588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a596:	2301      	movs	r3, #1
 800a598:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 808b 	beq.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a5a8:	4b3a      	ldr	r3, [pc, #232]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ac:	4a39      	ldr	r2, [pc, #228]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5b2:	6413      	str	r3, [r2, #64]	; 0x40
 800a5b4:	4b37      	ldr	r3, [pc, #220]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5bc:	60bb      	str	r3, [r7, #8]
 800a5be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5c0:	4b35      	ldr	r3, [pc, #212]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a34      	ldr	r2, [pc, #208]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5cc:	f7fc fe70 	bl	80072b0 <HAL_GetTick>
 800a5d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5d4:	f7fc fe6c 	bl	80072b0 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b64      	cmp	r3, #100	; 0x64
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e357      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a5e6:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f0      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a5f2:	4b28      	ldr	r3, [pc, #160]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d035      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d02e      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a610:	4b20      	ldr	r3, [pc, #128]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a618:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a61a:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61e:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a624:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a626:	4b1b      	ldr	r3, [pc, #108]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62a:	4a1a      	ldr	r2, [pc, #104]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a62c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a630:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a632:	4a18      	ldr	r2, [pc, #96]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a638:	4b16      	ldr	r3, [pc, #88]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b01      	cmp	r3, #1
 800a642:	d114      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7fc fe34 	bl	80072b0 <HAL_GetTick>
 800a648:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a64a:	e00a      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a64c:	f7fc fe30 	bl	80072b0 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d901      	bls.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e319      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a662:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ee      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a67a:	d111      	bne.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a688:	4b04      	ldr	r3, [pc, #16]	; (800a69c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a68a:	400b      	ands	r3, r1
 800a68c:	4901      	ldr	r1, [pc, #4]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	608b      	str	r3, [r1, #8]
 800a692:	e00b      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a694:	40023800 	.word	0x40023800
 800a698:	40007000 	.word	0x40007000
 800a69c:	0ffffcff 	.word	0x0ffffcff
 800a6a0:	4bb1      	ldr	r3, [pc, #708]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	4ab0      	ldr	r2, [pc, #704]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a6aa:	6093      	str	r3, [r2, #8]
 800a6ac:	4bae      	ldr	r3, [pc, #696]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6b8:	49ab      	ldr	r1, [pc, #684]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0310 	and.w	r3, r3, #16
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d010      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6ca:	4ba7      	ldr	r3, [pc, #668]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d0:	4aa5      	ldr	r2, [pc, #660]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a6da:	4ba3      	ldr	r3, [pc, #652]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e4:	49a0      	ldr	r1, [pc, #640]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6f8:	4b9b      	ldr	r3, [pc, #620]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a706:	4998      	ldr	r1, [pc, #608]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a71a:	4b93      	ldr	r3, [pc, #588]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a728:	498f      	ldr	r1, [pc, #572]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a73c:	4b8a      	ldr	r3, [pc, #552]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74a:	4987      	ldr	r1, [pc, #540]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a75e:	4b82      	ldr	r3, [pc, #520]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a764:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76c:	497e      	ldr	r1, [pc, #504]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a780:	4b79      	ldr	r3, [pc, #484]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a786:	f023 0203 	bic.w	r2, r3, #3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78e:	4976      	ldr	r1, [pc, #472]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a790:	4313      	orrs	r3, r2
 800a792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7a2:	4b71      	ldr	r3, [pc, #452]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a8:	f023 020c 	bic.w	r2, r3, #12
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7b0:	496d      	ldr	r1, [pc, #436]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d2:	4965      	ldr	r1, [pc, #404]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7e6:	4b60      	ldr	r3, [pc, #384]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f4:	495c      	ldr	r1, [pc, #368]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00a      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a808:	4b57      	ldr	r3, [pc, #348]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a816:	4954      	ldr	r1, [pc, #336]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00a      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a82a:	4b4f      	ldr	r3, [pc, #316]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a830:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a838:	494b      	ldr	r1, [pc, #300]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a83a:	4313      	orrs	r3, r2
 800a83c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00a      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a84c:	4b46      	ldr	r3, [pc, #280]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85a:	4943      	ldr	r1, [pc, #268]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a86e:	4b3e      	ldr	r3, [pc, #248]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a87c:	493a      	ldr	r1, [pc, #232]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00a      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a890:	4b35      	ldr	r3, [pc, #212]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a896:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a89e:	4932      	ldr	r1, [pc, #200]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d011      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a8b2:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8c0:	4929      	ldr	r1, [pc, #164]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8d0:	d101      	bne.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a900:	4919      	ldr	r1, [pc, #100]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a902:	4313      	orrs	r3, r2
 800a904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00b      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a914:	4b14      	ldr	r3, [pc, #80]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a91a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a924:	4910      	ldr	r1, [pc, #64]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a926:	4313      	orrs	r3, r2
 800a928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d006      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80d9 	beq.w	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a08      	ldr	r2, [pc, #32]	; (800a968 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a94a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a94c:	f7fc fcb0 	bl	80072b0 <HAL_GetTick>
 800a950:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a952:	e00b      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a954:	f7fc fcac 	bl	80072b0 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b64      	cmp	r3, #100	; 0x64
 800a960:	d904      	bls.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e197      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a966:	bf00      	nop
 800a968:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a96c:	4b6c      	ldr	r3, [pc, #432]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1ed      	bne.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d021      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d11d      	bne.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a98c:	4b64      	ldr	r3, [pc, #400]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a99a:	4b61      	ldr	r3, [pc, #388]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a0:	0e1b      	lsrs	r3, r3, #24
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	019a      	lsls	r2, r3, #6
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	041b      	lsls	r3, r3, #16
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	061b      	lsls	r3, r3, #24
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	071b      	lsls	r3, r3, #28
 800a9c0:	4957      	ldr	r1, [pc, #348]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9dc:	d00a      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d02e      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9f2:	d129      	bne.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a9f4:	4b4a      	ldr	r3, [pc, #296]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a9f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9fa:	0c1b      	lsrs	r3, r3, #16
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa02:	4b47      	ldr	r3, [pc, #284]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa08:	0f1b      	lsrs	r3, r3, #28
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	019a      	lsls	r2, r3, #6
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	041b      	lsls	r3, r3, #16
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	061b      	lsls	r3, r3, #24
 800aa22:	431a      	orrs	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	071b      	lsls	r3, r3, #28
 800aa28:	493d      	ldr	r1, [pc, #244]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aa30:	4b3b      	ldr	r3, [pc, #236]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa36:	f023 021f 	bic.w	r2, r3, #31
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	4937      	ldr	r1, [pc, #220]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01d      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aa54:	4b32      	ldr	r3, [pc, #200]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa5a:	0e1b      	lsrs	r3, r3, #24
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa62:	4b2f      	ldr	r3, [pc, #188]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa68:	0f1b      	lsrs	r3, r3, #28
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	019a      	lsls	r2, r3, #6
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	041b      	lsls	r3, r3, #16
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	061b      	lsls	r3, r3, #24
 800aa82:	431a      	orrs	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	071b      	lsls	r3, r3, #28
 800aa88:	4925      	ldr	r1, [pc, #148]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d011      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	019a      	lsls	r2, r3, #6
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	061b      	lsls	r3, r3, #24
 800aab0:	431a      	orrs	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	071b      	lsls	r3, r3, #28
 800aab8:	4919      	ldr	r1, [pc, #100]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aac0:	4b17      	ldr	r3, [pc, #92]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a16      	ldr	r2, [pc, #88]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aaca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aacc:	f7fc fbf0 	bl	80072b0 <HAL_GetTick>
 800aad0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aad2:	e008      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aad4:	f7fc fbec 	bl	80072b0 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e0d7      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aae6:	4b0e      	ldr	r3, [pc, #56]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	f040 80cd 	bne.w	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aafa:	4b09      	ldr	r3, [pc, #36]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a08      	ldr	r2, [pc, #32]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ab00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab06:	f7fc fbd3 	bl	80072b0 <HAL_GetTick>
 800ab0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab0c:	e00a      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ab0e:	f7fc fbcf 	bl	80072b0 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b64      	cmp	r3, #100	; 0x64
 800ab1a:	d903      	bls.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e0ba      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ab20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ab24:	4b5e      	ldr	r3, [pc, #376]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab30:	d0ed      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d02e      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d12a      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ab5a:	4b51      	ldr	r3, [pc, #324]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ab5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab60:	0c1b      	lsrs	r3, r3, #16
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ab68:	4b4d      	ldr	r3, [pc, #308]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	0f1b      	lsrs	r3, r3, #28
 800ab70:	f003 0307 	and.w	r3, r3, #7
 800ab74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	019a      	lsls	r2, r3, #6
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	041b      	lsls	r3, r3, #16
 800ab80:	431a      	orrs	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	061b      	lsls	r3, r3, #24
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	071b      	lsls	r3, r3, #28
 800ab8e:	4944      	ldr	r1, [pc, #272]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ab96:	4b42      	ldr	r3, [pc, #264]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ab98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	3b01      	subs	r3, #1
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	493d      	ldr	r1, [pc, #244]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d022      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abc4:	d11d      	bne.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800abc6:	4b36      	ldr	r3, [pc, #216]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800abc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abcc:	0e1b      	lsrs	r3, r3, #24
 800abce:	f003 030f 	and.w	r3, r3, #15
 800abd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800abd4:	4b32      	ldr	r3, [pc, #200]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800abd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abda:	0f1b      	lsrs	r3, r3, #28
 800abdc:	f003 0307 	and.w	r3, r3, #7
 800abe0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	019a      	lsls	r2, r3, #6
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	041b      	lsls	r3, r3, #16
 800abee:	431a      	orrs	r2, r3
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	061b      	lsls	r3, r3, #24
 800abf4:	431a      	orrs	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	071b      	lsls	r3, r3, #28
 800abfa:	4929      	ldr	r1, [pc, #164]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d028      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ac0e:	4b24      	ldr	r3, [pc, #144]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac14:	0e1b      	lsrs	r3, r3, #24
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ac1c:	4b20      	ldr	r3, [pc, #128]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac22:	0c1b      	lsrs	r3, r3, #16
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	019a      	lsls	r2, r3, #6
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	041b      	lsls	r3, r3, #16
 800ac34:	431a      	orrs	r2, r3
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	061b      	lsls	r3, r3, #24
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	071b      	lsls	r3, r3, #28
 800ac42:	4917      	ldr	r1, [pc, #92]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ac4a:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	4911      	ldr	r1, [pc, #68]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ac60:	4b0f      	ldr	r3, [pc, #60]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a0e      	ldr	r2, [pc, #56]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac6c:	f7fc fb20 	bl	80072b0 <HAL_GetTick>
 800ac70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac72:	e008      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ac74:	f7fc fb1c 	bl	80072b0 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	2b64      	cmp	r3, #100	; 0x64
 800ac80:	d901      	bls.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e007      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ac86:	4b06      	ldr	r3, [pc, #24]	; (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac92:	d1ef      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	40023800 	.word	0x40023800

0800aca4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e01c      	b.n	800acf0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	795b      	ldrb	r3, [r3, #5]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d105      	bne.n	800accc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7fa fe7e 	bl	80059c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2202      	movs	r2, #2
 800acd0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0204 	orr.w	r2, r2, #4
 800ace0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_RNG_GetRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval 32-bit random number
  */
uint32_t HAL_RNG_GetRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t random32bit = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hrng);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	791b      	ldrb	r3, [r3, #4]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d101      	bne.n	800ad10 <HAL_RNG_GetRandomNumber_IT+0x18>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e012      	b.n	800ad36 <HAL_RNG_GetRandomNumber_IT+0x3e>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	711a      	strb	r2, [r3, #4]

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	715a      	strb	r2, [r3, #5]

  /* Get a 32bit Random number */
  random32bit = hrng->Instance->DR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
  __HAL_RNG_ENABLE_IT(hrng);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0208 	orr.w	r2, r2, #8
 800ad32:	601a      	str	r2, [r3, #0]

  /* Return the 32 bit random number */
  return random32bit;
 800ad34:	68fb      	ldr	r3, [r7, #12]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f003 0320 	and.w	r3, r3, #32
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d105      	bne.n	800ad68 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2210      	movs	r2, #16
 800ad60:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800ad62:	2301      	movs	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e00b      	b.n	800ad80 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad72:	2b40      	cmp	r3, #64	; 0x40
 800ad74:	d104      	bne.n	800ad80 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d10b      	bne.n	800ad9e <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2204      	movs	r2, #4
 800ad8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f839 	bl	800ae04 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800ad9a:	605a      	str	r2, [r3, #4]

    return;
 800ad9c:	e024      	b.n	800ade8 <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d11d      	bne.n	800ade8 <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0208 	bic.w	r2, r2, #8
 800adba:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	795b      	ldrb	r3, [r3, #5]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d00b      	beq.n	800ade8 <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f803 	bl	800adee <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e025      	b.n	800ae78 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7fa fed9 	bl	8005bf8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3304      	adds	r3, #4
 800ae56:	4619      	mov	r1, r3
 800ae58:	4610      	mov	r0, r2
 800ae5a:	f000 ff97 	bl	800bd8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	f000 ffeb 	bl	800be44 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae92:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d101      	bne.n	800ae9e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e021      	b.n	800aee2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d002      	beq.n	800aeaa <HAL_SDRAM_SendCommand+0x2a>
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	2b05      	cmp	r3, #5
 800aea8:	d118      	bne.n	800aedc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2202      	movs	r2, #2
 800aeae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 f82c 	bl	800bf18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d104      	bne.n	800aed2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2205      	movs	r2, #5
 800aecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aed0:	e006      	b.n	800aee0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aeda:	e001      	b.n	800aee0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d101      	bne.n	800af04 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800af00:	2302      	movs	r3, #2
 800af02:	e016      	b.n	800af32 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d10f      	bne.n	800af30 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 f81e 	bl	800bf60 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	e000      	b.n	800af32 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e049      	b.n	800afe0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d106      	bne.n	800af66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f841 	bl	800afe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3304      	adds	r3, #4
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f000 f9ff 	bl	800b37c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d001      	beq.n	800b014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e054      	b.n	800b0be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0201 	orr.w	r2, r2, #1
 800b02a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a26      	ldr	r2, [pc, #152]	; (800b0cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d022      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b03e:	d01d      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a22      	ldr	r2, [pc, #136]	; (800b0d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d018      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a21      	ldr	r2, [pc, #132]	; (800b0d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d013      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a1f      	ldr	r2, [pc, #124]	; (800b0d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d00e      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a1e      	ldr	r2, [pc, #120]	; (800b0dc <HAL_TIM_Base_Start_IT+0xe0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d009      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1c      	ldr	r2, [pc, #112]	; (800b0e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d004      	beq.n	800b07c <HAL_TIM_Base_Start_IT+0x80>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1b      	ldr	r2, [pc, #108]	; (800b0e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d115      	bne.n	800b0a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	4b19      	ldr	r3, [pc, #100]	; (800b0e8 <HAL_TIM_Base_Start_IT+0xec>)
 800b084:	4013      	ands	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b06      	cmp	r3, #6
 800b08c:	d015      	beq.n	800b0ba <HAL_TIM_Base_Start_IT+0xbe>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b094:	d011      	beq.n	800b0ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f042 0201 	orr.w	r2, r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a6:	e008      	b.n	800b0ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e000      	b.n	800b0bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40010000 	.word	0x40010000
 800b0d0:	40000400 	.word	0x40000400
 800b0d4:	40000800 	.word	0x40000800
 800b0d8:	40000c00 	.word	0x40000c00
 800b0dc:	40010400 	.word	0x40010400
 800b0e0:	40014000 	.word	0x40014000
 800b0e4:	40001800 	.word	0x40001800
 800b0e8:	00010007 	.word	0x00010007

0800b0ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	f003 0302 	and.w	r3, r3, #2
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d122      	bne.n	800b148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d11b      	bne.n	800b148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f06f 0202 	mvn.w	r2, #2
 800b118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d003      	beq.n	800b136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f905 	bl	800b33e <HAL_TIM_IC_CaptureCallback>
 800b134:	e005      	b.n	800b142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f8f7 	bl	800b32a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f908 	bl	800b352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b04      	cmp	r3, #4
 800b154:	d122      	bne.n	800b19c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b04      	cmp	r3, #4
 800b162:	d11b      	bne.n	800b19c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f06f 0204 	mvn.w	r2, #4
 800b16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f8db 	bl	800b33e <HAL_TIM_IC_CaptureCallback>
 800b188:	e005      	b.n	800b196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f8cd 	bl	800b32a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f8de 	bl	800b352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f003 0308 	and.w	r3, r3, #8
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	d122      	bne.n	800b1f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f003 0308 	and.w	r3, r3, #8
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d11b      	bne.n	800b1f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f06f 0208 	mvn.w	r2, #8
 800b1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2204      	movs	r2, #4
 800b1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f8b1 	bl	800b33e <HAL_TIM_IC_CaptureCallback>
 800b1dc:	e005      	b.n	800b1ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f8a3 	bl	800b32a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f8b4 	bl	800b352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	f003 0310 	and.w	r3, r3, #16
 800b1fa:	2b10      	cmp	r3, #16
 800b1fc:	d122      	bne.n	800b244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f003 0310 	and.w	r3, r3, #16
 800b208:	2b10      	cmp	r3, #16
 800b20a:	d11b      	bne.n	800b244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f06f 0210 	mvn.w	r2, #16
 800b214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2208      	movs	r2, #8
 800b21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f887 	bl	800b33e <HAL_TIM_IC_CaptureCallback>
 800b230:	e005      	b.n	800b23e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f879 	bl	800b32a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f88a 	bl	800b352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d10e      	bne.n	800b270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d107      	bne.n	800b270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f06f 0201 	mvn.w	r2, #1
 800b268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7f7 fcf4 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27a:	2b80      	cmp	r3, #128	; 0x80
 800b27c:	d10e      	bne.n	800b29c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b288:	2b80      	cmp	r3, #128	; 0x80
 800b28a:	d107      	bne.n	800b29c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f91a 	bl	800b4d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d10e      	bne.n	800b2ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b6:	2b80      	cmp	r3, #128	; 0x80
 800b2b8:	d107      	bne.n	800b2ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f90d 	bl	800b4e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d4:	2b40      	cmp	r3, #64	; 0x40
 800b2d6:	d10e      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e2:	2b40      	cmp	r3, #64	; 0x40
 800b2e4:	d107      	bne.n	800b2f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f838 	bl	800b366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b20      	cmp	r3, #32
 800b302:	d10e      	bne.n	800b322 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b20      	cmp	r3, #32
 800b310:	d107      	bne.n	800b322 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f06f 0220 	mvn.w	r2, #32
 800b31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f8cd 	bl	800b4bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a40      	ldr	r2, [pc, #256]	; (800b490 <TIM_Base_SetConfig+0x114>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d013      	beq.n	800b3bc <TIM_Base_SetConfig+0x40>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b39a:	d00f      	beq.n	800b3bc <TIM_Base_SetConfig+0x40>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a3d      	ldr	r2, [pc, #244]	; (800b494 <TIM_Base_SetConfig+0x118>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_Base_SetConfig+0x40>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a3c      	ldr	r2, [pc, #240]	; (800b498 <TIM_Base_SetConfig+0x11c>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_Base_SetConfig+0x40>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a3b      	ldr	r2, [pc, #236]	; (800b49c <TIM_Base_SetConfig+0x120>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_Base_SetConfig+0x40>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a3a      	ldr	r2, [pc, #232]	; (800b4a0 <TIM_Base_SetConfig+0x124>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d108      	bne.n	800b3ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a2f      	ldr	r2, [pc, #188]	; (800b490 <TIM_Base_SetConfig+0x114>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d02b      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3dc:	d027      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a2c      	ldr	r2, [pc, #176]	; (800b494 <TIM_Base_SetConfig+0x118>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d023      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a2b      	ldr	r2, [pc, #172]	; (800b498 <TIM_Base_SetConfig+0x11c>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d01f      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a2a      	ldr	r2, [pc, #168]	; (800b49c <TIM_Base_SetConfig+0x120>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d01b      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a29      	ldr	r2, [pc, #164]	; (800b4a0 <TIM_Base_SetConfig+0x124>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d017      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a28      	ldr	r2, [pc, #160]	; (800b4a4 <TIM_Base_SetConfig+0x128>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d013      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a27      	ldr	r2, [pc, #156]	; (800b4a8 <TIM_Base_SetConfig+0x12c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d00f      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a26      	ldr	r2, [pc, #152]	; (800b4ac <TIM_Base_SetConfig+0x130>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d00b      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a25      	ldr	r2, [pc, #148]	; (800b4b0 <TIM_Base_SetConfig+0x134>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d007      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a24      	ldr	r2, [pc, #144]	; (800b4b4 <TIM_Base_SetConfig+0x138>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d003      	beq.n	800b42e <TIM_Base_SetConfig+0xb2>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a23      	ldr	r2, [pc, #140]	; (800b4b8 <TIM_Base_SetConfig+0x13c>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d108      	bne.n	800b440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a0a      	ldr	r2, [pc, #40]	; (800b490 <TIM_Base_SetConfig+0x114>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d003      	beq.n	800b474 <TIM_Base_SetConfig+0xf8>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a0c      	ldr	r2, [pc, #48]	; (800b4a0 <TIM_Base_SetConfig+0x124>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d103      	bne.n	800b47c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	615a      	str	r2, [r3, #20]
}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	40010000 	.word	0x40010000
 800b494:	40000400 	.word	0x40000400
 800b498:	40000800 	.word	0x40000800
 800b49c:	40000c00 	.word	0x40000c00
 800b4a0:	40010400 	.word	0x40010400
 800b4a4:	40014000 	.word	0x40014000
 800b4a8:	40014400 	.word	0x40014400
 800b4ac:	40014800 	.word	0x40014800
 800b4b0:	40001800 	.word	0x40001800
 800b4b4:	40001c00 	.word	0x40001c00
 800b4b8:	40002000 	.word	0x40002000

0800b4bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e040      	b.n	800b58c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7fa fa7a 	bl	8005a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2224      	movs	r2, #36	; 0x24
 800b524:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f022 0201 	bic.w	r2, r2, #1
 800b534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f82c 	bl	800b594 <UART_SetConfig>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e022      	b.n	800b58c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d002      	beq.n	800b554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fa82 	bl	800ba58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fb09 	bl	800bb9c <UART_CheckIdleState>
 800b58a:	4603      	mov	r3, r0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4ba7      	ldr	r3, [pc, #668]	; (800b85c <UART_SetConfig+0x2c8>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	6812      	ldr	r2, [r2, #0]
 800b5c6:	6979      	ldr	r1, [r7, #20]
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	430a      	orrs	r2, r1
 800b604:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a95      	ldr	r2, [pc, #596]	; (800b860 <UART_SetConfig+0x2cc>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d120      	bne.n	800b652 <UART_SetConfig+0xbe>
 800b610:	4b94      	ldr	r3, [pc, #592]	; (800b864 <UART_SetConfig+0x2d0>)
 800b612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b616:	f003 0303 	and.w	r3, r3, #3
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d816      	bhi.n	800b64c <UART_SetConfig+0xb8>
 800b61e:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <UART_SetConfig+0x90>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b635 	.word	0x0800b635
 800b628:	0800b641 	.word	0x0800b641
 800b62c:	0800b63b 	.word	0x0800b63b
 800b630:	0800b647 	.word	0x0800b647
 800b634:	2301      	movs	r3, #1
 800b636:	77fb      	strb	r3, [r7, #31]
 800b638:	e14f      	b.n	800b8da <UART_SetConfig+0x346>
 800b63a:	2302      	movs	r3, #2
 800b63c:	77fb      	strb	r3, [r7, #31]
 800b63e:	e14c      	b.n	800b8da <UART_SetConfig+0x346>
 800b640:	2304      	movs	r3, #4
 800b642:	77fb      	strb	r3, [r7, #31]
 800b644:	e149      	b.n	800b8da <UART_SetConfig+0x346>
 800b646:	2308      	movs	r3, #8
 800b648:	77fb      	strb	r3, [r7, #31]
 800b64a:	e146      	b.n	800b8da <UART_SetConfig+0x346>
 800b64c:	2310      	movs	r3, #16
 800b64e:	77fb      	strb	r3, [r7, #31]
 800b650:	e143      	b.n	800b8da <UART_SetConfig+0x346>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a84      	ldr	r2, [pc, #528]	; (800b868 <UART_SetConfig+0x2d4>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d132      	bne.n	800b6c2 <UART_SetConfig+0x12e>
 800b65c:	4b81      	ldr	r3, [pc, #516]	; (800b864 <UART_SetConfig+0x2d0>)
 800b65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b662:	f003 030c 	and.w	r3, r3, #12
 800b666:	2b0c      	cmp	r3, #12
 800b668:	d828      	bhi.n	800b6bc <UART_SetConfig+0x128>
 800b66a:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <UART_SetConfig+0xdc>)
 800b66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b670:	0800b6a5 	.word	0x0800b6a5
 800b674:	0800b6bd 	.word	0x0800b6bd
 800b678:	0800b6bd 	.word	0x0800b6bd
 800b67c:	0800b6bd 	.word	0x0800b6bd
 800b680:	0800b6b1 	.word	0x0800b6b1
 800b684:	0800b6bd 	.word	0x0800b6bd
 800b688:	0800b6bd 	.word	0x0800b6bd
 800b68c:	0800b6bd 	.word	0x0800b6bd
 800b690:	0800b6ab 	.word	0x0800b6ab
 800b694:	0800b6bd 	.word	0x0800b6bd
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b6bd 	.word	0x0800b6bd
 800b6a0:	0800b6b7 	.word	0x0800b6b7
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	77fb      	strb	r3, [r7, #31]
 800b6a8:	e117      	b.n	800b8da <UART_SetConfig+0x346>
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	77fb      	strb	r3, [r7, #31]
 800b6ae:	e114      	b.n	800b8da <UART_SetConfig+0x346>
 800b6b0:	2304      	movs	r3, #4
 800b6b2:	77fb      	strb	r3, [r7, #31]
 800b6b4:	e111      	b.n	800b8da <UART_SetConfig+0x346>
 800b6b6:	2308      	movs	r3, #8
 800b6b8:	77fb      	strb	r3, [r7, #31]
 800b6ba:	e10e      	b.n	800b8da <UART_SetConfig+0x346>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	77fb      	strb	r3, [r7, #31]
 800b6c0:	e10b      	b.n	800b8da <UART_SetConfig+0x346>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a69      	ldr	r2, [pc, #420]	; (800b86c <UART_SetConfig+0x2d8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d120      	bne.n	800b70e <UART_SetConfig+0x17a>
 800b6cc:	4b65      	ldr	r3, [pc, #404]	; (800b864 <UART_SetConfig+0x2d0>)
 800b6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b6d6:	2b30      	cmp	r3, #48	; 0x30
 800b6d8:	d013      	beq.n	800b702 <UART_SetConfig+0x16e>
 800b6da:	2b30      	cmp	r3, #48	; 0x30
 800b6dc:	d814      	bhi.n	800b708 <UART_SetConfig+0x174>
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d009      	beq.n	800b6f6 <UART_SetConfig+0x162>
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d810      	bhi.n	800b708 <UART_SetConfig+0x174>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <UART_SetConfig+0x15c>
 800b6ea:	2b10      	cmp	r3, #16
 800b6ec:	d006      	beq.n	800b6fc <UART_SetConfig+0x168>
 800b6ee:	e00b      	b.n	800b708 <UART_SetConfig+0x174>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	77fb      	strb	r3, [r7, #31]
 800b6f4:	e0f1      	b.n	800b8da <UART_SetConfig+0x346>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	77fb      	strb	r3, [r7, #31]
 800b6fa:	e0ee      	b.n	800b8da <UART_SetConfig+0x346>
 800b6fc:	2304      	movs	r3, #4
 800b6fe:	77fb      	strb	r3, [r7, #31]
 800b700:	e0eb      	b.n	800b8da <UART_SetConfig+0x346>
 800b702:	2308      	movs	r3, #8
 800b704:	77fb      	strb	r3, [r7, #31]
 800b706:	e0e8      	b.n	800b8da <UART_SetConfig+0x346>
 800b708:	2310      	movs	r3, #16
 800b70a:	77fb      	strb	r3, [r7, #31]
 800b70c:	e0e5      	b.n	800b8da <UART_SetConfig+0x346>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a57      	ldr	r2, [pc, #348]	; (800b870 <UART_SetConfig+0x2dc>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d120      	bne.n	800b75a <UART_SetConfig+0x1c6>
 800b718:	4b52      	ldr	r3, [pc, #328]	; (800b864 <UART_SetConfig+0x2d0>)
 800b71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b71e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b722:	2bc0      	cmp	r3, #192	; 0xc0
 800b724:	d013      	beq.n	800b74e <UART_SetConfig+0x1ba>
 800b726:	2bc0      	cmp	r3, #192	; 0xc0
 800b728:	d814      	bhi.n	800b754 <UART_SetConfig+0x1c0>
 800b72a:	2b80      	cmp	r3, #128	; 0x80
 800b72c:	d009      	beq.n	800b742 <UART_SetConfig+0x1ae>
 800b72e:	2b80      	cmp	r3, #128	; 0x80
 800b730:	d810      	bhi.n	800b754 <UART_SetConfig+0x1c0>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <UART_SetConfig+0x1a8>
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d006      	beq.n	800b748 <UART_SetConfig+0x1b4>
 800b73a:	e00b      	b.n	800b754 <UART_SetConfig+0x1c0>
 800b73c:	2300      	movs	r3, #0
 800b73e:	77fb      	strb	r3, [r7, #31]
 800b740:	e0cb      	b.n	800b8da <UART_SetConfig+0x346>
 800b742:	2302      	movs	r3, #2
 800b744:	77fb      	strb	r3, [r7, #31]
 800b746:	e0c8      	b.n	800b8da <UART_SetConfig+0x346>
 800b748:	2304      	movs	r3, #4
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e0c5      	b.n	800b8da <UART_SetConfig+0x346>
 800b74e:	2308      	movs	r3, #8
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e0c2      	b.n	800b8da <UART_SetConfig+0x346>
 800b754:	2310      	movs	r3, #16
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e0bf      	b.n	800b8da <UART_SetConfig+0x346>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a45      	ldr	r2, [pc, #276]	; (800b874 <UART_SetConfig+0x2e0>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d125      	bne.n	800b7b0 <UART_SetConfig+0x21c>
 800b764:	4b3f      	ldr	r3, [pc, #252]	; (800b864 <UART_SetConfig+0x2d0>)
 800b766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b76e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b772:	d017      	beq.n	800b7a4 <UART_SetConfig+0x210>
 800b774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b778:	d817      	bhi.n	800b7aa <UART_SetConfig+0x216>
 800b77a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b77e:	d00b      	beq.n	800b798 <UART_SetConfig+0x204>
 800b780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b784:	d811      	bhi.n	800b7aa <UART_SetConfig+0x216>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <UART_SetConfig+0x1fe>
 800b78a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78e:	d006      	beq.n	800b79e <UART_SetConfig+0x20a>
 800b790:	e00b      	b.n	800b7aa <UART_SetConfig+0x216>
 800b792:	2300      	movs	r3, #0
 800b794:	77fb      	strb	r3, [r7, #31]
 800b796:	e0a0      	b.n	800b8da <UART_SetConfig+0x346>
 800b798:	2302      	movs	r3, #2
 800b79a:	77fb      	strb	r3, [r7, #31]
 800b79c:	e09d      	b.n	800b8da <UART_SetConfig+0x346>
 800b79e:	2304      	movs	r3, #4
 800b7a0:	77fb      	strb	r3, [r7, #31]
 800b7a2:	e09a      	b.n	800b8da <UART_SetConfig+0x346>
 800b7a4:	2308      	movs	r3, #8
 800b7a6:	77fb      	strb	r3, [r7, #31]
 800b7a8:	e097      	b.n	800b8da <UART_SetConfig+0x346>
 800b7aa:	2310      	movs	r3, #16
 800b7ac:	77fb      	strb	r3, [r7, #31]
 800b7ae:	e094      	b.n	800b8da <UART_SetConfig+0x346>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a30      	ldr	r2, [pc, #192]	; (800b878 <UART_SetConfig+0x2e4>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d125      	bne.n	800b806 <UART_SetConfig+0x272>
 800b7ba:	4b2a      	ldr	r3, [pc, #168]	; (800b864 <UART_SetConfig+0x2d0>)
 800b7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7c8:	d017      	beq.n	800b7fa <UART_SetConfig+0x266>
 800b7ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7ce:	d817      	bhi.n	800b800 <UART_SetConfig+0x26c>
 800b7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7d4:	d00b      	beq.n	800b7ee <UART_SetConfig+0x25a>
 800b7d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7da:	d811      	bhi.n	800b800 <UART_SetConfig+0x26c>
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <UART_SetConfig+0x254>
 800b7e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e4:	d006      	beq.n	800b7f4 <UART_SetConfig+0x260>
 800b7e6:	e00b      	b.n	800b800 <UART_SetConfig+0x26c>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	77fb      	strb	r3, [r7, #31]
 800b7ec:	e075      	b.n	800b8da <UART_SetConfig+0x346>
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	77fb      	strb	r3, [r7, #31]
 800b7f2:	e072      	b.n	800b8da <UART_SetConfig+0x346>
 800b7f4:	2304      	movs	r3, #4
 800b7f6:	77fb      	strb	r3, [r7, #31]
 800b7f8:	e06f      	b.n	800b8da <UART_SetConfig+0x346>
 800b7fa:	2308      	movs	r3, #8
 800b7fc:	77fb      	strb	r3, [r7, #31]
 800b7fe:	e06c      	b.n	800b8da <UART_SetConfig+0x346>
 800b800:	2310      	movs	r3, #16
 800b802:	77fb      	strb	r3, [r7, #31]
 800b804:	e069      	b.n	800b8da <UART_SetConfig+0x346>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a1c      	ldr	r2, [pc, #112]	; (800b87c <UART_SetConfig+0x2e8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d137      	bne.n	800b880 <UART_SetConfig+0x2ec>
 800b810:	4b14      	ldr	r3, [pc, #80]	; (800b864 <UART_SetConfig+0x2d0>)
 800b812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b816:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b81a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b81e:	d017      	beq.n	800b850 <UART_SetConfig+0x2bc>
 800b820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b824:	d817      	bhi.n	800b856 <UART_SetConfig+0x2c2>
 800b826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b82a:	d00b      	beq.n	800b844 <UART_SetConfig+0x2b0>
 800b82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b830:	d811      	bhi.n	800b856 <UART_SetConfig+0x2c2>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <UART_SetConfig+0x2aa>
 800b836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83a:	d006      	beq.n	800b84a <UART_SetConfig+0x2b6>
 800b83c:	e00b      	b.n	800b856 <UART_SetConfig+0x2c2>
 800b83e:	2300      	movs	r3, #0
 800b840:	77fb      	strb	r3, [r7, #31]
 800b842:	e04a      	b.n	800b8da <UART_SetConfig+0x346>
 800b844:	2302      	movs	r3, #2
 800b846:	77fb      	strb	r3, [r7, #31]
 800b848:	e047      	b.n	800b8da <UART_SetConfig+0x346>
 800b84a:	2304      	movs	r3, #4
 800b84c:	77fb      	strb	r3, [r7, #31]
 800b84e:	e044      	b.n	800b8da <UART_SetConfig+0x346>
 800b850:	2308      	movs	r3, #8
 800b852:	77fb      	strb	r3, [r7, #31]
 800b854:	e041      	b.n	800b8da <UART_SetConfig+0x346>
 800b856:	2310      	movs	r3, #16
 800b858:	77fb      	strb	r3, [r7, #31]
 800b85a:	e03e      	b.n	800b8da <UART_SetConfig+0x346>
 800b85c:	efff69f3 	.word	0xefff69f3
 800b860:	40011000 	.word	0x40011000
 800b864:	40023800 	.word	0x40023800
 800b868:	40004400 	.word	0x40004400
 800b86c:	40004800 	.word	0x40004800
 800b870:	40004c00 	.word	0x40004c00
 800b874:	40005000 	.word	0x40005000
 800b878:	40011400 	.word	0x40011400
 800b87c:	40007800 	.word	0x40007800
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a71      	ldr	r2, [pc, #452]	; (800ba4c <UART_SetConfig+0x4b8>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d125      	bne.n	800b8d6 <UART_SetConfig+0x342>
 800b88a:	4b71      	ldr	r3, [pc, #452]	; (800ba50 <UART_SetConfig+0x4bc>)
 800b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b894:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b898:	d017      	beq.n	800b8ca <UART_SetConfig+0x336>
 800b89a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b89e:	d817      	bhi.n	800b8d0 <UART_SetConfig+0x33c>
 800b8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8a4:	d00b      	beq.n	800b8be <UART_SetConfig+0x32a>
 800b8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8aa:	d811      	bhi.n	800b8d0 <UART_SetConfig+0x33c>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <UART_SetConfig+0x324>
 800b8b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8b4:	d006      	beq.n	800b8c4 <UART_SetConfig+0x330>
 800b8b6:	e00b      	b.n	800b8d0 <UART_SetConfig+0x33c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	77fb      	strb	r3, [r7, #31]
 800b8bc:	e00d      	b.n	800b8da <UART_SetConfig+0x346>
 800b8be:	2302      	movs	r3, #2
 800b8c0:	77fb      	strb	r3, [r7, #31]
 800b8c2:	e00a      	b.n	800b8da <UART_SetConfig+0x346>
 800b8c4:	2304      	movs	r3, #4
 800b8c6:	77fb      	strb	r3, [r7, #31]
 800b8c8:	e007      	b.n	800b8da <UART_SetConfig+0x346>
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	77fb      	strb	r3, [r7, #31]
 800b8ce:	e004      	b.n	800b8da <UART_SetConfig+0x346>
 800b8d0:	2310      	movs	r3, #16
 800b8d2:	77fb      	strb	r3, [r7, #31]
 800b8d4:	e001      	b.n	800b8da <UART_SetConfig+0x346>
 800b8d6:	2310      	movs	r3, #16
 800b8d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8e2:	d15a      	bne.n	800b99a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b8e4:	7ffb      	ldrb	r3, [r7, #31]
 800b8e6:	2b08      	cmp	r3, #8
 800b8e8:	d827      	bhi.n	800b93a <UART_SetConfig+0x3a6>
 800b8ea:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <UART_SetConfig+0x35c>)
 800b8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b91d 	.word	0x0800b91d
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	0800b93b 	.word	0x0800b93b
 800b900:	0800b92b 	.word	0x0800b92b
 800b904:	0800b93b 	.word	0x0800b93b
 800b908:	0800b93b 	.word	0x0800b93b
 800b90c:	0800b93b 	.word	0x0800b93b
 800b910:	0800b933 	.word	0x0800b933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b914:	f7fe fd7c 	bl	800a410 <HAL_RCC_GetPCLK1Freq>
 800b918:	61b8      	str	r0, [r7, #24]
        break;
 800b91a:	e013      	b.n	800b944 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b91c:	f7fe fd8c 	bl	800a438 <HAL_RCC_GetPCLK2Freq>
 800b920:	61b8      	str	r0, [r7, #24]
        break;
 800b922:	e00f      	b.n	800b944 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b924:	4b4b      	ldr	r3, [pc, #300]	; (800ba54 <UART_SetConfig+0x4c0>)
 800b926:	61bb      	str	r3, [r7, #24]
        break;
 800b928:	e00c      	b.n	800b944 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b92a:	f7fe fcaf 	bl	800a28c <HAL_RCC_GetSysClockFreq>
 800b92e:	61b8      	str	r0, [r7, #24]
        break;
 800b930:	e008      	b.n	800b944 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b936:	61bb      	str	r3, [r7, #24]
        break;
 800b938:	e004      	b.n	800b944 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	77bb      	strb	r3, [r7, #30]
        break;
 800b942:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d074      	beq.n	800ba34 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	005a      	lsls	r2, r3, #1
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	441a      	add	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b0f      	cmp	r3, #15
 800b964:	d916      	bls.n	800b994 <UART_SetConfig+0x400>
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96c:	d212      	bcs.n	800b994 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	b29b      	uxth	r3, r3
 800b972:	f023 030f 	bic.w	r3, r3, #15
 800b976:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	b29a      	uxth	r2, r3
 800b984:	89fb      	ldrh	r3, [r7, #14]
 800b986:	4313      	orrs	r3, r2
 800b988:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	89fa      	ldrh	r2, [r7, #14]
 800b990:	60da      	str	r2, [r3, #12]
 800b992:	e04f      	b.n	800ba34 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	77bb      	strb	r3, [r7, #30]
 800b998:	e04c      	b.n	800ba34 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b99a:	7ffb      	ldrb	r3, [r7, #31]
 800b99c:	2b08      	cmp	r3, #8
 800b99e:	d828      	bhi.n	800b9f2 <UART_SetConfig+0x45e>
 800b9a0:	a201      	add	r2, pc, #4	; (adr r2, 800b9a8 <UART_SetConfig+0x414>)
 800b9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a6:	bf00      	nop
 800b9a8:	0800b9cd 	.word	0x0800b9cd
 800b9ac:	0800b9d5 	.word	0x0800b9d5
 800b9b0:	0800b9dd 	.word	0x0800b9dd
 800b9b4:	0800b9f3 	.word	0x0800b9f3
 800b9b8:	0800b9e3 	.word	0x0800b9e3
 800b9bc:	0800b9f3 	.word	0x0800b9f3
 800b9c0:	0800b9f3 	.word	0x0800b9f3
 800b9c4:	0800b9f3 	.word	0x0800b9f3
 800b9c8:	0800b9eb 	.word	0x0800b9eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9cc:	f7fe fd20 	bl	800a410 <HAL_RCC_GetPCLK1Freq>
 800b9d0:	61b8      	str	r0, [r7, #24]
        break;
 800b9d2:	e013      	b.n	800b9fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9d4:	f7fe fd30 	bl	800a438 <HAL_RCC_GetPCLK2Freq>
 800b9d8:	61b8      	str	r0, [r7, #24]
        break;
 800b9da:	e00f      	b.n	800b9fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9dc:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <UART_SetConfig+0x4c0>)
 800b9de:	61bb      	str	r3, [r7, #24]
        break;
 800b9e0:	e00c      	b.n	800b9fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9e2:	f7fe fc53 	bl	800a28c <HAL_RCC_GetSysClockFreq>
 800b9e6:	61b8      	str	r0, [r7, #24]
        break;
 800b9e8:	e008      	b.n	800b9fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9ee:	61bb      	str	r3, [r7, #24]
        break;
 800b9f0:	e004      	b.n	800b9fc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	77bb      	strb	r3, [r7, #30]
        break;
 800b9fa:	bf00      	nop
    }

    if (pclk != 0U)
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d018      	beq.n	800ba34 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	085a      	lsrs	r2, r3, #1
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	441a      	add	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b0f      	cmp	r3, #15
 800ba1a:	d909      	bls.n	800ba30 <UART_SetConfig+0x49c>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba22:	d205      	bcs.n	800ba30 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60da      	str	r2, [r3, #12]
 800ba2e:	e001      	b.n	800ba34 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ba40:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3720      	adds	r7, #32
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	40007c00 	.word	0x40007c00
 800ba50:	40023800 	.word	0x40023800
 800ba54:	00f42400 	.word	0x00f42400

0800ba58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	430a      	orrs	r2, r1
 800baa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	f003 0308 	and.w	r3, r3, #8
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	f003 0310 	and.w	r3, r3, #16
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00a      	beq.n	800bb0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d01a      	beq.n	800bb6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb56:	d10a      	bne.n	800bb6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	605a      	str	r2, [r3, #4]
  }
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbac:	f7fb fb80 	bl	80072b0 <HAL_GetTick>
 800bbb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0308 	and.w	r3, r3, #8
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d10e      	bne.n	800bbde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f817 	bl	800bc02 <UART_WaitOnFlagUntilTimeout>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e00d      	b.n	800bbfa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b09c      	sub	sp, #112	; 0x70
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc12:	e0a5      	b.n	800bd60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc1a:	f000 80a1 	beq.w	800bd60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1e:	f7fb fb47 	bl	80072b0 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d302      	bcc.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d13e      	bne.n	800bcb2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc48:	667b      	str	r3, [r7, #100]	; 0x64
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc5a:	e841 2300 	strex	r3, r2, [r1]
 800bc5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e6      	bne.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3308      	adds	r3, #8
 800bc84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc86:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e5      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2220      	movs	r2, #32
 800bca4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	e067      	b.n	800bd82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d04f      	beq.n	800bd60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcce:	d147      	bne.n	800bd60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bcfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e6      	bne.n	800bcda <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3308      	adds	r3, #8
 800bd12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f023 0301 	bic.w	r3, r3, #1
 800bd22:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	3308      	adds	r3, #8
 800bd2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd2c:	623a      	str	r2, [r7, #32]
 800bd2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd30:	69f9      	ldr	r1, [r7, #28]
 800bd32:	6a3a      	ldr	r2, [r7, #32]
 800bd34:	e841 2300 	strex	r3, r2, [r1]
 800bd38:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1e5      	bne.n	800bd0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2220      	movs	r2, #32
 800bd44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e010      	b.n	800bd82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	69da      	ldr	r2, [r3, #28]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	bf0c      	ite	eq
 800bd70:	2301      	moveq	r3, #1
 800bd72:	2300      	movne	r3, #0
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	461a      	mov	r2, r3
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	f43f af4a 	beq.w	800bc14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3770      	adds	r7, #112	; 0x70
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d121      	bne.n	800bde2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	4b27      	ldr	r3, [pc, #156]	; (800be40 <FMC_SDRAM_Init+0xb4>)
 800bda4:	4013      	ands	r3, r2
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	6851      	ldr	r1, [r2, #4]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	6892      	ldr	r2, [r2, #8]
 800bdae:	4311      	orrs	r1, r2
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	68d2      	ldr	r2, [r2, #12]
 800bdb4:	4311      	orrs	r1, r2
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	6912      	ldr	r2, [r2, #16]
 800bdba:	4311      	orrs	r1, r2
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	6952      	ldr	r2, [r2, #20]
 800bdc0:	4311      	orrs	r1, r2
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	6992      	ldr	r2, [r2, #24]
 800bdc6:	4311      	orrs	r1, r2
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	69d2      	ldr	r2, [r2, #28]
 800bdcc:	4311      	orrs	r1, r2
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	6a12      	ldr	r2, [r2, #32]
 800bdd2:	4311      	orrs	r1, r2
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	e026      	b.n	800be30 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	69d9      	ldr	r1, [r3, #28]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	4319      	orrs	r1, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <FMC_SDRAM_Init+0xb4>)
 800be06:	4013      	ands	r3, r2
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	6851      	ldr	r1, [r2, #4]
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	6892      	ldr	r2, [r2, #8]
 800be10:	4311      	orrs	r1, r2
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	68d2      	ldr	r2, [r2, #12]
 800be16:	4311      	orrs	r1, r2
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	6912      	ldr	r2, [r2, #16]
 800be1c:	4311      	orrs	r1, r2
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	6952      	ldr	r2, [r2, #20]
 800be22:	4311      	orrs	r1, r2
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	6992      	ldr	r2, [r2, #24]
 800be28:	430a      	orrs	r2, r1
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	ffff8000 	.word	0xffff8000

0800be44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d128      	bne.n	800bea8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	1e59      	subs	r1, r3, #1
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	3b01      	subs	r3, #1
 800be6a:	011b      	lsls	r3, r3, #4
 800be6c:	4319      	orrs	r1, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	3b01      	subs	r3, #1
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	4319      	orrs	r1, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	031b      	lsls	r3, r3, #12
 800be80:	4319      	orrs	r1, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	3b01      	subs	r3, #1
 800be88:	041b      	lsls	r3, r3, #16
 800be8a:	4319      	orrs	r1, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	3b01      	subs	r3, #1
 800be92:	051b      	lsls	r3, r3, #20
 800be94:	4319      	orrs	r1, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	061b      	lsls	r3, r3, #24
 800be9e:	430b      	orrs	r3, r1
 800bea0:	431a      	orrs	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	609a      	str	r2, [r3, #8]
 800bea6:	e02d      	b.n	800bf04 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	4b19      	ldr	r3, [pc, #100]	; (800bf14 <FMC_SDRAM_Timing_Init+0xd0>)
 800beae:	4013      	ands	r3, r2
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	68d2      	ldr	r2, [r2, #12]
 800beb4:	3a01      	subs	r2, #1
 800beb6:	0311      	lsls	r1, r2, #12
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	6952      	ldr	r2, [r2, #20]
 800bebc:	3a01      	subs	r2, #1
 800bebe:	0512      	lsls	r2, r2, #20
 800bec0:	430a      	orrs	r2, r1
 800bec2:	431a      	orrs	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	1e59      	subs	r1, r3, #1
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	3b01      	subs	r3, #1
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	4319      	orrs	r1, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	4319      	orrs	r1, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	3b01      	subs	r3, #1
 800bef0:	041b      	lsls	r3, r3, #16
 800bef2:	4319      	orrs	r1, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	3b01      	subs	r3, #1
 800befa:	061b      	lsls	r3, r3, #24
 800befc:	430b      	orrs	r3, r1
 800befe:	431a      	orrs	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	ff0f0fff 	.word	0xff0f0fff

0800bf18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	691a      	ldr	r2, [r3, #16]
 800bf28:	4b0c      	ldr	r3, [pc, #48]	; (800bf5c <FMC_SDRAM_SendCommand+0x44>)
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	6811      	ldr	r1, [r2, #0]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	6852      	ldr	r2, [r2, #4]
 800bf34:	4311      	orrs	r1, r2
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	6892      	ldr	r2, [r2, #8]
 800bf3a:	3a01      	subs	r2, #1
 800bf3c:	0152      	lsls	r2, r2, #5
 800bf3e:	4311      	orrs	r1, r2
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	68d2      	ldr	r2, [r2, #12]
 800bf44:	0252      	lsls	r2, r2, #9
 800bf46:	430a      	orrs	r2, r1
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	ffc00000 	.word	0xffc00000

0800bf60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695a      	ldr	r2, [r3, #20]
 800bf6e:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	0052      	lsls	r2, r2, #1
 800bf76:	431a      	orrs	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	ffffc001 	.word	0xffffc001

0800bf90 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
}
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6892      	ldr	r2, [r2, #8]
 800bfee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	6852      	ldr	r2, [r2, #4]
 800bff8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	429a      	cmp	r2, r3
 800c002:	d103      	bne.n	800c00c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	1e5a      	subs	r2, r3, #1
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c036:	4b4f      	ldr	r3, [pc, #316]	; (800c174 <xTaskIncrementTick+0x148>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f040 808a 	bne.w	800c154 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c040:	4b4d      	ldr	r3, [pc, #308]	; (800c178 <xTaskIncrementTick+0x14c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c048:	4a4b      	ldr	r2, [pc, #300]	; (800c178 <xTaskIncrementTick+0x14c>)
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d122      	bne.n	800c09a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c054:	4b49      	ldr	r3, [pc, #292]	; (800c17c <xTaskIncrementTick+0x150>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <xTaskIncrementTick+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	b672      	cpsid	i
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	b662      	cpsie	i
 800c072:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <xTaskIncrementTick+0x4a>
 800c078:	4b40      	ldr	r3, [pc, #256]	; (800c17c <xTaskIncrementTick+0x150>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	4b40      	ldr	r3, [pc, #256]	; (800c180 <xTaskIncrementTick+0x154>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a3e      	ldr	r2, [pc, #248]	; (800c17c <xTaskIncrementTick+0x150>)
 800c084:	6013      	str	r3, [r2, #0]
 800c086:	4a3e      	ldr	r2, [pc, #248]	; (800c180 <xTaskIncrementTick+0x154>)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	4b3d      	ldr	r3, [pc, #244]	; (800c184 <xTaskIncrementTick+0x158>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3301      	adds	r3, #1
 800c092:	4a3c      	ldr	r2, [pc, #240]	; (800c184 <xTaskIncrementTick+0x158>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	f000 f8e1 	bl	800c25c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c09a:	4b3b      	ldr	r3, [pc, #236]	; (800c188 <xTaskIncrementTick+0x15c>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d348      	bcc.n	800c136 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0a4:	4b35      	ldr	r3, [pc, #212]	; (800c17c <xTaskIncrementTick+0x150>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d104      	bne.n	800c0b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ae:	4b36      	ldr	r3, [pc, #216]	; (800c188 <xTaskIncrementTick+0x15c>)
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b4:	601a      	str	r2, [r3, #0]
					break;
 800c0b6:	e03e      	b.n	800c136 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0b8:	4b30      	ldr	r3, [pc, #192]	; (800c17c <xTaskIncrementTick+0x150>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d203      	bcs.n	800c0d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0d0:	4a2d      	ldr	r2, [pc, #180]	; (800c188 <xTaskIncrementTick+0x15c>)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0d6:	e02e      	b.n	800c136 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff7b 	bl	800bfd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	3318      	adds	r3, #24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff ff72 	bl	800bfd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	409a      	lsls	r2, r3
 800c0fc:	4b23      	ldr	r3, [pc, #140]	; (800c18c <xTaskIncrementTick+0x160>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4313      	orrs	r3, r2
 800c102:	4a22      	ldr	r2, [pc, #136]	; (800c18c <xTaskIncrementTick+0x160>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	4613      	mov	r3, r2
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4a1f      	ldr	r2, [pc, #124]	; (800c190 <xTaskIncrementTick+0x164>)
 800c114:	441a      	add	r2, r3
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	3304      	adds	r3, #4
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f7ff ff37 	bl	800bf90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c126:	4b1b      	ldr	r3, [pc, #108]	; (800c194 <xTaskIncrementTick+0x168>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d3b9      	bcc.n	800c0a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c130:	2301      	movs	r3, #1
 800c132:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c134:	e7b6      	b.n	800c0a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c136:	4b17      	ldr	r3, [pc, #92]	; (800c194 <xTaskIncrementTick+0x168>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13c:	4914      	ldr	r1, [pc, #80]	; (800c190 <xTaskIncrementTick+0x164>)
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d907      	bls.n	800c15e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c14e:	2301      	movs	r3, #1
 800c150:	617b      	str	r3, [r7, #20]
 800c152:	e004      	b.n	800c15e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c154:	4b10      	ldr	r3, [pc, #64]	; (800c198 <xTaskIncrementTick+0x16c>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	4a0f      	ldr	r2, [pc, #60]	; (800c198 <xTaskIncrementTick+0x16c>)
 800c15c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c15e:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <xTaskIncrementTick+0x170>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c166:	2301      	movs	r3, #1
 800c168:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c16a:	697b      	ldr	r3, [r7, #20]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000354 	.word	0x20000354
 800c178:	2000033c 	.word	0x2000033c
 800c17c:	20000334 	.word	0x20000334
 800c180:	20000338 	.word	0x20000338
 800c184:	2000034c 	.word	0x2000034c
 800c188:	20000350 	.word	0x20000350
 800c18c:	20000340 	.word	0x20000340
 800c190:	200002a8 	.word	0x200002a8
 800c194:	200002a4 	.word	0x200002a4
 800c198:	20000344 	.word	0x20000344
 800c19c:	20000348 	.word	0x20000348

0800c1a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1a6:	4b28      	ldr	r3, [pc, #160]	; (800c248 <vTaskSwitchContext+0xa8>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1ae:	4b27      	ldr	r3, [pc, #156]	; (800c24c <vTaskSwitchContext+0xac>)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1b4:	e041      	b.n	800c23a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c1b6:	4b25      	ldr	r3, [pc, #148]	; (800c24c <vTaskSwitchContext+0xac>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1bc:	4b24      	ldr	r3, [pc, #144]	; (800c250 <vTaskSwitchContext+0xb0>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	fab3 f383 	clz	r3, r3
 800c1c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c1ca:	7afb      	ldrb	r3, [r7, #11]
 800c1cc:	f1c3 031f 	rsb	r3, r3, #31
 800c1d0:	617b      	str	r3, [r7, #20]
 800c1d2:	4920      	ldr	r1, [pc, #128]	; (800c254 <vTaskSwitchContext+0xb4>)
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10c      	bne.n	800c200 <vTaskSwitchContext+0x60>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	b672      	cpsid	i
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	b662      	cpsie	i
 800c1fa:	607b      	str	r3, [r7, #4]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <vTaskSwitchContext+0x5e>
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a12      	ldr	r2, [pc, #72]	; (800c254 <vTaskSwitchContext+0xb4>)
 800c20c:	4413      	add	r3, r2
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	3308      	adds	r3, #8
 800c222:	429a      	cmp	r2, r3
 800c224:	d104      	bne.n	800c230 <vTaskSwitchContext+0x90>
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	605a      	str	r2, [r3, #4]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4a08      	ldr	r2, [pc, #32]	; (800c258 <vTaskSwitchContext+0xb8>)
 800c238:	6013      	str	r3, [r2, #0]
}
 800c23a:	bf00      	nop
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20000354 	.word	0x20000354
 800c24c:	20000348 	.word	0x20000348
 800c250:	20000340 	.word	0x20000340
 800c254:	200002a8 	.word	0x200002a8
 800c258:	200002a4 	.word	0x200002a4

0800c25c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c262:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <prvResetNextTaskUnblockTime+0x38>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d104      	bne.n	800c276 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c26c:	4b0a      	ldr	r3, [pc, #40]	; (800c298 <prvResetNextTaskUnblockTime+0x3c>)
 800c26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c272:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c274:	e008      	b.n	800c288 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <prvResetNextTaskUnblockTime+0x38>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	4a04      	ldr	r2, [pc, #16]	; (800c298 <prvResetNextTaskUnblockTime+0x3c>)
 800c286:	6013      	str	r3, [r2, #0]
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	20000334 	.word	0x20000334
 800c298:	20000350 	.word	0x20000350
 800c29c:	00000000 	.word	0x00000000

0800c2a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <pxCurrentTCBConst2>)
 800c2a2:	6819      	ldr	r1, [r3, #0]
 800c2a4:	6808      	ldr	r0, [r1, #0]
 800c2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	f380 8809 	msr	PSP, r0
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8811 	msr	BASEPRI, r0
 800c2ba:	4770      	bx	lr
 800c2bc:	f3af 8000 	nop.w

0800c2c0 <pxCurrentTCBConst2>:
 800c2c0:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
	...

0800c2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2d0:	f3ef 8009 	mrs	r0, PSP
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	4b15      	ldr	r3, [pc, #84]	; (800c330 <pxCurrentTCBConst>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f01e 0f10 	tst.w	lr, #16
 800c2e0:	bf08      	it	eq
 800c2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ea:	6010      	str	r0, [r2, #0]
 800c2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2f4:	b672      	cpsid	i
 800c2f6:	f380 8811 	msr	BASEPRI, r0
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	b662      	cpsie	i
 800c304:	f7ff ff4c 	bl	800c1a0 <vTaskSwitchContext>
 800c308:	f04f 0000 	mov.w	r0, #0
 800c30c:	f380 8811 	msr	BASEPRI, r0
 800c310:	bc09      	pop	{r0, r3}
 800c312:	6819      	ldr	r1, [r3, #0]
 800c314:	6808      	ldr	r0, [r1, #0]
 800c316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31a:	f01e 0f10 	tst.w	lr, #16
 800c31e:	bf08      	it	eq
 800c320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c324:	f380 8809 	msr	PSP, r0
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop

0800c330 <pxCurrentTCBConst>:
 800c330:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop

0800c338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	b672      	cpsid	i
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	b662      	cpsie	i
 800c352:	607b      	str	r3, [r7, #4]
}
 800c354:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c356:	f7ff fe69 	bl	800c02c <xTaskIncrementTick>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c360:	4b06      	ldr	r3, [pc, #24]	; (800c37c <SysTick_Handler+0x44>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	2300      	movs	r3, #0
 800c36a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c372:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c374:	bf00      	nop
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <calloc>:
 800c380:	4b02      	ldr	r3, [pc, #8]	; (800c38c <calloc+0xc>)
 800c382:	460a      	mov	r2, r1
 800c384:	4601      	mov	r1, r0
 800c386:	6818      	ldr	r0, [r3, #0]
 800c388:	f000 b84a 	b.w	800c420 <_calloc_r>
 800c38c:	20000040 	.word	0x20000040

0800c390 <__errno>:
 800c390:	4b01      	ldr	r3, [pc, #4]	; (800c398 <__errno+0x8>)
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	20000040 	.word	0x20000040

0800c39c <__libc_init_array>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	4d0d      	ldr	r5, [pc, #52]	; (800c3d4 <__libc_init_array+0x38>)
 800c3a0:	4c0d      	ldr	r4, [pc, #52]	; (800c3d8 <__libc_init_array+0x3c>)
 800c3a2:	1b64      	subs	r4, r4, r5
 800c3a4:	10a4      	asrs	r4, r4, #2
 800c3a6:	2600      	movs	r6, #0
 800c3a8:	42a6      	cmp	r6, r4
 800c3aa:	d109      	bne.n	800c3c0 <__libc_init_array+0x24>
 800c3ac:	4d0b      	ldr	r5, [pc, #44]	; (800c3dc <__libc_init_array+0x40>)
 800c3ae:	4c0c      	ldr	r4, [pc, #48]	; (800c3e0 <__libc_init_array+0x44>)
 800c3b0:	f001 f86e 	bl	800d490 <_init>
 800c3b4:	1b64      	subs	r4, r4, r5
 800c3b6:	10a4      	asrs	r4, r4, #2
 800c3b8:	2600      	movs	r6, #0
 800c3ba:	42a6      	cmp	r6, r4
 800c3bc:	d105      	bne.n	800c3ca <__libc_init_array+0x2e>
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
 800c3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c4:	4798      	blx	r3
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	e7ee      	b.n	800c3a8 <__libc_init_array+0xc>
 800c3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ce:	4798      	blx	r3
 800c3d0:	3601      	adds	r6, #1
 800c3d2:	e7f2      	b.n	800c3ba <__libc_init_array+0x1e>
 800c3d4:	0809d274 	.word	0x0809d274
 800c3d8:	0809d274 	.word	0x0809d274
 800c3dc:	0809d274 	.word	0x0809d274
 800c3e0:	0809d278 	.word	0x0809d278

0800c3e4 <malloc>:
 800c3e4:	4b02      	ldr	r3, [pc, #8]	; (800c3f0 <malloc+0xc>)
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	f000 b879 	b.w	800c4e0 <_malloc_r>
 800c3ee:	bf00      	nop
 800c3f0:	20000040 	.word	0x20000040

0800c3f4 <memcpy>:
 800c3f4:	440a      	add	r2, r1
 800c3f6:	4291      	cmp	r1, r2
 800c3f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3fc:	d100      	bne.n	800c400 <memcpy+0xc>
 800c3fe:	4770      	bx	lr
 800c400:	b510      	push	{r4, lr}
 800c402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c40a:	4291      	cmp	r1, r2
 800c40c:	d1f9      	bne.n	800c402 <memcpy+0xe>
 800c40e:	bd10      	pop	{r4, pc}

0800c410 <memset>:
 800c410:	4402      	add	r2, r0
 800c412:	4603      	mov	r3, r0
 800c414:	4293      	cmp	r3, r2
 800c416:	d100      	bne.n	800c41a <memset+0xa>
 800c418:	4770      	bx	lr
 800c41a:	f803 1b01 	strb.w	r1, [r3], #1
 800c41e:	e7f9      	b.n	800c414 <memset+0x4>

0800c420 <_calloc_r>:
 800c420:	b513      	push	{r0, r1, r4, lr}
 800c422:	434a      	muls	r2, r1
 800c424:	4611      	mov	r1, r2
 800c426:	9201      	str	r2, [sp, #4]
 800c428:	f000 f85a 	bl	800c4e0 <_malloc_r>
 800c42c:	4604      	mov	r4, r0
 800c42e:	b118      	cbz	r0, 800c438 <_calloc_r+0x18>
 800c430:	9a01      	ldr	r2, [sp, #4]
 800c432:	2100      	movs	r1, #0
 800c434:	f7ff ffec 	bl	800c410 <memset>
 800c438:	4620      	mov	r0, r4
 800c43a:	b002      	add	sp, #8
 800c43c:	bd10      	pop	{r4, pc}
	...

0800c440 <_free_r>:
 800c440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c442:	2900      	cmp	r1, #0
 800c444:	d048      	beq.n	800c4d8 <_free_r+0x98>
 800c446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44a:	9001      	str	r0, [sp, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f1a1 0404 	sub.w	r4, r1, #4
 800c452:	bfb8      	it	lt
 800c454:	18e4      	addlt	r4, r4, r3
 800c456:	f000 f94b 	bl	800c6f0 <__malloc_lock>
 800c45a:	4a20      	ldr	r2, [pc, #128]	; (800c4dc <_free_r+0x9c>)
 800c45c:	9801      	ldr	r0, [sp, #4]
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	4615      	mov	r5, r2
 800c462:	b933      	cbnz	r3, 800c472 <_free_r+0x32>
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	6014      	str	r4, [r2, #0]
 800c468:	b003      	add	sp, #12
 800c46a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c46e:	f000 b945 	b.w	800c6fc <__malloc_unlock>
 800c472:	42a3      	cmp	r3, r4
 800c474:	d90b      	bls.n	800c48e <_free_r+0x4e>
 800c476:	6821      	ldr	r1, [r4, #0]
 800c478:	1862      	adds	r2, r4, r1
 800c47a:	4293      	cmp	r3, r2
 800c47c:	bf04      	itt	eq
 800c47e:	681a      	ldreq	r2, [r3, #0]
 800c480:	685b      	ldreq	r3, [r3, #4]
 800c482:	6063      	str	r3, [r4, #4]
 800c484:	bf04      	itt	eq
 800c486:	1852      	addeq	r2, r2, r1
 800c488:	6022      	streq	r2, [r4, #0]
 800c48a:	602c      	str	r4, [r5, #0]
 800c48c:	e7ec      	b.n	800c468 <_free_r+0x28>
 800c48e:	461a      	mov	r2, r3
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	b10b      	cbz	r3, 800c498 <_free_r+0x58>
 800c494:	42a3      	cmp	r3, r4
 800c496:	d9fa      	bls.n	800c48e <_free_r+0x4e>
 800c498:	6811      	ldr	r1, [r2, #0]
 800c49a:	1855      	adds	r5, r2, r1
 800c49c:	42a5      	cmp	r5, r4
 800c49e:	d10b      	bne.n	800c4b8 <_free_r+0x78>
 800c4a0:	6824      	ldr	r4, [r4, #0]
 800c4a2:	4421      	add	r1, r4
 800c4a4:	1854      	adds	r4, r2, r1
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	d1dd      	bne.n	800c468 <_free_r+0x28>
 800c4ac:	681c      	ldr	r4, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	6053      	str	r3, [r2, #4]
 800c4b2:	4421      	add	r1, r4
 800c4b4:	6011      	str	r1, [r2, #0]
 800c4b6:	e7d7      	b.n	800c468 <_free_r+0x28>
 800c4b8:	d902      	bls.n	800c4c0 <_free_r+0x80>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	e7d3      	b.n	800c468 <_free_r+0x28>
 800c4c0:	6825      	ldr	r5, [r4, #0]
 800c4c2:	1961      	adds	r1, r4, r5
 800c4c4:	428b      	cmp	r3, r1
 800c4c6:	bf04      	itt	eq
 800c4c8:	6819      	ldreq	r1, [r3, #0]
 800c4ca:	685b      	ldreq	r3, [r3, #4]
 800c4cc:	6063      	str	r3, [r4, #4]
 800c4ce:	bf04      	itt	eq
 800c4d0:	1949      	addeq	r1, r1, r5
 800c4d2:	6021      	streq	r1, [r4, #0]
 800c4d4:	6054      	str	r4, [r2, #4]
 800c4d6:	e7c7      	b.n	800c468 <_free_r+0x28>
 800c4d8:	b003      	add	sp, #12
 800c4da:	bd30      	pop	{r4, r5, pc}
 800c4dc:	20000358 	.word	0x20000358

0800c4e0 <_malloc_r>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	1ccd      	adds	r5, r1, #3
 800c4e4:	f025 0503 	bic.w	r5, r5, #3
 800c4e8:	3508      	adds	r5, #8
 800c4ea:	2d0c      	cmp	r5, #12
 800c4ec:	bf38      	it	cc
 800c4ee:	250c      	movcc	r5, #12
 800c4f0:	2d00      	cmp	r5, #0
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	db01      	blt.n	800c4fa <_malloc_r+0x1a>
 800c4f6:	42a9      	cmp	r1, r5
 800c4f8:	d903      	bls.n	800c502 <_malloc_r+0x22>
 800c4fa:	230c      	movs	r3, #12
 800c4fc:	6033      	str	r3, [r6, #0]
 800c4fe:	2000      	movs	r0, #0
 800c500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c502:	f000 f8f5 	bl	800c6f0 <__malloc_lock>
 800c506:	4921      	ldr	r1, [pc, #132]	; (800c58c <_malloc_r+0xac>)
 800c508:	680a      	ldr	r2, [r1, #0]
 800c50a:	4614      	mov	r4, r2
 800c50c:	b99c      	cbnz	r4, 800c536 <_malloc_r+0x56>
 800c50e:	4f20      	ldr	r7, [pc, #128]	; (800c590 <_malloc_r+0xb0>)
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	b923      	cbnz	r3, 800c51e <_malloc_r+0x3e>
 800c514:	4621      	mov	r1, r4
 800c516:	4630      	mov	r0, r6
 800c518:	f000 f8aa 	bl	800c670 <_sbrk_r>
 800c51c:	6038      	str	r0, [r7, #0]
 800c51e:	4629      	mov	r1, r5
 800c520:	4630      	mov	r0, r6
 800c522:	f000 f8a5 	bl	800c670 <_sbrk_r>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d123      	bne.n	800c572 <_malloc_r+0x92>
 800c52a:	230c      	movs	r3, #12
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	4630      	mov	r0, r6
 800c530:	f000 f8e4 	bl	800c6fc <__malloc_unlock>
 800c534:	e7e3      	b.n	800c4fe <_malloc_r+0x1e>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	1b5b      	subs	r3, r3, r5
 800c53a:	d417      	bmi.n	800c56c <_malloc_r+0x8c>
 800c53c:	2b0b      	cmp	r3, #11
 800c53e:	d903      	bls.n	800c548 <_malloc_r+0x68>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	441c      	add	r4, r3
 800c544:	6025      	str	r5, [r4, #0]
 800c546:	e004      	b.n	800c552 <_malloc_r+0x72>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	42a2      	cmp	r2, r4
 800c54c:	bf0c      	ite	eq
 800c54e:	600b      	streq	r3, [r1, #0]
 800c550:	6053      	strne	r3, [r2, #4]
 800c552:	4630      	mov	r0, r6
 800c554:	f000 f8d2 	bl	800c6fc <__malloc_unlock>
 800c558:	f104 000b 	add.w	r0, r4, #11
 800c55c:	1d23      	adds	r3, r4, #4
 800c55e:	f020 0007 	bic.w	r0, r0, #7
 800c562:	1ac2      	subs	r2, r0, r3
 800c564:	d0cc      	beq.n	800c500 <_malloc_r+0x20>
 800c566:	1a1b      	subs	r3, r3, r0
 800c568:	50a3      	str	r3, [r4, r2]
 800c56a:	e7c9      	b.n	800c500 <_malloc_r+0x20>
 800c56c:	4622      	mov	r2, r4
 800c56e:	6864      	ldr	r4, [r4, #4]
 800c570:	e7cc      	b.n	800c50c <_malloc_r+0x2c>
 800c572:	1cc4      	adds	r4, r0, #3
 800c574:	f024 0403 	bic.w	r4, r4, #3
 800c578:	42a0      	cmp	r0, r4
 800c57a:	d0e3      	beq.n	800c544 <_malloc_r+0x64>
 800c57c:	1a21      	subs	r1, r4, r0
 800c57e:	4630      	mov	r0, r6
 800c580:	f000 f876 	bl	800c670 <_sbrk_r>
 800c584:	3001      	adds	r0, #1
 800c586:	d1dd      	bne.n	800c544 <_malloc_r+0x64>
 800c588:	e7cf      	b.n	800c52a <_malloc_r+0x4a>
 800c58a:	bf00      	nop
 800c58c:	20000358 	.word	0x20000358
 800c590:	2000035c 	.word	0x2000035c

0800c594 <srand>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4b10      	ldr	r3, [pc, #64]	; (800c5d8 <srand+0x44>)
 800c598:	681d      	ldr	r5, [r3, #0]
 800c59a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c59c:	4604      	mov	r4, r0
 800c59e:	b9b3      	cbnz	r3, 800c5ce <srand+0x3a>
 800c5a0:	2018      	movs	r0, #24
 800c5a2:	f7ff ff1f 	bl	800c3e4 <malloc>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	63a8      	str	r0, [r5, #56]	; 0x38
 800c5aa:	b920      	cbnz	r0, 800c5b6 <srand+0x22>
 800c5ac:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <srand+0x48>)
 800c5ae:	480c      	ldr	r0, [pc, #48]	; (800c5e0 <srand+0x4c>)
 800c5b0:	2142      	movs	r1, #66	; 0x42
 800c5b2:	f000 f86d 	bl	800c690 <__assert_func>
 800c5b6:	490b      	ldr	r1, [pc, #44]	; (800c5e4 <srand+0x50>)
 800c5b8:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <srand+0x54>)
 800c5ba:	e9c0 1300 	strd	r1, r3, [r0]
 800c5be:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <srand+0x58>)
 800c5c0:	6083      	str	r3, [r0, #8]
 800c5c2:	230b      	movs	r3, #11
 800c5c4:	8183      	strh	r3, [r0, #12]
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	2001      	movs	r0, #1
 800c5ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c5ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	611c      	str	r4, [r3, #16]
 800c5d4:	615a      	str	r2, [r3, #20]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20000040 	.word	0x20000040
 800c5dc:	0809d124 	.word	0x0809d124
 800c5e0:	0809d13b 	.word	0x0809d13b
 800c5e4:	abcd330e 	.word	0xabcd330e
 800c5e8:	e66d1234 	.word	0xe66d1234
 800c5ec:	0005deec 	.word	0x0005deec

0800c5f0 <rand>:
 800c5f0:	4b17      	ldr	r3, [pc, #92]	; (800c650 <rand+0x60>)
 800c5f2:	b510      	push	{r4, lr}
 800c5f4:	681c      	ldr	r4, [r3, #0]
 800c5f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c5f8:	b9b3      	cbnz	r3, 800c628 <rand+0x38>
 800c5fa:	2018      	movs	r0, #24
 800c5fc:	f7ff fef2 	bl	800c3e4 <malloc>
 800c600:	63a0      	str	r0, [r4, #56]	; 0x38
 800c602:	b928      	cbnz	r0, 800c610 <rand+0x20>
 800c604:	4602      	mov	r2, r0
 800c606:	4b13      	ldr	r3, [pc, #76]	; (800c654 <rand+0x64>)
 800c608:	4813      	ldr	r0, [pc, #76]	; (800c658 <rand+0x68>)
 800c60a:	214e      	movs	r1, #78	; 0x4e
 800c60c:	f000 f840 	bl	800c690 <__assert_func>
 800c610:	4a12      	ldr	r2, [pc, #72]	; (800c65c <rand+0x6c>)
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <rand+0x70>)
 800c614:	e9c0 2300 	strd	r2, r3, [r0]
 800c618:	4b12      	ldr	r3, [pc, #72]	; (800c664 <rand+0x74>)
 800c61a:	6083      	str	r3, [r0, #8]
 800c61c:	230b      	movs	r3, #11
 800c61e:	8183      	strh	r3, [r0, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	2300      	movs	r3, #0
 800c624:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c628:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c62a:	480f      	ldr	r0, [pc, #60]	; (800c668 <rand+0x78>)
 800c62c:	690a      	ldr	r2, [r1, #16]
 800c62e:	694b      	ldr	r3, [r1, #20]
 800c630:	4c0e      	ldr	r4, [pc, #56]	; (800c66c <rand+0x7c>)
 800c632:	4350      	muls	r0, r2
 800c634:	fb04 0003 	mla	r0, r4, r3, r0
 800c638:	fba2 3404 	umull	r3, r4, r2, r4
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	4404      	add	r4, r0
 800c640:	f144 0000 	adc.w	r0, r4, #0
 800c644:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c648:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	20000040 	.word	0x20000040
 800c654:	0809d124 	.word	0x0809d124
 800c658:	0809d13b 	.word	0x0809d13b
 800c65c:	abcd330e 	.word	0xabcd330e
 800c660:	e66d1234 	.word	0xe66d1234
 800c664:	0005deec 	.word	0x0005deec
 800c668:	5851f42d 	.word	0x5851f42d
 800c66c:	4c957f2d 	.word	0x4c957f2d

0800c670 <_sbrk_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d06      	ldr	r5, [pc, #24]	; (800c68c <_sbrk_r+0x1c>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f7f9 fd1c 	bl	80060b8 <_sbrk>
 800c680:	1c43      	adds	r3, r0, #1
 800c682:	d102      	bne.n	800c68a <_sbrk_r+0x1a>
 800c684:	682b      	ldr	r3, [r5, #0]
 800c686:	b103      	cbz	r3, 800c68a <_sbrk_r+0x1a>
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	20001044 	.word	0x20001044

0800c690 <__assert_func>:
 800c690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c692:	4614      	mov	r4, r2
 800c694:	461a      	mov	r2, r3
 800c696:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <__assert_func+0x2c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4605      	mov	r5, r0
 800c69c:	68d8      	ldr	r0, [r3, #12]
 800c69e:	b14c      	cbz	r4, 800c6b4 <__assert_func+0x24>
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <__assert_func+0x30>)
 800c6a2:	9100      	str	r1, [sp, #0]
 800c6a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6a8:	4906      	ldr	r1, [pc, #24]	; (800c6c4 <__assert_func+0x34>)
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	f000 f80e 	bl	800c6cc <fiprintf>
 800c6b0:	f000 fbd8 	bl	800ce64 <abort>
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <__assert_func+0x38>)
 800c6b6:	461c      	mov	r4, r3
 800c6b8:	e7f3      	b.n	800c6a2 <__assert_func+0x12>
 800c6ba:	bf00      	nop
 800c6bc:	20000040 	.word	0x20000040
 800c6c0:	0809d19a 	.word	0x0809d19a
 800c6c4:	0809d1a7 	.word	0x0809d1a7
 800c6c8:	0809d1d5 	.word	0x0809d1d5

0800c6cc <fiprintf>:
 800c6cc:	b40e      	push	{r1, r2, r3}
 800c6ce:	b503      	push	{r0, r1, lr}
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	ab03      	add	r3, sp, #12
 800c6d4:	4805      	ldr	r0, [pc, #20]	; (800c6ec <fiprintf+0x20>)
 800c6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	f000 f83d 	bl	800c75c <_vfiprintf_r>
 800c6e2:	b002      	add	sp, #8
 800c6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e8:	b003      	add	sp, #12
 800c6ea:	4770      	bx	lr
 800c6ec:	20000040 	.word	0x20000040

0800c6f0 <__malloc_lock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__malloc_lock+0x8>)
 800c6f2:	f000 bd77 	b.w	800d1e4 <__retarget_lock_acquire_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	2000104c 	.word	0x2000104c

0800c6fc <__malloc_unlock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_unlock+0x8>)
 800c6fe:	f000 bd72 	b.w	800d1e6 <__retarget_lock_release_recursive>
 800c702:	bf00      	nop
 800c704:	2000104c 	.word	0x2000104c

0800c708 <__sfputc_r>:
 800c708:	6893      	ldr	r3, [r2, #8]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	b410      	push	{r4}
 800c710:	6093      	str	r3, [r2, #8]
 800c712:	da08      	bge.n	800c726 <__sfputc_r+0x1e>
 800c714:	6994      	ldr	r4, [r2, #24]
 800c716:	42a3      	cmp	r3, r4
 800c718:	db01      	blt.n	800c71e <__sfputc_r+0x16>
 800c71a:	290a      	cmp	r1, #10
 800c71c:	d103      	bne.n	800c726 <__sfputc_r+0x1e>
 800c71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c722:	f000 badf 	b.w	800cce4 <__swbuf_r>
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	1c58      	adds	r0, r3, #1
 800c72a:	6010      	str	r0, [r2, #0]
 800c72c:	7019      	strb	r1, [r3, #0]
 800c72e:	4608      	mov	r0, r1
 800c730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <__sfputs_r>:
 800c736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	4614      	mov	r4, r2
 800c73e:	18d5      	adds	r5, r2, r3
 800c740:	42ac      	cmp	r4, r5
 800c742:	d101      	bne.n	800c748 <__sfputs_r+0x12>
 800c744:	2000      	movs	r0, #0
 800c746:	e007      	b.n	800c758 <__sfputs_r+0x22>
 800c748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74c:	463a      	mov	r2, r7
 800c74e:	4630      	mov	r0, r6
 800c750:	f7ff ffda 	bl	800c708 <__sfputc_r>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d1f3      	bne.n	800c740 <__sfputs_r+0xa>
 800c758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c75c <_vfiprintf_r>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	460d      	mov	r5, r1
 800c762:	b09d      	sub	sp, #116	; 0x74
 800c764:	4614      	mov	r4, r2
 800c766:	4698      	mov	r8, r3
 800c768:	4606      	mov	r6, r0
 800c76a:	b118      	cbz	r0, 800c774 <_vfiprintf_r+0x18>
 800c76c:	6983      	ldr	r3, [r0, #24]
 800c76e:	b90b      	cbnz	r3, 800c774 <_vfiprintf_r+0x18>
 800c770:	f000 fc9a 	bl	800d0a8 <__sinit>
 800c774:	4b89      	ldr	r3, [pc, #548]	; (800c99c <_vfiprintf_r+0x240>)
 800c776:	429d      	cmp	r5, r3
 800c778:	d11b      	bne.n	800c7b2 <_vfiprintf_r+0x56>
 800c77a:	6875      	ldr	r5, [r6, #4]
 800c77c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x32>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x32>
 800c788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78a:	f000 fd2b 	bl	800d1e4 <__retarget_lock_acquire_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	071b      	lsls	r3, r3, #28
 800c792:	d501      	bpl.n	800c798 <_vfiprintf_r+0x3c>
 800c794:	692b      	ldr	r3, [r5, #16]
 800c796:	b9eb      	cbnz	r3, 800c7d4 <_vfiprintf_r+0x78>
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 faf4 	bl	800cd88 <__swsetup_r>
 800c7a0:	b1c0      	cbz	r0, 800c7d4 <_vfiprintf_r+0x78>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a4:	07dc      	lsls	r4, r3, #31
 800c7a6:	d50e      	bpl.n	800c7c6 <_vfiprintf_r+0x6a>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7ac:	b01d      	add	sp, #116	; 0x74
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	4b7b      	ldr	r3, [pc, #492]	; (800c9a0 <_vfiprintf_r+0x244>)
 800c7b4:	429d      	cmp	r5, r3
 800c7b6:	d101      	bne.n	800c7bc <_vfiprintf_r+0x60>
 800c7b8:	68b5      	ldr	r5, [r6, #8]
 800c7ba:	e7df      	b.n	800c77c <_vfiprintf_r+0x20>
 800c7bc:	4b79      	ldr	r3, [pc, #484]	; (800c9a4 <_vfiprintf_r+0x248>)
 800c7be:	429d      	cmp	r5, r3
 800c7c0:	bf08      	it	eq
 800c7c2:	68f5      	ldreq	r5, [r6, #12]
 800c7c4:	e7da      	b.n	800c77c <_vfiprintf_r+0x20>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	0598      	lsls	r0, r3, #22
 800c7ca:	d4ed      	bmi.n	800c7a8 <_vfiprintf_r+0x4c>
 800c7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ce:	f000 fd0a 	bl	800d1e6 <__retarget_lock_release_recursive>
 800c7d2:	e7e9      	b.n	800c7a8 <_vfiprintf_r+0x4c>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d8:	2320      	movs	r3, #32
 800c7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7e2:	2330      	movs	r3, #48	; 0x30
 800c7e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9a8 <_vfiprintf_r+0x24c>
 800c7e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7ec:	f04f 0901 	mov.w	r9, #1
 800c7f0:	4623      	mov	r3, r4
 800c7f2:	469a      	mov	sl, r3
 800c7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7f8:	b10a      	cbz	r2, 800c7fe <_vfiprintf_r+0xa2>
 800c7fa:	2a25      	cmp	r2, #37	; 0x25
 800c7fc:	d1f9      	bne.n	800c7f2 <_vfiprintf_r+0x96>
 800c7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800c802:	d00b      	beq.n	800c81c <_vfiprintf_r+0xc0>
 800c804:	465b      	mov	r3, fp
 800c806:	4622      	mov	r2, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	4630      	mov	r0, r6
 800c80c:	f7ff ff93 	bl	800c736 <__sfputs_r>
 800c810:	3001      	adds	r0, #1
 800c812:	f000 80aa 	beq.w	800c96a <_vfiprintf_r+0x20e>
 800c816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c818:	445a      	add	r2, fp
 800c81a:	9209      	str	r2, [sp, #36]	; 0x24
 800c81c:	f89a 3000 	ldrb.w	r3, [sl]
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80a2 	beq.w	800c96a <_vfiprintf_r+0x20e>
 800c826:	2300      	movs	r3, #0
 800c828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c830:	f10a 0a01 	add.w	sl, sl, #1
 800c834:	9304      	str	r3, [sp, #16]
 800c836:	9307      	str	r3, [sp, #28]
 800c838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c83c:	931a      	str	r3, [sp, #104]	; 0x68
 800c83e:	4654      	mov	r4, sl
 800c840:	2205      	movs	r2, #5
 800c842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c846:	4858      	ldr	r0, [pc, #352]	; (800c9a8 <_vfiprintf_r+0x24c>)
 800c848:	f7f3 fce2 	bl	8000210 <memchr>
 800c84c:	9a04      	ldr	r2, [sp, #16]
 800c84e:	b9d8      	cbnz	r0, 800c888 <_vfiprintf_r+0x12c>
 800c850:	06d1      	lsls	r1, r2, #27
 800c852:	bf44      	itt	mi
 800c854:	2320      	movmi	r3, #32
 800c856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85a:	0713      	lsls	r3, r2, #28
 800c85c:	bf44      	itt	mi
 800c85e:	232b      	movmi	r3, #43	; 0x2b
 800c860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c864:	f89a 3000 	ldrb.w	r3, [sl]
 800c868:	2b2a      	cmp	r3, #42	; 0x2a
 800c86a:	d015      	beq.n	800c898 <_vfiprintf_r+0x13c>
 800c86c:	9a07      	ldr	r2, [sp, #28]
 800c86e:	4654      	mov	r4, sl
 800c870:	2000      	movs	r0, #0
 800c872:	f04f 0c0a 	mov.w	ip, #10
 800c876:	4621      	mov	r1, r4
 800c878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c87c:	3b30      	subs	r3, #48	; 0x30
 800c87e:	2b09      	cmp	r3, #9
 800c880:	d94e      	bls.n	800c920 <_vfiprintf_r+0x1c4>
 800c882:	b1b0      	cbz	r0, 800c8b2 <_vfiprintf_r+0x156>
 800c884:	9207      	str	r2, [sp, #28]
 800c886:	e014      	b.n	800c8b2 <_vfiprintf_r+0x156>
 800c888:	eba0 0308 	sub.w	r3, r0, r8
 800c88c:	fa09 f303 	lsl.w	r3, r9, r3
 800c890:	4313      	orrs	r3, r2
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	46a2      	mov	sl, r4
 800c896:	e7d2      	b.n	800c83e <_vfiprintf_r+0xe2>
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	1d19      	adds	r1, r3, #4
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	9103      	str	r1, [sp, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	bfbb      	ittet	lt
 800c8a4:	425b      	neglt	r3, r3
 800c8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800c8aa:	9307      	strge	r3, [sp, #28]
 800c8ac:	9307      	strlt	r3, [sp, #28]
 800c8ae:	bfb8      	it	lt
 800c8b0:	9204      	strlt	r2, [sp, #16]
 800c8b2:	7823      	ldrb	r3, [r4, #0]
 800c8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b6:	d10c      	bne.n	800c8d2 <_vfiprintf_r+0x176>
 800c8b8:	7863      	ldrb	r3, [r4, #1]
 800c8ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c8bc:	d135      	bne.n	800c92a <_vfiprintf_r+0x1ce>
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	1d1a      	adds	r2, r3, #4
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	9203      	str	r2, [sp, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bfb8      	it	lt
 800c8ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8ce:	3402      	adds	r4, #2
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9b8 <_vfiprintf_r+0x25c>
 800c8d6:	7821      	ldrb	r1, [r4, #0]
 800c8d8:	2203      	movs	r2, #3
 800c8da:	4650      	mov	r0, sl
 800c8dc:	f7f3 fc98 	bl	8000210 <memchr>
 800c8e0:	b140      	cbz	r0, 800c8f4 <_vfiprintf_r+0x198>
 800c8e2:	2340      	movs	r3, #64	; 0x40
 800c8e4:	eba0 000a 	sub.w	r0, r0, sl
 800c8e8:	fa03 f000 	lsl.w	r0, r3, r0
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	4303      	orrs	r3, r0
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f8:	482c      	ldr	r0, [pc, #176]	; (800c9ac <_vfiprintf_r+0x250>)
 800c8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8fe:	2206      	movs	r2, #6
 800c900:	f7f3 fc86 	bl	8000210 <memchr>
 800c904:	2800      	cmp	r0, #0
 800c906:	d03f      	beq.n	800c988 <_vfiprintf_r+0x22c>
 800c908:	4b29      	ldr	r3, [pc, #164]	; (800c9b0 <_vfiprintf_r+0x254>)
 800c90a:	bb1b      	cbnz	r3, 800c954 <_vfiprintf_r+0x1f8>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	3307      	adds	r3, #7
 800c910:	f023 0307 	bic.w	r3, r3, #7
 800c914:	3308      	adds	r3, #8
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91a:	443b      	add	r3, r7
 800c91c:	9309      	str	r3, [sp, #36]	; 0x24
 800c91e:	e767      	b.n	800c7f0 <_vfiprintf_r+0x94>
 800c920:	fb0c 3202 	mla	r2, ip, r2, r3
 800c924:	460c      	mov	r4, r1
 800c926:	2001      	movs	r0, #1
 800c928:	e7a5      	b.n	800c876 <_vfiprintf_r+0x11a>
 800c92a:	2300      	movs	r3, #0
 800c92c:	3401      	adds	r4, #1
 800c92e:	9305      	str	r3, [sp, #20]
 800c930:	4619      	mov	r1, r3
 800c932:	f04f 0c0a 	mov.w	ip, #10
 800c936:	4620      	mov	r0, r4
 800c938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c93c:	3a30      	subs	r2, #48	; 0x30
 800c93e:	2a09      	cmp	r2, #9
 800c940:	d903      	bls.n	800c94a <_vfiprintf_r+0x1ee>
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0c5      	beq.n	800c8d2 <_vfiprintf_r+0x176>
 800c946:	9105      	str	r1, [sp, #20]
 800c948:	e7c3      	b.n	800c8d2 <_vfiprintf_r+0x176>
 800c94a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c94e:	4604      	mov	r4, r0
 800c950:	2301      	movs	r3, #1
 800c952:	e7f0      	b.n	800c936 <_vfiprintf_r+0x1da>
 800c954:	ab03      	add	r3, sp, #12
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	462a      	mov	r2, r5
 800c95a:	4b16      	ldr	r3, [pc, #88]	; (800c9b4 <_vfiprintf_r+0x258>)
 800c95c:	a904      	add	r1, sp, #16
 800c95e:	4630      	mov	r0, r6
 800c960:	f3af 8000 	nop.w
 800c964:	4607      	mov	r7, r0
 800c966:	1c78      	adds	r0, r7, #1
 800c968:	d1d6      	bne.n	800c918 <_vfiprintf_r+0x1bc>
 800c96a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c96c:	07d9      	lsls	r1, r3, #31
 800c96e:	d405      	bmi.n	800c97c <_vfiprintf_r+0x220>
 800c970:	89ab      	ldrh	r3, [r5, #12]
 800c972:	059a      	lsls	r2, r3, #22
 800c974:	d402      	bmi.n	800c97c <_vfiprintf_r+0x220>
 800c976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c978:	f000 fc35 	bl	800d1e6 <__retarget_lock_release_recursive>
 800c97c:	89ab      	ldrh	r3, [r5, #12]
 800c97e:	065b      	lsls	r3, r3, #25
 800c980:	f53f af12 	bmi.w	800c7a8 <_vfiprintf_r+0x4c>
 800c984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c986:	e711      	b.n	800c7ac <_vfiprintf_r+0x50>
 800c988:	ab03      	add	r3, sp, #12
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	462a      	mov	r2, r5
 800c98e:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <_vfiprintf_r+0x258>)
 800c990:	a904      	add	r1, sp, #16
 800c992:	4630      	mov	r0, r6
 800c994:	f000 f880 	bl	800ca98 <_printf_i>
 800c998:	e7e4      	b.n	800c964 <_vfiprintf_r+0x208>
 800c99a:	bf00      	nop
 800c99c:	0809d22c 	.word	0x0809d22c
 800c9a0:	0809d24c 	.word	0x0809d24c
 800c9a4:	0809d20c 	.word	0x0809d20c
 800c9a8:	0809d1d6 	.word	0x0809d1d6
 800c9ac:	0809d1e0 	.word	0x0809d1e0
 800c9b0:	00000000 	.word	0x00000000
 800c9b4:	0800c737 	.word	0x0800c737
 800c9b8:	0809d1dc 	.word	0x0809d1dc

0800c9bc <_printf_common>:
 800c9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9c0:	4616      	mov	r6, r2
 800c9c2:	4699      	mov	r9, r3
 800c9c4:	688a      	ldr	r2, [r1, #8]
 800c9c6:	690b      	ldr	r3, [r1, #16]
 800c9c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bfb8      	it	lt
 800c9d0:	4613      	movlt	r3, r2
 800c9d2:	6033      	str	r3, [r6, #0]
 800c9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	b10a      	cbz	r2, 800c9e2 <_printf_common+0x26>
 800c9de:	3301      	adds	r3, #1
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	0699      	lsls	r1, r3, #26
 800c9e6:	bf42      	ittt	mi
 800c9e8:	6833      	ldrmi	r3, [r6, #0]
 800c9ea:	3302      	addmi	r3, #2
 800c9ec:	6033      	strmi	r3, [r6, #0]
 800c9ee:	6825      	ldr	r5, [r4, #0]
 800c9f0:	f015 0506 	ands.w	r5, r5, #6
 800c9f4:	d106      	bne.n	800ca04 <_printf_common+0x48>
 800c9f6:	f104 0a19 	add.w	sl, r4, #25
 800c9fa:	68e3      	ldr	r3, [r4, #12]
 800c9fc:	6832      	ldr	r2, [r6, #0]
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	42ab      	cmp	r3, r5
 800ca02:	dc26      	bgt.n	800ca52 <_printf_common+0x96>
 800ca04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca08:	1e13      	subs	r3, r2, #0
 800ca0a:	6822      	ldr	r2, [r4, #0]
 800ca0c:	bf18      	it	ne
 800ca0e:	2301      	movne	r3, #1
 800ca10:	0692      	lsls	r2, r2, #26
 800ca12:	d42b      	bmi.n	800ca6c <_printf_common+0xb0>
 800ca14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca18:	4649      	mov	r1, r9
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	47c0      	blx	r8
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d01e      	beq.n	800ca60 <_printf_common+0xa4>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	68e5      	ldr	r5, [r4, #12]
 800ca26:	6832      	ldr	r2, [r6, #0]
 800ca28:	f003 0306 	and.w	r3, r3, #6
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	bf08      	it	eq
 800ca30:	1aad      	subeq	r5, r5, r2
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	bf0c      	ite	eq
 800ca38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca3c:	2500      	movne	r5, #0
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	bfc4      	itt	gt
 800ca42:	1a9b      	subgt	r3, r3, r2
 800ca44:	18ed      	addgt	r5, r5, r3
 800ca46:	2600      	movs	r6, #0
 800ca48:	341a      	adds	r4, #26
 800ca4a:	42b5      	cmp	r5, r6
 800ca4c:	d11a      	bne.n	800ca84 <_printf_common+0xc8>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	e008      	b.n	800ca64 <_printf_common+0xa8>
 800ca52:	2301      	movs	r3, #1
 800ca54:	4652      	mov	r2, sl
 800ca56:	4649      	mov	r1, r9
 800ca58:	4638      	mov	r0, r7
 800ca5a:	47c0      	blx	r8
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d103      	bne.n	800ca68 <_printf_common+0xac>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca68:	3501      	adds	r5, #1
 800ca6a:	e7c6      	b.n	800c9fa <_printf_common+0x3e>
 800ca6c:	18e1      	adds	r1, r4, r3
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	2030      	movs	r0, #48	; 0x30
 800ca72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca76:	4422      	add	r2, r4
 800ca78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca80:	3302      	adds	r3, #2
 800ca82:	e7c7      	b.n	800ca14 <_printf_common+0x58>
 800ca84:	2301      	movs	r3, #1
 800ca86:	4622      	mov	r2, r4
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	47c0      	blx	r8
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d0e6      	beq.n	800ca60 <_printf_common+0xa4>
 800ca92:	3601      	adds	r6, #1
 800ca94:	e7d9      	b.n	800ca4a <_printf_common+0x8e>
	...

0800ca98 <_printf_i>:
 800ca98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	4691      	mov	r9, r2
 800caa0:	7e27      	ldrb	r7, [r4, #24]
 800caa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800caa4:	2f78      	cmp	r7, #120	; 0x78
 800caa6:	4680      	mov	r8, r0
 800caa8:	469a      	mov	sl, r3
 800caaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caae:	d807      	bhi.n	800cac0 <_printf_i+0x28>
 800cab0:	2f62      	cmp	r7, #98	; 0x62
 800cab2:	d80a      	bhi.n	800caca <_printf_i+0x32>
 800cab4:	2f00      	cmp	r7, #0
 800cab6:	f000 80d8 	beq.w	800cc6a <_printf_i+0x1d2>
 800caba:	2f58      	cmp	r7, #88	; 0x58
 800cabc:	f000 80a3 	beq.w	800cc06 <_printf_i+0x16e>
 800cac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac8:	e03a      	b.n	800cb40 <_printf_i+0xa8>
 800caca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cace:	2b15      	cmp	r3, #21
 800cad0:	d8f6      	bhi.n	800cac0 <_printf_i+0x28>
 800cad2:	a001      	add	r0, pc, #4	; (adr r0, 800cad8 <_printf_i+0x40>)
 800cad4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cad8:	0800cb31 	.word	0x0800cb31
 800cadc:	0800cb45 	.word	0x0800cb45
 800cae0:	0800cac1 	.word	0x0800cac1
 800cae4:	0800cac1 	.word	0x0800cac1
 800cae8:	0800cac1 	.word	0x0800cac1
 800caec:	0800cac1 	.word	0x0800cac1
 800caf0:	0800cb45 	.word	0x0800cb45
 800caf4:	0800cac1 	.word	0x0800cac1
 800caf8:	0800cac1 	.word	0x0800cac1
 800cafc:	0800cac1 	.word	0x0800cac1
 800cb00:	0800cac1 	.word	0x0800cac1
 800cb04:	0800cc51 	.word	0x0800cc51
 800cb08:	0800cb75 	.word	0x0800cb75
 800cb0c:	0800cc33 	.word	0x0800cc33
 800cb10:	0800cac1 	.word	0x0800cac1
 800cb14:	0800cac1 	.word	0x0800cac1
 800cb18:	0800cc73 	.word	0x0800cc73
 800cb1c:	0800cac1 	.word	0x0800cac1
 800cb20:	0800cb75 	.word	0x0800cb75
 800cb24:	0800cac1 	.word	0x0800cac1
 800cb28:	0800cac1 	.word	0x0800cac1
 800cb2c:	0800cc3b 	.word	0x0800cc3b
 800cb30:	680b      	ldr	r3, [r1, #0]
 800cb32:	1d1a      	adds	r2, r3, #4
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	600a      	str	r2, [r1, #0]
 800cb38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb40:	2301      	movs	r3, #1
 800cb42:	e0a3      	b.n	800cc8c <_printf_i+0x1f4>
 800cb44:	6825      	ldr	r5, [r4, #0]
 800cb46:	6808      	ldr	r0, [r1, #0]
 800cb48:	062e      	lsls	r6, r5, #24
 800cb4a:	f100 0304 	add.w	r3, r0, #4
 800cb4e:	d50a      	bpl.n	800cb66 <_printf_i+0xce>
 800cb50:	6805      	ldr	r5, [r0, #0]
 800cb52:	600b      	str	r3, [r1, #0]
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	da03      	bge.n	800cb60 <_printf_i+0xc8>
 800cb58:	232d      	movs	r3, #45	; 0x2d
 800cb5a:	426d      	negs	r5, r5
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb60:	485e      	ldr	r0, [pc, #376]	; (800ccdc <_printf_i+0x244>)
 800cb62:	230a      	movs	r3, #10
 800cb64:	e019      	b.n	800cb9a <_printf_i+0x102>
 800cb66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cb6a:	6805      	ldr	r5, [r0, #0]
 800cb6c:	600b      	str	r3, [r1, #0]
 800cb6e:	bf18      	it	ne
 800cb70:	b22d      	sxthne	r5, r5
 800cb72:	e7ef      	b.n	800cb54 <_printf_i+0xbc>
 800cb74:	680b      	ldr	r3, [r1, #0]
 800cb76:	6825      	ldr	r5, [r4, #0]
 800cb78:	1d18      	adds	r0, r3, #4
 800cb7a:	6008      	str	r0, [r1, #0]
 800cb7c:	0628      	lsls	r0, r5, #24
 800cb7e:	d501      	bpl.n	800cb84 <_printf_i+0xec>
 800cb80:	681d      	ldr	r5, [r3, #0]
 800cb82:	e002      	b.n	800cb8a <_printf_i+0xf2>
 800cb84:	0669      	lsls	r1, r5, #25
 800cb86:	d5fb      	bpl.n	800cb80 <_printf_i+0xe8>
 800cb88:	881d      	ldrh	r5, [r3, #0]
 800cb8a:	4854      	ldr	r0, [pc, #336]	; (800ccdc <_printf_i+0x244>)
 800cb8c:	2f6f      	cmp	r7, #111	; 0x6f
 800cb8e:	bf0c      	ite	eq
 800cb90:	2308      	moveq	r3, #8
 800cb92:	230a      	movne	r3, #10
 800cb94:	2100      	movs	r1, #0
 800cb96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb9a:	6866      	ldr	r6, [r4, #4]
 800cb9c:	60a6      	str	r6, [r4, #8]
 800cb9e:	2e00      	cmp	r6, #0
 800cba0:	bfa2      	ittt	ge
 800cba2:	6821      	ldrge	r1, [r4, #0]
 800cba4:	f021 0104 	bicge.w	r1, r1, #4
 800cba8:	6021      	strge	r1, [r4, #0]
 800cbaa:	b90d      	cbnz	r5, 800cbb0 <_printf_i+0x118>
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	d04d      	beq.n	800cc4c <_printf_i+0x1b4>
 800cbb0:	4616      	mov	r6, r2
 800cbb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbb6:	fb03 5711 	mls	r7, r3, r1, r5
 800cbba:	5dc7      	ldrb	r7, [r0, r7]
 800cbbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbc0:	462f      	mov	r7, r5
 800cbc2:	42bb      	cmp	r3, r7
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	d9f4      	bls.n	800cbb2 <_printf_i+0x11a>
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d10b      	bne.n	800cbe4 <_printf_i+0x14c>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	07df      	lsls	r7, r3, #31
 800cbd0:	d508      	bpl.n	800cbe4 <_printf_i+0x14c>
 800cbd2:	6923      	ldr	r3, [r4, #16]
 800cbd4:	6861      	ldr	r1, [r4, #4]
 800cbd6:	4299      	cmp	r1, r3
 800cbd8:	bfde      	ittt	le
 800cbda:	2330      	movle	r3, #48	; 0x30
 800cbdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbe0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800cbe4:	1b92      	subs	r2, r2, r6
 800cbe6:	6122      	str	r2, [r4, #16]
 800cbe8:	f8cd a000 	str.w	sl, [sp]
 800cbec:	464b      	mov	r3, r9
 800cbee:	aa03      	add	r2, sp, #12
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	f7ff fee2 	bl	800c9bc <_printf_common>
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d14c      	bne.n	800cc96 <_printf_i+0x1fe>
 800cbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc00:	b004      	add	sp, #16
 800cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc06:	4835      	ldr	r0, [pc, #212]	; (800ccdc <_printf_i+0x244>)
 800cc08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	680e      	ldr	r6, [r1, #0]
 800cc10:	061f      	lsls	r7, r3, #24
 800cc12:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc16:	600e      	str	r6, [r1, #0]
 800cc18:	d514      	bpl.n	800cc44 <_printf_i+0x1ac>
 800cc1a:	07d9      	lsls	r1, r3, #31
 800cc1c:	bf44      	itt	mi
 800cc1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cc22:	6023      	strmi	r3, [r4, #0]
 800cc24:	b91d      	cbnz	r5, 800cc2e <_printf_i+0x196>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	f023 0320 	bic.w	r3, r3, #32
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	2310      	movs	r3, #16
 800cc30:	e7b0      	b.n	800cb94 <_printf_i+0xfc>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	f043 0320 	orr.w	r3, r3, #32
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	2378      	movs	r3, #120	; 0x78
 800cc3c:	4828      	ldr	r0, [pc, #160]	; (800cce0 <_printf_i+0x248>)
 800cc3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc42:	e7e3      	b.n	800cc0c <_printf_i+0x174>
 800cc44:	065e      	lsls	r6, r3, #25
 800cc46:	bf48      	it	mi
 800cc48:	b2ad      	uxthmi	r5, r5
 800cc4a:	e7e6      	b.n	800cc1a <_printf_i+0x182>
 800cc4c:	4616      	mov	r6, r2
 800cc4e:	e7bb      	b.n	800cbc8 <_printf_i+0x130>
 800cc50:	680b      	ldr	r3, [r1, #0]
 800cc52:	6826      	ldr	r6, [r4, #0]
 800cc54:	6960      	ldr	r0, [r4, #20]
 800cc56:	1d1d      	adds	r5, r3, #4
 800cc58:	600d      	str	r5, [r1, #0]
 800cc5a:	0635      	lsls	r5, r6, #24
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	d501      	bpl.n	800cc64 <_printf_i+0x1cc>
 800cc60:	6018      	str	r0, [r3, #0]
 800cc62:	e002      	b.n	800cc6a <_printf_i+0x1d2>
 800cc64:	0671      	lsls	r1, r6, #25
 800cc66:	d5fb      	bpl.n	800cc60 <_printf_i+0x1c8>
 800cc68:	8018      	strh	r0, [r3, #0]
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6123      	str	r3, [r4, #16]
 800cc6e:	4616      	mov	r6, r2
 800cc70:	e7ba      	b.n	800cbe8 <_printf_i+0x150>
 800cc72:	680b      	ldr	r3, [r1, #0]
 800cc74:	1d1a      	adds	r2, r3, #4
 800cc76:	600a      	str	r2, [r1, #0]
 800cc78:	681e      	ldr	r6, [r3, #0]
 800cc7a:	6862      	ldr	r2, [r4, #4]
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7f3 fac6 	bl	8000210 <memchr>
 800cc84:	b108      	cbz	r0, 800cc8a <_printf_i+0x1f2>
 800cc86:	1b80      	subs	r0, r0, r6
 800cc88:	6060      	str	r0, [r4, #4]
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	6123      	str	r3, [r4, #16]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc94:	e7a8      	b.n	800cbe8 <_printf_i+0x150>
 800cc96:	6923      	ldr	r3, [r4, #16]
 800cc98:	4632      	mov	r2, r6
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	47d0      	blx	sl
 800cca0:	3001      	adds	r0, #1
 800cca2:	d0ab      	beq.n	800cbfc <_printf_i+0x164>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	079b      	lsls	r3, r3, #30
 800cca8:	d413      	bmi.n	800ccd2 <_printf_i+0x23a>
 800ccaa:	68e0      	ldr	r0, [r4, #12]
 800ccac:	9b03      	ldr	r3, [sp, #12]
 800ccae:	4298      	cmp	r0, r3
 800ccb0:	bfb8      	it	lt
 800ccb2:	4618      	movlt	r0, r3
 800ccb4:	e7a4      	b.n	800cc00 <_printf_i+0x168>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4632      	mov	r2, r6
 800ccba:	4649      	mov	r1, r9
 800ccbc:	4640      	mov	r0, r8
 800ccbe:	47d0      	blx	sl
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	d09b      	beq.n	800cbfc <_printf_i+0x164>
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	68e3      	ldr	r3, [r4, #12]
 800ccc8:	9903      	ldr	r1, [sp, #12]
 800ccca:	1a5b      	subs	r3, r3, r1
 800cccc:	42ab      	cmp	r3, r5
 800ccce:	dcf2      	bgt.n	800ccb6 <_printf_i+0x21e>
 800ccd0:	e7eb      	b.n	800ccaa <_printf_i+0x212>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	f104 0619 	add.w	r6, r4, #25
 800ccd8:	e7f5      	b.n	800ccc6 <_printf_i+0x22e>
 800ccda:	bf00      	nop
 800ccdc:	0809d1e7 	.word	0x0809d1e7
 800cce0:	0809d1f8 	.word	0x0809d1f8

0800cce4 <__swbuf_r>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	460e      	mov	r6, r1
 800cce8:	4614      	mov	r4, r2
 800ccea:	4605      	mov	r5, r0
 800ccec:	b118      	cbz	r0, 800ccf6 <__swbuf_r+0x12>
 800ccee:	6983      	ldr	r3, [r0, #24]
 800ccf0:	b90b      	cbnz	r3, 800ccf6 <__swbuf_r+0x12>
 800ccf2:	f000 f9d9 	bl	800d0a8 <__sinit>
 800ccf6:	4b21      	ldr	r3, [pc, #132]	; (800cd7c <__swbuf_r+0x98>)
 800ccf8:	429c      	cmp	r4, r3
 800ccfa:	d12b      	bne.n	800cd54 <__swbuf_r+0x70>
 800ccfc:	686c      	ldr	r4, [r5, #4]
 800ccfe:	69a3      	ldr	r3, [r4, #24]
 800cd00:	60a3      	str	r3, [r4, #8]
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	071a      	lsls	r2, r3, #28
 800cd06:	d52f      	bpl.n	800cd68 <__swbuf_r+0x84>
 800cd08:	6923      	ldr	r3, [r4, #16]
 800cd0a:	b36b      	cbz	r3, 800cd68 <__swbuf_r+0x84>
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	6820      	ldr	r0, [r4, #0]
 800cd10:	1ac0      	subs	r0, r0, r3
 800cd12:	6963      	ldr	r3, [r4, #20]
 800cd14:	b2f6      	uxtb	r6, r6
 800cd16:	4283      	cmp	r3, r0
 800cd18:	4637      	mov	r7, r6
 800cd1a:	dc04      	bgt.n	800cd26 <__swbuf_r+0x42>
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 f92e 	bl	800cf80 <_fflush_r>
 800cd24:	bb30      	cbnz	r0, 800cd74 <__swbuf_r+0x90>
 800cd26:	68a3      	ldr	r3, [r4, #8]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	60a3      	str	r3, [r4, #8]
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	6022      	str	r2, [r4, #0]
 800cd32:	701e      	strb	r6, [r3, #0]
 800cd34:	6963      	ldr	r3, [r4, #20]
 800cd36:	3001      	adds	r0, #1
 800cd38:	4283      	cmp	r3, r0
 800cd3a:	d004      	beq.n	800cd46 <__swbuf_r+0x62>
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	07db      	lsls	r3, r3, #31
 800cd40:	d506      	bpl.n	800cd50 <__swbuf_r+0x6c>
 800cd42:	2e0a      	cmp	r6, #10
 800cd44:	d104      	bne.n	800cd50 <__swbuf_r+0x6c>
 800cd46:	4621      	mov	r1, r4
 800cd48:	4628      	mov	r0, r5
 800cd4a:	f000 f919 	bl	800cf80 <_fflush_r>
 800cd4e:	b988      	cbnz	r0, 800cd74 <__swbuf_r+0x90>
 800cd50:	4638      	mov	r0, r7
 800cd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd54:	4b0a      	ldr	r3, [pc, #40]	; (800cd80 <__swbuf_r+0x9c>)
 800cd56:	429c      	cmp	r4, r3
 800cd58:	d101      	bne.n	800cd5e <__swbuf_r+0x7a>
 800cd5a:	68ac      	ldr	r4, [r5, #8]
 800cd5c:	e7cf      	b.n	800ccfe <__swbuf_r+0x1a>
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <__swbuf_r+0xa0>)
 800cd60:	429c      	cmp	r4, r3
 800cd62:	bf08      	it	eq
 800cd64:	68ec      	ldreq	r4, [r5, #12]
 800cd66:	e7ca      	b.n	800ccfe <__swbuf_r+0x1a>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f000 f80c 	bl	800cd88 <__swsetup_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d0cb      	beq.n	800cd0c <__swbuf_r+0x28>
 800cd74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cd78:	e7ea      	b.n	800cd50 <__swbuf_r+0x6c>
 800cd7a:	bf00      	nop
 800cd7c:	0809d22c 	.word	0x0809d22c
 800cd80:	0809d24c 	.word	0x0809d24c
 800cd84:	0809d20c 	.word	0x0809d20c

0800cd88 <__swsetup_r>:
 800cd88:	4b32      	ldr	r3, [pc, #200]	; (800ce54 <__swsetup_r+0xcc>)
 800cd8a:	b570      	push	{r4, r5, r6, lr}
 800cd8c:	681d      	ldr	r5, [r3, #0]
 800cd8e:	4606      	mov	r6, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	b125      	cbz	r5, 800cd9e <__swsetup_r+0x16>
 800cd94:	69ab      	ldr	r3, [r5, #24]
 800cd96:	b913      	cbnz	r3, 800cd9e <__swsetup_r+0x16>
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f000 f985 	bl	800d0a8 <__sinit>
 800cd9e:	4b2e      	ldr	r3, [pc, #184]	; (800ce58 <__swsetup_r+0xd0>)
 800cda0:	429c      	cmp	r4, r3
 800cda2:	d10f      	bne.n	800cdc4 <__swsetup_r+0x3c>
 800cda4:	686c      	ldr	r4, [r5, #4]
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdac:	0719      	lsls	r1, r3, #28
 800cdae:	d42c      	bmi.n	800ce0a <__swsetup_r+0x82>
 800cdb0:	06dd      	lsls	r5, r3, #27
 800cdb2:	d411      	bmi.n	800cdd8 <__swsetup_r+0x50>
 800cdb4:	2309      	movs	r3, #9
 800cdb6:	6033      	str	r3, [r6, #0]
 800cdb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdbc:	81a3      	strh	r3, [r4, #12]
 800cdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdc2:	e03e      	b.n	800ce42 <__swsetup_r+0xba>
 800cdc4:	4b25      	ldr	r3, [pc, #148]	; (800ce5c <__swsetup_r+0xd4>)
 800cdc6:	429c      	cmp	r4, r3
 800cdc8:	d101      	bne.n	800cdce <__swsetup_r+0x46>
 800cdca:	68ac      	ldr	r4, [r5, #8]
 800cdcc:	e7eb      	b.n	800cda6 <__swsetup_r+0x1e>
 800cdce:	4b24      	ldr	r3, [pc, #144]	; (800ce60 <__swsetup_r+0xd8>)
 800cdd0:	429c      	cmp	r4, r3
 800cdd2:	bf08      	it	eq
 800cdd4:	68ec      	ldreq	r4, [r5, #12]
 800cdd6:	e7e6      	b.n	800cda6 <__swsetup_r+0x1e>
 800cdd8:	0758      	lsls	r0, r3, #29
 800cdda:	d512      	bpl.n	800ce02 <__swsetup_r+0x7a>
 800cddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdde:	b141      	cbz	r1, 800cdf2 <__swsetup_r+0x6a>
 800cde0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde4:	4299      	cmp	r1, r3
 800cde6:	d002      	beq.n	800cdee <__swsetup_r+0x66>
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7ff fb29 	bl	800c440 <_free_r>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6363      	str	r3, [r4, #52]	; 0x34
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdf8:	81a3      	strh	r3, [r4, #12]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	6063      	str	r3, [r4, #4]
 800cdfe:	6923      	ldr	r3, [r4, #16]
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	89a3      	ldrh	r3, [r4, #12]
 800ce04:	f043 0308 	orr.w	r3, r3, #8
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	6923      	ldr	r3, [r4, #16]
 800ce0c:	b94b      	cbnz	r3, 800ce22 <__swsetup_r+0x9a>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce18:	d003      	beq.n	800ce22 <__swsetup_r+0x9a>
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 fa07 	bl	800d230 <__smakebuf_r>
 800ce22:	89a0      	ldrh	r0, [r4, #12]
 800ce24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce28:	f010 0301 	ands.w	r3, r0, #1
 800ce2c:	d00a      	beq.n	800ce44 <__swsetup_r+0xbc>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60a3      	str	r3, [r4, #8]
 800ce32:	6963      	ldr	r3, [r4, #20]
 800ce34:	425b      	negs	r3, r3
 800ce36:	61a3      	str	r3, [r4, #24]
 800ce38:	6923      	ldr	r3, [r4, #16]
 800ce3a:	b943      	cbnz	r3, 800ce4e <__swsetup_r+0xc6>
 800ce3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce40:	d1ba      	bne.n	800cdb8 <__swsetup_r+0x30>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	0781      	lsls	r1, r0, #30
 800ce46:	bf58      	it	pl
 800ce48:	6963      	ldrpl	r3, [r4, #20]
 800ce4a:	60a3      	str	r3, [r4, #8]
 800ce4c:	e7f4      	b.n	800ce38 <__swsetup_r+0xb0>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	e7f7      	b.n	800ce42 <__swsetup_r+0xba>
 800ce52:	bf00      	nop
 800ce54:	20000040 	.word	0x20000040
 800ce58:	0809d22c 	.word	0x0809d22c
 800ce5c:	0809d24c 	.word	0x0809d24c
 800ce60:	0809d20c 	.word	0x0809d20c

0800ce64 <abort>:
 800ce64:	b508      	push	{r3, lr}
 800ce66:	2006      	movs	r0, #6
 800ce68:	f000 fa4a 	bl	800d300 <raise>
 800ce6c:	2001      	movs	r0, #1
 800ce6e:	f7f9 f8ab 	bl	8005fc8 <_exit>
	...

0800ce74 <__sflush_r>:
 800ce74:	898a      	ldrh	r2, [r1, #12]
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	0710      	lsls	r0, r2, #28
 800ce7e:	460c      	mov	r4, r1
 800ce80:	d458      	bmi.n	800cf34 <__sflush_r+0xc0>
 800ce82:	684b      	ldr	r3, [r1, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dc05      	bgt.n	800ce94 <__sflush_r+0x20>
 800ce88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	dc02      	bgt.n	800ce94 <__sflush_r+0x20>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce96:	2e00      	cmp	r6, #0
 800ce98:	d0f9      	beq.n	800ce8e <__sflush_r+0x1a>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cea0:	682f      	ldr	r7, [r5, #0]
 800cea2:	602b      	str	r3, [r5, #0]
 800cea4:	d032      	beq.n	800cf0c <__sflush_r+0x98>
 800cea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	075a      	lsls	r2, r3, #29
 800ceac:	d505      	bpl.n	800ceba <__sflush_r+0x46>
 800ceae:	6863      	ldr	r3, [r4, #4]
 800ceb0:	1ac0      	subs	r0, r0, r3
 800ceb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceb4:	b10b      	cbz	r3, 800ceba <__sflush_r+0x46>
 800ceb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ceb8:	1ac0      	subs	r0, r0, r3
 800ceba:	2300      	movs	r3, #0
 800cebc:	4602      	mov	r2, r0
 800cebe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	4628      	mov	r0, r5
 800cec4:	47b0      	blx	r6
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	d106      	bne.n	800ceda <__sflush_r+0x66>
 800cecc:	6829      	ldr	r1, [r5, #0]
 800cece:	291d      	cmp	r1, #29
 800ced0:	d82c      	bhi.n	800cf2c <__sflush_r+0xb8>
 800ced2:	4a2a      	ldr	r2, [pc, #168]	; (800cf7c <__sflush_r+0x108>)
 800ced4:	40ca      	lsrs	r2, r1
 800ced6:	07d6      	lsls	r6, r2, #31
 800ced8:	d528      	bpl.n	800cf2c <__sflush_r+0xb8>
 800ceda:	2200      	movs	r2, #0
 800cedc:	6062      	str	r2, [r4, #4]
 800cede:	04d9      	lsls	r1, r3, #19
 800cee0:	6922      	ldr	r2, [r4, #16]
 800cee2:	6022      	str	r2, [r4, #0]
 800cee4:	d504      	bpl.n	800cef0 <__sflush_r+0x7c>
 800cee6:	1c42      	adds	r2, r0, #1
 800cee8:	d101      	bne.n	800ceee <__sflush_r+0x7a>
 800ceea:	682b      	ldr	r3, [r5, #0]
 800ceec:	b903      	cbnz	r3, 800cef0 <__sflush_r+0x7c>
 800ceee:	6560      	str	r0, [r4, #84]	; 0x54
 800cef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef2:	602f      	str	r7, [r5, #0]
 800cef4:	2900      	cmp	r1, #0
 800cef6:	d0ca      	beq.n	800ce8e <__sflush_r+0x1a>
 800cef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cefc:	4299      	cmp	r1, r3
 800cefe:	d002      	beq.n	800cf06 <__sflush_r+0x92>
 800cf00:	4628      	mov	r0, r5
 800cf02:	f7ff fa9d 	bl	800c440 <_free_r>
 800cf06:	2000      	movs	r0, #0
 800cf08:	6360      	str	r0, [r4, #52]	; 0x34
 800cf0a:	e7c1      	b.n	800ce90 <__sflush_r+0x1c>
 800cf0c:	6a21      	ldr	r1, [r4, #32]
 800cf0e:	2301      	movs	r3, #1
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b0      	blx	r6
 800cf14:	1c41      	adds	r1, r0, #1
 800cf16:	d1c7      	bne.n	800cea8 <__sflush_r+0x34>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0c4      	beq.n	800cea8 <__sflush_r+0x34>
 800cf1e:	2b1d      	cmp	r3, #29
 800cf20:	d001      	beq.n	800cf26 <__sflush_r+0xb2>
 800cf22:	2b16      	cmp	r3, #22
 800cf24:	d101      	bne.n	800cf2a <__sflush_r+0xb6>
 800cf26:	602f      	str	r7, [r5, #0]
 800cf28:	e7b1      	b.n	800ce8e <__sflush_r+0x1a>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	e7ad      	b.n	800ce90 <__sflush_r+0x1c>
 800cf34:	690f      	ldr	r7, [r1, #16]
 800cf36:	2f00      	cmp	r7, #0
 800cf38:	d0a9      	beq.n	800ce8e <__sflush_r+0x1a>
 800cf3a:	0793      	lsls	r3, r2, #30
 800cf3c:	680e      	ldr	r6, [r1, #0]
 800cf3e:	bf08      	it	eq
 800cf40:	694b      	ldreq	r3, [r1, #20]
 800cf42:	600f      	str	r7, [r1, #0]
 800cf44:	bf18      	it	ne
 800cf46:	2300      	movne	r3, #0
 800cf48:	eba6 0807 	sub.w	r8, r6, r7
 800cf4c:	608b      	str	r3, [r1, #8]
 800cf4e:	f1b8 0f00 	cmp.w	r8, #0
 800cf52:	dd9c      	ble.n	800ce8e <__sflush_r+0x1a>
 800cf54:	6a21      	ldr	r1, [r4, #32]
 800cf56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf58:	4643      	mov	r3, r8
 800cf5a:	463a      	mov	r2, r7
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b0      	blx	r6
 800cf60:	2800      	cmp	r0, #0
 800cf62:	dc06      	bgt.n	800cf72 <__sflush_r+0xfe>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf70:	e78e      	b.n	800ce90 <__sflush_r+0x1c>
 800cf72:	4407      	add	r7, r0
 800cf74:	eba8 0800 	sub.w	r8, r8, r0
 800cf78:	e7e9      	b.n	800cf4e <__sflush_r+0xda>
 800cf7a:	bf00      	nop
 800cf7c:	20400001 	.word	0x20400001

0800cf80 <_fflush_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	690b      	ldr	r3, [r1, #16]
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	b913      	cbnz	r3, 800cf90 <_fflush_r+0x10>
 800cf8a:	2500      	movs	r5, #0
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	b118      	cbz	r0, 800cf9a <_fflush_r+0x1a>
 800cf92:	6983      	ldr	r3, [r0, #24]
 800cf94:	b90b      	cbnz	r3, 800cf9a <_fflush_r+0x1a>
 800cf96:	f000 f887 	bl	800d0a8 <__sinit>
 800cf9a:	4b14      	ldr	r3, [pc, #80]	; (800cfec <_fflush_r+0x6c>)
 800cf9c:	429c      	cmp	r4, r3
 800cf9e:	d11b      	bne.n	800cfd8 <_fflush_r+0x58>
 800cfa0:	686c      	ldr	r4, [r5, #4]
 800cfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0ef      	beq.n	800cf8a <_fflush_r+0xa>
 800cfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfac:	07d0      	lsls	r0, r2, #31
 800cfae:	d404      	bmi.n	800cfba <_fflush_r+0x3a>
 800cfb0:	0599      	lsls	r1, r3, #22
 800cfb2:	d402      	bmi.n	800cfba <_fflush_r+0x3a>
 800cfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfb6:	f000 f915 	bl	800d1e4 <__retarget_lock_acquire_recursive>
 800cfba:	4628      	mov	r0, r5
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	f7ff ff59 	bl	800ce74 <__sflush_r>
 800cfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfc4:	07da      	lsls	r2, r3, #31
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	d4e0      	bmi.n	800cf8c <_fflush_r+0xc>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	059b      	lsls	r3, r3, #22
 800cfce:	d4dd      	bmi.n	800cf8c <_fflush_r+0xc>
 800cfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfd2:	f000 f908 	bl	800d1e6 <__retarget_lock_release_recursive>
 800cfd6:	e7d9      	b.n	800cf8c <_fflush_r+0xc>
 800cfd8:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <_fflush_r+0x70>)
 800cfda:	429c      	cmp	r4, r3
 800cfdc:	d101      	bne.n	800cfe2 <_fflush_r+0x62>
 800cfde:	68ac      	ldr	r4, [r5, #8]
 800cfe0:	e7df      	b.n	800cfa2 <_fflush_r+0x22>
 800cfe2:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <_fflush_r+0x74>)
 800cfe4:	429c      	cmp	r4, r3
 800cfe6:	bf08      	it	eq
 800cfe8:	68ec      	ldreq	r4, [r5, #12]
 800cfea:	e7da      	b.n	800cfa2 <_fflush_r+0x22>
 800cfec:	0809d22c 	.word	0x0809d22c
 800cff0:	0809d24c 	.word	0x0809d24c
 800cff4:	0809d20c 	.word	0x0809d20c

0800cff8 <std>:
 800cff8:	2300      	movs	r3, #0
 800cffa:	b510      	push	{r4, lr}
 800cffc:	4604      	mov	r4, r0
 800cffe:	e9c0 3300 	strd	r3, r3, [r0]
 800d002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d006:	6083      	str	r3, [r0, #8]
 800d008:	8181      	strh	r1, [r0, #12]
 800d00a:	6643      	str	r3, [r0, #100]	; 0x64
 800d00c:	81c2      	strh	r2, [r0, #14]
 800d00e:	6183      	str	r3, [r0, #24]
 800d010:	4619      	mov	r1, r3
 800d012:	2208      	movs	r2, #8
 800d014:	305c      	adds	r0, #92	; 0x5c
 800d016:	f7ff f9fb 	bl	800c410 <memset>
 800d01a:	4b05      	ldr	r3, [pc, #20]	; (800d030 <std+0x38>)
 800d01c:	6263      	str	r3, [r4, #36]	; 0x24
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <std+0x3c>)
 800d020:	62a3      	str	r3, [r4, #40]	; 0x28
 800d022:	4b05      	ldr	r3, [pc, #20]	; (800d038 <std+0x40>)
 800d024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d026:	4b05      	ldr	r3, [pc, #20]	; (800d03c <std+0x44>)
 800d028:	6224      	str	r4, [r4, #32]
 800d02a:	6323      	str	r3, [r4, #48]	; 0x30
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	bf00      	nop
 800d030:	0800d339 	.word	0x0800d339
 800d034:	0800d35b 	.word	0x0800d35b
 800d038:	0800d393 	.word	0x0800d393
 800d03c:	0800d3b7 	.word	0x0800d3b7

0800d040 <_cleanup_r>:
 800d040:	4901      	ldr	r1, [pc, #4]	; (800d048 <_cleanup_r+0x8>)
 800d042:	f000 b8af 	b.w	800d1a4 <_fwalk_reent>
 800d046:	bf00      	nop
 800d048:	0800cf81 	.word	0x0800cf81

0800d04c <__sfmoreglue>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	1e4a      	subs	r2, r1, #1
 800d050:	2568      	movs	r5, #104	; 0x68
 800d052:	4355      	muls	r5, r2
 800d054:	460e      	mov	r6, r1
 800d056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d05a:	f7ff fa41 	bl	800c4e0 <_malloc_r>
 800d05e:	4604      	mov	r4, r0
 800d060:	b140      	cbz	r0, 800d074 <__sfmoreglue+0x28>
 800d062:	2100      	movs	r1, #0
 800d064:	e9c0 1600 	strd	r1, r6, [r0]
 800d068:	300c      	adds	r0, #12
 800d06a:	60a0      	str	r0, [r4, #8]
 800d06c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d070:	f7ff f9ce 	bl	800c410 <memset>
 800d074:	4620      	mov	r0, r4
 800d076:	bd70      	pop	{r4, r5, r6, pc}

0800d078 <__sfp_lock_acquire>:
 800d078:	4801      	ldr	r0, [pc, #4]	; (800d080 <__sfp_lock_acquire+0x8>)
 800d07a:	f000 b8b3 	b.w	800d1e4 <__retarget_lock_acquire_recursive>
 800d07e:	bf00      	nop
 800d080:	20001050 	.word	0x20001050

0800d084 <__sfp_lock_release>:
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <__sfp_lock_release+0x8>)
 800d086:	f000 b8ae 	b.w	800d1e6 <__retarget_lock_release_recursive>
 800d08a:	bf00      	nop
 800d08c:	20001050 	.word	0x20001050

0800d090 <__sinit_lock_acquire>:
 800d090:	4801      	ldr	r0, [pc, #4]	; (800d098 <__sinit_lock_acquire+0x8>)
 800d092:	f000 b8a7 	b.w	800d1e4 <__retarget_lock_acquire_recursive>
 800d096:	bf00      	nop
 800d098:	2000104b 	.word	0x2000104b

0800d09c <__sinit_lock_release>:
 800d09c:	4801      	ldr	r0, [pc, #4]	; (800d0a4 <__sinit_lock_release+0x8>)
 800d09e:	f000 b8a2 	b.w	800d1e6 <__retarget_lock_release_recursive>
 800d0a2:	bf00      	nop
 800d0a4:	2000104b 	.word	0x2000104b

0800d0a8 <__sinit>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	f7ff fff0 	bl	800d090 <__sinit_lock_acquire>
 800d0b0:	69a3      	ldr	r3, [r4, #24]
 800d0b2:	b11b      	cbz	r3, 800d0bc <__sinit+0x14>
 800d0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b8:	f7ff bff0 	b.w	800d09c <__sinit_lock_release>
 800d0bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0c0:	6523      	str	r3, [r4, #80]	; 0x50
 800d0c2:	4b13      	ldr	r3, [pc, #76]	; (800d110 <__sinit+0x68>)
 800d0c4:	4a13      	ldr	r2, [pc, #76]	; (800d114 <__sinit+0x6c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0ca:	42a3      	cmp	r3, r4
 800d0cc:	bf04      	itt	eq
 800d0ce:	2301      	moveq	r3, #1
 800d0d0:	61a3      	streq	r3, [r4, #24]
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 f820 	bl	800d118 <__sfp>
 800d0d8:	6060      	str	r0, [r4, #4]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 f81c 	bl	800d118 <__sfp>
 800d0e0:	60a0      	str	r0, [r4, #8]
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 f818 	bl	800d118 <__sfp>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	60e0      	str	r0, [r4, #12]
 800d0ec:	2104      	movs	r1, #4
 800d0ee:	6860      	ldr	r0, [r4, #4]
 800d0f0:	f7ff ff82 	bl	800cff8 <std>
 800d0f4:	68a0      	ldr	r0, [r4, #8]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	2109      	movs	r1, #9
 800d0fa:	f7ff ff7d 	bl	800cff8 <std>
 800d0fe:	68e0      	ldr	r0, [r4, #12]
 800d100:	2202      	movs	r2, #2
 800d102:	2112      	movs	r1, #18
 800d104:	f7ff ff78 	bl	800cff8 <std>
 800d108:	2301      	movs	r3, #1
 800d10a:	61a3      	str	r3, [r4, #24]
 800d10c:	e7d2      	b.n	800d0b4 <__sinit+0xc>
 800d10e:	bf00      	nop
 800d110:	0809d120 	.word	0x0809d120
 800d114:	0800d041 	.word	0x0800d041

0800d118 <__sfp>:
 800d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11a:	4607      	mov	r7, r0
 800d11c:	f7ff ffac 	bl	800d078 <__sfp_lock_acquire>
 800d120:	4b1e      	ldr	r3, [pc, #120]	; (800d19c <__sfp+0x84>)
 800d122:	681e      	ldr	r6, [r3, #0]
 800d124:	69b3      	ldr	r3, [r6, #24]
 800d126:	b913      	cbnz	r3, 800d12e <__sfp+0x16>
 800d128:	4630      	mov	r0, r6
 800d12a:	f7ff ffbd 	bl	800d0a8 <__sinit>
 800d12e:	3648      	adds	r6, #72	; 0x48
 800d130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d134:	3b01      	subs	r3, #1
 800d136:	d503      	bpl.n	800d140 <__sfp+0x28>
 800d138:	6833      	ldr	r3, [r6, #0]
 800d13a:	b30b      	cbz	r3, 800d180 <__sfp+0x68>
 800d13c:	6836      	ldr	r6, [r6, #0]
 800d13e:	e7f7      	b.n	800d130 <__sfp+0x18>
 800d140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d144:	b9d5      	cbnz	r5, 800d17c <__sfp+0x64>
 800d146:	4b16      	ldr	r3, [pc, #88]	; (800d1a0 <__sfp+0x88>)
 800d148:	60e3      	str	r3, [r4, #12]
 800d14a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d14e:	6665      	str	r5, [r4, #100]	; 0x64
 800d150:	f000 f847 	bl	800d1e2 <__retarget_lock_init_recursive>
 800d154:	f7ff ff96 	bl	800d084 <__sfp_lock_release>
 800d158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d15c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d160:	6025      	str	r5, [r4, #0]
 800d162:	61a5      	str	r5, [r4, #24]
 800d164:	2208      	movs	r2, #8
 800d166:	4629      	mov	r1, r5
 800d168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d16c:	f7ff f950 	bl	800c410 <memset>
 800d170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d178:	4620      	mov	r0, r4
 800d17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d17c:	3468      	adds	r4, #104	; 0x68
 800d17e:	e7d9      	b.n	800d134 <__sfp+0x1c>
 800d180:	2104      	movs	r1, #4
 800d182:	4638      	mov	r0, r7
 800d184:	f7ff ff62 	bl	800d04c <__sfmoreglue>
 800d188:	4604      	mov	r4, r0
 800d18a:	6030      	str	r0, [r6, #0]
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d1d5      	bne.n	800d13c <__sfp+0x24>
 800d190:	f7ff ff78 	bl	800d084 <__sfp_lock_release>
 800d194:	230c      	movs	r3, #12
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	e7ee      	b.n	800d178 <__sfp+0x60>
 800d19a:	bf00      	nop
 800d19c:	0809d120 	.word	0x0809d120
 800d1a0:	ffff0001 	.word	0xffff0001

0800d1a4 <_fwalk_reent>:
 800d1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	4688      	mov	r8, r1
 800d1ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1b0:	2700      	movs	r7, #0
 800d1b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1b6:	f1b9 0901 	subs.w	r9, r9, #1
 800d1ba:	d505      	bpl.n	800d1c8 <_fwalk_reent+0x24>
 800d1bc:	6824      	ldr	r4, [r4, #0]
 800d1be:	2c00      	cmp	r4, #0
 800d1c0:	d1f7      	bne.n	800d1b2 <_fwalk_reent+0xe>
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c8:	89ab      	ldrh	r3, [r5, #12]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d907      	bls.n	800d1de <_fwalk_reent+0x3a>
 800d1ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	d003      	beq.n	800d1de <_fwalk_reent+0x3a>
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	4630      	mov	r0, r6
 800d1da:	47c0      	blx	r8
 800d1dc:	4307      	orrs	r7, r0
 800d1de:	3568      	adds	r5, #104	; 0x68
 800d1e0:	e7e9      	b.n	800d1b6 <_fwalk_reent+0x12>

0800d1e2 <__retarget_lock_init_recursive>:
 800d1e2:	4770      	bx	lr

0800d1e4 <__retarget_lock_acquire_recursive>:
 800d1e4:	4770      	bx	lr

0800d1e6 <__retarget_lock_release_recursive>:
 800d1e6:	4770      	bx	lr

0800d1e8 <__swhatbuf_r>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	460e      	mov	r6, r1
 800d1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f0:	2900      	cmp	r1, #0
 800d1f2:	b096      	sub	sp, #88	; 0x58
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	461d      	mov	r5, r3
 800d1f8:	da07      	bge.n	800d20a <__swhatbuf_r+0x22>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	89b3      	ldrh	r3, [r6, #12]
 800d200:	061a      	lsls	r2, r3, #24
 800d202:	d410      	bmi.n	800d226 <__swhatbuf_r+0x3e>
 800d204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d208:	e00e      	b.n	800d228 <__swhatbuf_r+0x40>
 800d20a:	466a      	mov	r2, sp
 800d20c:	f000 f8fa 	bl	800d404 <_fstat_r>
 800d210:	2800      	cmp	r0, #0
 800d212:	dbf2      	blt.n	800d1fa <__swhatbuf_r+0x12>
 800d214:	9a01      	ldr	r2, [sp, #4]
 800d216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d21a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d21e:	425a      	negs	r2, r3
 800d220:	415a      	adcs	r2, r3
 800d222:	602a      	str	r2, [r5, #0]
 800d224:	e7ee      	b.n	800d204 <__swhatbuf_r+0x1c>
 800d226:	2340      	movs	r3, #64	; 0x40
 800d228:	2000      	movs	r0, #0
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	b016      	add	sp, #88	; 0x58
 800d22e:	bd70      	pop	{r4, r5, r6, pc}

0800d230 <__smakebuf_r>:
 800d230:	898b      	ldrh	r3, [r1, #12]
 800d232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d234:	079d      	lsls	r5, r3, #30
 800d236:	4606      	mov	r6, r0
 800d238:	460c      	mov	r4, r1
 800d23a:	d507      	bpl.n	800d24c <__smakebuf_r+0x1c>
 800d23c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	2301      	movs	r3, #1
 800d246:	6163      	str	r3, [r4, #20]
 800d248:	b002      	add	sp, #8
 800d24a:	bd70      	pop	{r4, r5, r6, pc}
 800d24c:	ab01      	add	r3, sp, #4
 800d24e:	466a      	mov	r2, sp
 800d250:	f7ff ffca 	bl	800d1e8 <__swhatbuf_r>
 800d254:	9900      	ldr	r1, [sp, #0]
 800d256:	4605      	mov	r5, r0
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff f941 	bl	800c4e0 <_malloc_r>
 800d25e:	b948      	cbnz	r0, 800d274 <__smakebuf_r+0x44>
 800d260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d264:	059a      	lsls	r2, r3, #22
 800d266:	d4ef      	bmi.n	800d248 <__smakebuf_r+0x18>
 800d268:	f023 0303 	bic.w	r3, r3, #3
 800d26c:	f043 0302 	orr.w	r3, r3, #2
 800d270:	81a3      	strh	r3, [r4, #12]
 800d272:	e7e3      	b.n	800d23c <__smakebuf_r+0xc>
 800d274:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <__smakebuf_r+0x7c>)
 800d276:	62b3      	str	r3, [r6, #40]	; 0x28
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	6020      	str	r0, [r4, #0]
 800d27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d280:	81a3      	strh	r3, [r4, #12]
 800d282:	9b00      	ldr	r3, [sp, #0]
 800d284:	6163      	str	r3, [r4, #20]
 800d286:	9b01      	ldr	r3, [sp, #4]
 800d288:	6120      	str	r0, [r4, #16]
 800d28a:	b15b      	cbz	r3, 800d2a4 <__smakebuf_r+0x74>
 800d28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d290:	4630      	mov	r0, r6
 800d292:	f000 f8c9 	bl	800d428 <_isatty_r>
 800d296:	b128      	cbz	r0, 800d2a4 <__smakebuf_r+0x74>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f023 0303 	bic.w	r3, r3, #3
 800d29e:	f043 0301 	orr.w	r3, r3, #1
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	89a0      	ldrh	r0, [r4, #12]
 800d2a6:	4305      	orrs	r5, r0
 800d2a8:	81a5      	strh	r5, [r4, #12]
 800d2aa:	e7cd      	b.n	800d248 <__smakebuf_r+0x18>
 800d2ac:	0800d041 	.word	0x0800d041

0800d2b0 <_raise_r>:
 800d2b0:	291f      	cmp	r1, #31
 800d2b2:	b538      	push	{r3, r4, r5, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	460d      	mov	r5, r1
 800d2b8:	d904      	bls.n	800d2c4 <_raise_r+0x14>
 800d2ba:	2316      	movs	r3, #22
 800d2bc:	6003      	str	r3, [r0, #0]
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2c6:	b112      	cbz	r2, 800d2ce <_raise_r+0x1e>
 800d2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2cc:	b94b      	cbnz	r3, 800d2e2 <_raise_r+0x32>
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f830 	bl	800d334 <_getpid_r>
 800d2d4:	462a      	mov	r2, r5
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	4620      	mov	r0, r4
 800d2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2de:	f000 b817 	b.w	800d310 <_kill_r>
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d00a      	beq.n	800d2fc <_raise_r+0x4c>
 800d2e6:	1c59      	adds	r1, r3, #1
 800d2e8:	d103      	bne.n	800d2f2 <_raise_r+0x42>
 800d2ea:	2316      	movs	r3, #22
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	e7e7      	b.n	800d2c2 <_raise_r+0x12>
 800d2f2:	2400      	movs	r4, #0
 800d2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	4798      	blx	r3
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e7e0      	b.n	800d2c2 <_raise_r+0x12>

0800d300 <raise>:
 800d300:	4b02      	ldr	r3, [pc, #8]	; (800d30c <raise+0xc>)
 800d302:	4601      	mov	r1, r0
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	f7ff bfd3 	b.w	800d2b0 <_raise_r>
 800d30a:	bf00      	nop
 800d30c:	20000040 	.word	0x20000040

0800d310 <_kill_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d07      	ldr	r5, [pc, #28]	; (800d330 <_kill_r+0x20>)
 800d314:	2300      	movs	r3, #0
 800d316:	4604      	mov	r4, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	4611      	mov	r1, r2
 800d31c:	602b      	str	r3, [r5, #0]
 800d31e:	f7f8 fe43 	bl	8005fa8 <_kill>
 800d322:	1c43      	adds	r3, r0, #1
 800d324:	d102      	bne.n	800d32c <_kill_r+0x1c>
 800d326:	682b      	ldr	r3, [r5, #0]
 800d328:	b103      	cbz	r3, 800d32c <_kill_r+0x1c>
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	bf00      	nop
 800d330:	20001044 	.word	0x20001044

0800d334 <_getpid_r>:
 800d334:	f7f8 be30 	b.w	8005f98 <_getpid>

0800d338 <__sread>:
 800d338:	b510      	push	{r4, lr}
 800d33a:	460c      	mov	r4, r1
 800d33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d340:	f000 f894 	bl	800d46c <_read_r>
 800d344:	2800      	cmp	r0, #0
 800d346:	bfab      	itete	ge
 800d348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d34a:	89a3      	ldrhlt	r3, [r4, #12]
 800d34c:	181b      	addge	r3, r3, r0
 800d34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d352:	bfac      	ite	ge
 800d354:	6563      	strge	r3, [r4, #84]	; 0x54
 800d356:	81a3      	strhlt	r3, [r4, #12]
 800d358:	bd10      	pop	{r4, pc}

0800d35a <__swrite>:
 800d35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	461f      	mov	r7, r3
 800d360:	898b      	ldrh	r3, [r1, #12]
 800d362:	05db      	lsls	r3, r3, #23
 800d364:	4605      	mov	r5, r0
 800d366:	460c      	mov	r4, r1
 800d368:	4616      	mov	r6, r2
 800d36a:	d505      	bpl.n	800d378 <__swrite+0x1e>
 800d36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d370:	2302      	movs	r3, #2
 800d372:	2200      	movs	r2, #0
 800d374:	f000 f868 	bl	800d448 <_lseek_r>
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d382:	81a3      	strh	r3, [r4, #12]
 800d384:	4632      	mov	r2, r6
 800d386:	463b      	mov	r3, r7
 800d388:	4628      	mov	r0, r5
 800d38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d38e:	f000 b817 	b.w	800d3c0 <_write_r>

0800d392 <__sseek>:
 800d392:	b510      	push	{r4, lr}
 800d394:	460c      	mov	r4, r1
 800d396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39a:	f000 f855 	bl	800d448 <_lseek_r>
 800d39e:	1c43      	adds	r3, r0, #1
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	bf15      	itete	ne
 800d3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3ae:	81a3      	strheq	r3, [r4, #12]
 800d3b0:	bf18      	it	ne
 800d3b2:	81a3      	strhne	r3, [r4, #12]
 800d3b4:	bd10      	pop	{r4, pc}

0800d3b6 <__sclose>:
 800d3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ba:	f000 b813 	b.w	800d3e4 <_close_r>
	...

0800d3c0 <_write_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_write_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f8 fe21 	bl	8006016 <_write>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_write_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_write_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20001044 	.word	0x20001044

0800d3e4 <_close_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d06      	ldr	r5, [pc, #24]	; (800d400 <_close_r+0x1c>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	f7f8 fe2d 	bl	800604e <_close>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	d102      	bne.n	800d3fe <_close_r+0x1a>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b103      	cbz	r3, 800d3fe <_close_r+0x1a>
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20001044 	.word	0x20001044

0800d404 <_fstat_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	4d07      	ldr	r5, [pc, #28]	; (800d424 <_fstat_r+0x20>)
 800d408:	2300      	movs	r3, #0
 800d40a:	4604      	mov	r4, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	4611      	mov	r1, r2
 800d410:	602b      	str	r3, [r5, #0]
 800d412:	f7f8 fe28 	bl	8006066 <_fstat>
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	d102      	bne.n	800d420 <_fstat_r+0x1c>
 800d41a:	682b      	ldr	r3, [r5, #0]
 800d41c:	b103      	cbz	r3, 800d420 <_fstat_r+0x1c>
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	bf00      	nop
 800d424:	20001044 	.word	0x20001044

0800d428 <_isatty_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4d06      	ldr	r5, [pc, #24]	; (800d444 <_isatty_r+0x1c>)
 800d42c:	2300      	movs	r3, #0
 800d42e:	4604      	mov	r4, r0
 800d430:	4608      	mov	r0, r1
 800d432:	602b      	str	r3, [r5, #0]
 800d434:	f7f8 fe27 	bl	8006086 <_isatty>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_isatty_r+0x1a>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_isatty_r+0x1a>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	20001044 	.word	0x20001044

0800d448 <_lseek_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4d07      	ldr	r5, [pc, #28]	; (800d468 <_lseek_r+0x20>)
 800d44c:	4604      	mov	r4, r0
 800d44e:	4608      	mov	r0, r1
 800d450:	4611      	mov	r1, r2
 800d452:	2200      	movs	r2, #0
 800d454:	602a      	str	r2, [r5, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	f7f8 fe20 	bl	800609c <_lseek>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_lseek_r+0x1e>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_lseek_r+0x1e>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	20001044 	.word	0x20001044

0800d46c <_read_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	4d07      	ldr	r5, [pc, #28]	; (800d48c <_read_r+0x20>)
 800d470:	4604      	mov	r4, r0
 800d472:	4608      	mov	r0, r1
 800d474:	4611      	mov	r1, r2
 800d476:	2200      	movs	r2, #0
 800d478:	602a      	str	r2, [r5, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	f7f8 fdae 	bl	8005fdc <_read>
 800d480:	1c43      	adds	r3, r0, #1
 800d482:	d102      	bne.n	800d48a <_read_r+0x1e>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	b103      	cbz	r3, 800d48a <_read_r+0x1e>
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	20001044 	.word	0x20001044

0800d490 <_init>:
 800d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d492:	bf00      	nop
 800d494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d496:	bc08      	pop	{r3}
 800d498:	469e      	mov	lr, r3
 800d49a:	4770      	bx	lr

0800d49c <_fini>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	bf00      	nop
 800d4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a2:	bc08      	pop	{r3}
 800d4a4:	469e      	mov	lr, r3
 800d4a6:	4770      	bx	lr
